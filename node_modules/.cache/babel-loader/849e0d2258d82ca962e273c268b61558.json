{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { sleep } from 'openai/core';\nimport { APIConnectionTimeoutError } from 'openai/error';\nimport * as FilesAPI from 'openai/resources/files';\nimport { multipartFormRequestOptions } from 'openai/core';\nimport { Page } from 'openai/pagination';\nexport class Files extends APIResource {\n  /**\n   * Upload a file that can be used across various endpoints/features. Currently, the\n   * size of all the files uploaded by one organization can be up to 1 GB. Please\n   * [contact us](https://help.openai.com/) if you need to increase the storage\n   * limit.\n   */\n  create(body, options) {\n    return this.post('/files', multipartFormRequestOptions({\n      body,\n      ...options\n    }));\n  }\n  /**\n   * Returns information about a specific file.\n   */\n\n\n  retrieve(fileId, options) {\n    return this.get(`/files/${fileId}`, options);\n  }\n  /**\n   * Returns a list of files that belong to the user's organization.\n   */\n\n\n  list(options) {\n    return this.getAPIList('/files', FileObjectsPage, options);\n  }\n  /**\n   * Delete a file.\n   */\n\n\n  del(fileId, options) {\n    return this.delete(`/files/${fileId}`, options);\n  }\n  /**\n   * Returns the contents of the specified file.\n   */\n\n\n  retrieveContent(fileId, options) {\n    return this.get(`/files/${fileId}/content`, { ...options,\n      headers: {\n        Accept: 'application/json',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Waits for the given file to be processed, default timeout is 30 mins.\n   */\n\n\n  async waitForProcessing(id) {\n    let {\n      pollInterval = 5000,\n      maxWait = 30 * 60 * 1000\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const TERMINAL_STATES = new Set(['processed', 'error', 'deleted']);\n    const start = Date.now();\n    let file = await this.retrieve(id);\n\n    while (!file.status || !TERMINAL_STATES.has(file.status)) {\n      await sleep(pollInterval);\n      file = await this.retrieve(id);\n\n      if (Date.now() - start > maxWait) {\n        throw new APIConnectionTimeoutError({\n          message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`\n        });\n      }\n    }\n\n    return file;\n  }\n\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\n\nexport class FileObjectsPage extends Page {}\n\n(function (Files) {\n  Files.FileObjectsPage = FilesAPI.FileObjectsPage;\n})(Files || (Files = {}));","map":{"version":3,"mappings":"AAAA;SAGSA,mBAAmB;SACnBC,aAAa;SACbC,iCAAiC;OACnC,KAAKC,cAAc;SACAC,mCAAmC;SACpDC,YAAY;AAErB,OAAM,MAAOC,KAAP,SAAqBN,WAArB,CAAgC;AACpC;;;;;;AAMAO,QAAM,CAACC,IAAD,EAAyBC,OAAzB,EAAsD;AAC1D,WAAO,KAAKC,IAAL,CAAU,QAAV,EAAoBN,2BAA2B,CAAC;AAAEI,UAAF;AAAQ,SAAGC;AAAX,KAAD,CAA/C,CAAP;AACD;AAED;;;;;AAGAE,UAAQ,CAACC,MAAD,EAAiBH,OAAjB,EAA8C;AACpD,WAAO,KAAKI,GAAL,CAAS,UAAUD,MAAM,EAAzB,EAA6BH,OAA7B,CAAP;AACD;AAED;;;;;AAGAK,MAAI,CAACL,OAAD,EAA8B;AAChC,WAAO,KAAKM,UAAL,CAAgB,QAAhB,EAA0BC,eAA1B,EAA2CP,OAA3C,CAAP;AACD;AAED;;;;;AAGAQ,KAAG,CAACL,MAAD,EAAiBH,OAAjB,EAA8C;AAC/C,WAAO,KAAKS,MAAL,CAAY,UAAUN,MAAM,EAA5B,EAAgCH,OAAhC,CAAP;AACD;AAED;;;;;AAGAU,iBAAe,CAACP,MAAD,EAAiBH,OAAjB,EAA8C;AAC3D,WAAO,KAAKI,GAAL,CAAS,UAAUD,MAAM,UAAzB,EAAqC,EAC1C,GAAGH,OADuC;AAE1CW,aAAO,EAAE;AAAEC,cAAM,EAAE,kBAAV;AAA8B,WAAGZ,OAAO,EAAEW;AAA1C;AAFiC,KAArC,CAAP;AAID;AAED;;;;;AAGuB,QAAjBE,iBAAiB,CACrBC,EADqB,EAE8E;AAAA,QAAnG;AAAEC,kBAAY,GAAG,IAAjB;AAAuBC,aAAO,GAAG,KAAK,EAAL,GAAU;AAA3C,KAAmG,uEAAF,EAAE;AAEnG,UAAMC,eAAe,GAAG,IAAIC,GAAJ,CAAQ,CAAC,WAAD,EAAc,OAAd,EAAuB,SAAvB,CAAR,CAAxB;AAEA,UAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAd;AACA,QAAIC,IAAI,GAAG,MAAM,KAAKpB,QAAL,CAAcY,EAAd,CAAjB;;AAEA,WAAO,CAACQ,IAAI,CAACC,MAAN,IAAgB,CAACN,eAAe,CAACO,GAAhB,CAAoBF,IAAI,CAACC,MAAzB,CAAxB,EAA0D;AACxD,YAAM/B,KAAK,CAACuB,YAAD,CAAX;AAEAO,UAAI,GAAG,MAAM,KAAKpB,QAAL,CAAcY,EAAd,CAAb;;AACA,UAAIM,IAAI,CAACC,GAAL,KAAaF,KAAb,GAAqBH,OAAzB,EAAkC;AAChC,cAAM,IAAIvB,yBAAJ,CAA8B;AAClCgC,iBAAO,EAAE,iCAAiCX,EAAE,+BAA+BE,OAAO;AADhD,SAA9B,CAAN;AAGD;AACF;;AAED,WAAOM,IAAP;AACD;;AAlEmC;AAqEtC;;;;AAGA,OAAM,MAAOf,eAAP,SAA+BX,IAA/B,CAA+C;;AA8ErD,WAAiBC,KAAjB,EAAsB;AAINA,0BAAkBH,QAAQ,CAACa,eAA3B;AAEf,CAND,EAAiBV,KAAK,KAALA,KAAK,MAAtB","names":["APIResource","sleep","APIConnectionTimeoutError","FilesAPI","multipartFormRequestOptions","Page","Files","create","body","options","post","retrieve","fileId","get","list","getAPIList","FileObjectsPage","del","delete","retrieveContent","headers","Accept","waitForProcessing","id","pollInterval","maxWait","TERMINAL_STATES","Set","start","Date","now","file","status","has","message"],"sources":["/Users/zachjohnson/Desktop/React-Wordle-lesson-16/node_modules/openai/src/resources/files.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../core\";\nimport { APIResource } from \"../resource\";\nimport { sleep } from \"../core\";\nimport { APIConnectionTimeoutError } from \"../error\";\nimport * as FilesAPI from \"./files\";\nimport { type Uploadable, multipartFormRequestOptions } from \"../core\";\nimport { Page } from \"../pagination\";\n\nexport class Files extends APIResource {\n  /**\n   * Upload a file that can be used across various endpoints/features. Currently, the\n   * size of all the files uploaded by one organization can be up to 1 GB. Please\n   * [contact us](https://help.openai.com/) if you need to increase the storage\n   * limit.\n   */\n  create(body: FileCreateParams, options?: Core.RequestOptions): Core.APIPromise<FileObject> {\n    return this.post('/files', multipartFormRequestOptions({ body, ...options }));\n  }\n\n  /**\n   * Returns information about a specific file.\n   */\n  retrieve(fileId: string, options?: Core.RequestOptions): Core.APIPromise<FileObject> {\n    return this.get(`/files/${fileId}`, options);\n  }\n\n  /**\n   * Returns a list of files that belong to the user's organization.\n   */\n  list(options?: Core.RequestOptions): Core.PagePromise<FileObjectsPage, FileObject> {\n    return this.getAPIList('/files', FileObjectsPage, options);\n  }\n\n  /**\n   * Delete a file.\n   */\n  del(fileId: string, options?: Core.RequestOptions): Core.APIPromise<FileDeleted> {\n    return this.delete(`/files/${fileId}`, options);\n  }\n\n  /**\n   * Returns the contents of the specified file.\n   */\n  retrieveContent(fileId: string, options?: Core.RequestOptions): Core.APIPromise<string> {\n    return this.get(`/files/${fileId}/content`, {\n      ...options,\n      headers: { Accept: 'application/json', ...options?.headers },\n    });\n  }\n\n  /**\n   * Waits for the given file to be processed, default timeout is 30 mins.\n   */\n  async waitForProcessing(\n    id: string,\n    { pollInterval = 5000, maxWait = 30 * 60 * 1000 }: { pollInterval?: number; maxWait?: number } = {},\n  ): Promise<FileObject> {\n    const TERMINAL_STATES = new Set(['processed', 'error', 'deleted']);\n\n    const start = Date.now();\n    let file = await this.retrieve(id);\n\n    while (!file.status || !TERMINAL_STATES.has(file.status)) {\n      await sleep(pollInterval);\n\n      file = await this.retrieve(id);\n      if (Date.now() - start > maxWait) {\n        throw new APIConnectionTimeoutError({\n          message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`,\n        });\n      }\n    }\n\n    return file;\n  }\n}\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class FileObjectsPage extends Page<FileObject> {}\n\nexport type FileContent = string;\n\nexport interface FileDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: string;\n}\n\n/**\n * The `File` object represents a document that has been uploaded to OpenAI.\n */\nexport interface FileObject {\n  /**\n   * The file identifier, which can be referenced in the API endpoints.\n   */\n  id: string;\n\n  /**\n   * The size of the file in bytes.\n   */\n  bytes: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the file was created.\n   */\n  created_at: number;\n\n  /**\n   * The name of the file.\n   */\n  filename: string;\n\n  /**\n   * The object type, which is always \"file\".\n   */\n  object: string;\n\n  /**\n   * The intended purpose of the file. Currently, only \"fine-tune\" is supported.\n   */\n  purpose: string;\n\n  /**\n   * The current status of the file, which can be either `uploaded`, `processed`,\n   * `pending`, `error`, `deleting` or `deleted`.\n   */\n  status?: string;\n\n  /**\n   * Additional details about the status of the file. If the file is in the `error`\n   * state, this will include a message describing the error.\n   */\n  status_details?: string | null;\n}\n\nexport interface FileCreateParams {\n  /**\n   * The file object (not file name) to be uploaded.\n   *\n   * If the `purpose` is set to \"fine-tune\", the file will be used for fine-tuning.\n   */\n  file: Uploadable;\n\n  /**\n   * The intended purpose of the uploaded file.\n   *\n   * Use \"fine-tune\" for\n   * [fine-tuning](https://platform.openai.com/docs/api-reference/fine-tuning). This\n   * allows us to validate the format of the uploaded file is correct for\n   * fine-tuning.\n   */\n  purpose: string;\n}\n\nexport namespace Files {\n  export import FileContent = FilesAPI.FileContent;\n  export import FileDeleted = FilesAPI.FileDeleted;\n  export import FileObject = FilesAPI.FileObject;\n  export import FileObjectsPage = FilesAPI.FileObjectsPage;\n  export import FileCreateParams = FilesAPI.FileCreateParams;\n}\n"]},"metadata":{},"sourceType":"module"}