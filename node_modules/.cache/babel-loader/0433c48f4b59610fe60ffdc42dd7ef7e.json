{"ast":null,"code":"var _jsxFileName = \"/Users/zachjohnson/Desktop/React-Wordle-lesson-16/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Wordle from './components/Wordle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [solution, setSolution] = useState(null);\n  const [wordBank, setWordBank] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3001/solutions').then(res => res.json()).then(json => {\n      // random int between 0 & 14\n      const randomSolution = json[Math.floor(Math.random() * json.length)];\n      setSolution(randomSolution.word);\n      setWordBank(json);\n    });\n  }, [setSolution, setWordBank]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wordle (Lingo)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), solution && /*#__PURE__*/_jsxDEV(Wordle, {\n      solution: solution,\n      wordBank: wordBank\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vu5A0zj8Sx0Eecw2ilqtHCesW7w=\");\n\n_c = App;\nexport default App;\n/* \n\ndata we need to track:\n  -- solution\n    -- 5 letter string, e.g. 'drain'\n  -- past guesses\n    -- an array of past guesses\n    -- each past guess is an array of letter objects [{}, {}, {}, {}, {}]\n    -- each object represents a letter in the guess word {letter: 'a', color: 'yellow'}\n  -- current guess\n    -- string 'hello'\n  -- keypad letters\n    -- array of letter objects [{key: 'a', color: 'green'}, {}, {} ...]\n  -- number of turns\n    -- an integer 0 - 6\n\ngame process:\n  -- entering words:\n    -- user enters a letter & a square is filled with that letter\n    -- when a user hits delete it deletes the previous letter\n    -- when a user hits enter it submits the word\n      -- if all squares are not filled with letters then the word is not submitted\n      -- if that word has already been used in a prev guess then the word is not submitted\n  -- checking submitted words:\n    -- each letter is checked to see if it matches to the solution\n    -- each letter is assigned a color based on it's inclusion in the solution\n      -- exact matches (correct position in the solution) are green\n      -- partial matches (in the solution but not the correct position) are yellow\n      -- none-matches (not in the solution at all) are grey\n    -- the guess is added the grid with the correct colors\n    -- the current guess moves to the next row\n    -- the keypad letters are updated (colors)\n  -- ending the game:\n    -- when the guessed word fully matches the solution\n      -- modal to say 'well done'\n    -- when the user runs out of guesses\n      -- modal to say 'unlucky'\n\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/React-Wordle-lesson-16/src/App.js"],"names":["useEffect","useState","Wordle","App","solution","setSolution","wordBank","setWordBank","fetch","then","res","json","randomSolution","Math","floor","random","length","word"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,KAAK,CAAC,iCAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQE,IAAI,IAAI;AACZ;AACA,YAAMC,cAAc,GAAGD,IAAI,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcJ,IAAI,CAACK,MAA9B,CAAD,CAA3B;AACAX,MAAAA,WAAW,CAACO,cAAc,CAACK,IAAhB,CAAX;AACAV,MAAAA,WAAW,CAACI,IAAD,CAAX;AACD,KAPH;AAQD,GATQ,EASN,CAACN,WAAD,EAAcE,WAAd,CATM,CAAT;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGH,QAAQ,iBAAI,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEA,QAAlB;AAA4B,MAAA,QAAQ,EAAEE;AAAtC;AAAA;AAAA;AAAA;AAAA,YAFf;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GApBQH,G;;KAAAA,G;AAsBT,eAAeA,GAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useEffect, useState } from 'react'\nimport Wordle from './components/Wordle'\n\nfunction App() {\n  const [solution, setSolution] = useState(null)\n  const [wordBank, setWordBank] = useState([])\n  useEffect(() => {\n    fetch('http://localhost:3001/solutions')\n      .then(res => res.json())\n      .then(json => {\n        // random int between 0 & 14\n        const randomSolution = json[Math.floor(Math.random()*json.length)]\n        setSolution(randomSolution.word)\n        setWordBank(json)\n      })\n  }, [setSolution,Â setWordBank])\n\n  return (\n    <div className=\"App\">\n      <h1>Wordle (Lingo)</h1>\n      {solution && <Wordle solution={solution} wordBank={wordBank}/>}\n    </div>\n  )\n}\n\nexport default App\n\n/* \n\ndata we need to track:\n  -- solution\n    -- 5 letter string, e.g. 'drain'\n  -- past guesses\n    -- an array of past guesses\n    -- each past guess is an array of letter objects [{}, {}, {}, {}, {}]\n    -- each object represents a letter in the guess word {letter: 'a', color: 'yellow'}\n  -- current guess\n    -- string 'hello'\n  -- keypad letters\n    -- array of letter objects [{key: 'a', color: 'green'}, {}, {} ...]\n  -- number of turns\n    -- an integer 0 - 6\n\ngame process:\n  -- entering words:\n    -- user enters a letter & a square is filled with that letter\n    -- when a user hits delete it deletes the previous letter\n    -- when a user hits enter it submits the word\n      -- if all squares are not filled with letters then the word is not submitted\n      -- if that word has already been used in a prev guess then the word is not submitted\n  -- checking submitted words:\n    -- each letter is checked to see if it matches to the solution\n    -- each letter is assigned a color based on it's inclusion in the solution\n      -- exact matches (correct position in the solution) are green\n      -- partial matches (in the solution but not the correct position) are yellow\n      -- none-matches (not in the solution at all) are grey\n    -- the guess is added the grid with the correct colors\n    -- the current guess moves to the next row\n    -- the keypad letters are updated (colors)\n  -- ending the game:\n    -- when the guessed word fully matches the solution\n      -- modal to say 'well done'\n    -- when the user runs out of guesses\n      -- modal to say 'unlucky'\n\n*/"]},"metadata":{},"sourceType":"module"}