{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\n\nconst DependencyTemplate = require(\"../DependencyTemplate\");\n\nconst memoize = require(\"../util/memoize\");\n/** @typedef {import(\"../Dependency\").TRANSITIVE} TRANSITIVE */\n\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n\n\nconst getRawModule = memoize(() => require(\"../RawModule\"));\n\nclass ModuleDependency extends Dependency {\n  /**\n   * @param {string} request request path which needs resolving\n   */\n  constructor(request) {\n    super();\n    this.request = request;\n    this.userRequest = request;\n    this.range = undefined; // assertions must be serialized by subclasses that use it\n\n    /** @type {Record<string, any> | undefined} */\n\n    this.assertions = undefined;\n    this._context = undefined;\n  }\n  /**\n   * @returns {string | undefined} a request context\n   */\n\n\n  getContext() {\n    return this._context;\n  }\n  /**\n   * @returns {string | null} an identifier to merge equal requests\n   */\n\n\n  getResourceIdentifier() {\n    let str = `context${this._context || \"\"}|module${this.request}`;\n\n    if (this.assertions !== undefined) {\n      str += JSON.stringify(this.assertions);\n    }\n\n    return str;\n  }\n  /**\n   * @returns {boolean | TRANSITIVE} true, when changes to the referenced module could affect the referencing module; TRANSITIVE, when changes to the referenced module could affect referencing modules of the referencing module\n   */\n\n\n  couldAffectReferencingModule() {\n    return true;\n  }\n  /**\n   * @param {string} context context directory\n   * @returns {Module | null} a module\n   */\n\n\n  createIgnoredModule(context) {\n    const RawModule = getRawModule();\n    return new RawModule(\"/* (ignored) */\", `ignored|${context}|${this.request}`, `${this.request} (ignored)`);\n  }\n  /**\n   * @param {ObjectSerializerContext} context context\n   */\n\n\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.request);\n    write(this.userRequest);\n    write(this._context);\n    write(this.range);\n    super.serialize(context);\n  }\n  /**\n   * @param {ObjectDeserializerContext} context context\n   */\n\n\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.request = read();\n    this.userRequest = read();\n    this._context = read();\n    this.range = read();\n    super.deserialize(context);\n  }\n\n}\n\nModuleDependency.Template = DependencyTemplate;\nmodule.exports = ModuleDependency;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/dependencies/ModuleDependency.js"],"names":["Dependency","require","DependencyTemplate","memoize","getRawModule","ModuleDependency","constructor","request","userRequest","range","undefined","assertions","_context","getContext","getResourceIdentifier","str","JSON","stringify","couldAffectReferencingModule","createIgnoredModule","context","RawModule","serialize","write","deserialize","read","Template","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,uBAAD,CAAlC;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,iBAAD,CAAvB;AAEA;;AACA;;AACA;;AACA;;;AAEA,MAAMG,YAAY,GAAGD,OAAO,CAAC,MAAMF,OAAO,CAAC,cAAD,CAAd,CAA5B;;AAEA,MAAMI,gBAAN,SAA+BL,UAA/B,CAA0C;AACzC;AACD;AACA;AACCM,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,WAAL,GAAmBD,OAAnB;AACA,SAAKE,KAAL,GAAaC,SAAb,CAJoB,CAKpB;;AACA;;AACA,SAAKC,UAAL,GAAkBD,SAAlB;AACA,SAAKE,QAAL,GAAgBF,SAAhB;AACA;AAED;AACD;AACA;;;AACCG,EAAAA,UAAU,GAAG;AACZ,WAAO,KAAKD,QAAZ;AACA;AAED;AACD;AACA;;;AACCE,EAAAA,qBAAqB,GAAG;AACvB,QAAIC,GAAG,GAAI,UAAS,KAAKH,QAAL,IAAiB,EAAG,UAAS,KAAKL,OAAQ,EAA9D;;AACA,QAAI,KAAKI,UAAL,KAAoBD,SAAxB,EAAmC;AAClCK,MAAAA,GAAG,IAAIC,IAAI,CAACC,SAAL,CAAe,KAAKN,UAApB,CAAP;AACA;;AACD,WAAOI,GAAP;AACA;AAED;AACD;AACA;;;AACCG,EAAAA,4BAA4B,GAAG;AAC9B,WAAO,IAAP;AACA;AAED;AACD;AACA;AACA;;;AACCC,EAAAA,mBAAmB,CAACC,OAAD,EAAU;AAC5B,UAAMC,SAAS,GAAGjB,YAAY,EAA9B;AACA,WAAO,IAAIiB,SAAJ,CACN,iBADM,EAEL,WAAUD,OAAQ,IAAG,KAAKb,OAAQ,EAF7B,EAGL,GAAE,KAAKA,OAAQ,YAHV,CAAP;AAKA;AAED;AACD;AACA;;;AACCe,EAAAA,SAAS,CAACF,OAAD,EAAU;AAClB,UAAM;AAAEG,MAAAA;AAAF,QAAYH,OAAlB;AACAG,IAAAA,KAAK,CAAC,KAAKhB,OAAN,CAAL;AACAgB,IAAAA,KAAK,CAAC,KAAKf,WAAN,CAAL;AACAe,IAAAA,KAAK,CAAC,KAAKX,QAAN,CAAL;AACAW,IAAAA,KAAK,CAAC,KAAKd,KAAN,CAAL;AACA,UAAMa,SAAN,CAAgBF,OAAhB;AACA;AAED;AACD;AACA;;;AACCI,EAAAA,WAAW,CAACJ,OAAD,EAAU;AACpB,UAAM;AAAEK,MAAAA;AAAF,QAAWL,OAAjB;AACA,SAAKb,OAAL,GAAekB,IAAI,EAAnB;AACA,SAAKjB,WAAL,GAAmBiB,IAAI,EAAvB;AACA,SAAKb,QAAL,GAAgBa,IAAI,EAApB;AACA,SAAKhB,KAAL,GAAagB,IAAI,EAAjB;AACA,UAAMD,WAAN,CAAkBJ,OAAlB;AACA;;AA3EwC;;AA8E1Cf,gBAAgB,CAACqB,QAAjB,GAA4BxB,kBAA5B;AAEAyB,MAAM,CAACC,OAAP,GAAiBvB,gBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\nconst DependencyTemplate = require(\"../DependencyTemplate\");\nconst memoize = require(\"../util/memoize\");\n\n/** @typedef {import(\"../Dependency\").TRANSITIVE} TRANSITIVE */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n\nconst getRawModule = memoize(() => require(\"../RawModule\"));\n\nclass ModuleDependency extends Dependency {\n\t/**\n\t * @param {string} request request path which needs resolving\n\t */\n\tconstructor(request) {\n\t\tsuper();\n\t\tthis.request = request;\n\t\tthis.userRequest = request;\n\t\tthis.range = undefined;\n\t\t// assertions must be serialized by subclasses that use it\n\t\t/** @type {Record<string, any> | undefined} */\n\t\tthis.assertions = undefined;\n\t\tthis._context = undefined;\n\t}\n\n\t/**\n\t * @returns {string | undefined} a request context\n\t */\n\tgetContext() {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * @returns {string | null} an identifier to merge equal requests\n\t */\n\tgetResourceIdentifier() {\n\t\tlet str = `context${this._context || \"\"}|module${this.request}`;\n\t\tif (this.assertions !== undefined) {\n\t\t\tstr += JSON.stringify(this.assertions);\n\t\t}\n\t\treturn str;\n\t}\n\n\t/**\n\t * @returns {boolean | TRANSITIVE} true, when changes to the referenced module could affect the referencing module; TRANSITIVE, when changes to the referenced module could affect referencing modules of the referencing module\n\t */\n\tcouldAffectReferencingModule() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {string} context context directory\n\t * @returns {Module | null} a module\n\t */\n\tcreateIgnoredModule(context) {\n\t\tconst RawModule = getRawModule();\n\t\treturn new RawModule(\n\t\t\t\"/* (ignored) */\",\n\t\t\t`ignored|${context}|${this.request}`,\n\t\t\t`${this.request} (ignored)`\n\t\t);\n\t}\n\n\t/**\n\t * @param {ObjectSerializerContext} context context\n\t */\n\tserialize(context) {\n\t\tconst { write } = context;\n\t\twrite(this.request);\n\t\twrite(this.userRequest);\n\t\twrite(this._context);\n\t\twrite(this.range);\n\t\tsuper.serialize(context);\n\t}\n\n\t/**\n\t * @param {ObjectDeserializerContext} context context\n\t */\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\t\tthis.request = read();\n\t\tthis.userRequest = read();\n\t\tthis._context = read();\n\t\tthis.range = read();\n\t\tsuper.deserialize(context);\n\t}\n}\n\nModuleDependency.Template = DependencyTemplate;\n\nmodule.exports = ModuleDependency;\n"]},"metadata":{},"sourceType":"script"}