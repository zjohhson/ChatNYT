{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst Template = require(\"../Template\");\n\nconst HelperRuntimeModule = require(\"./HelperRuntimeModule\");\n/** @typedef {import(\"../Compilation\")} Compilation */\n\n\nclass GetTrustedTypesPolicyRuntimeModule extends HelperRuntimeModule {\n  /**\n   * @param {ReadonlySet<string>} runtimeRequirements runtime requirements\n   */\n  constructor(runtimeRequirements) {\n    super(\"trusted types policy\");\n    this.runtimeRequirements = runtimeRequirements;\n  }\n  /**\n   * @returns {string | null} runtime code\n   */\n\n\n  generate() {\n    const compilation =\n    /** @type {Compilation} */\n    this.compilation;\n    const {\n      runtimeTemplate,\n      outputOptions\n    } = compilation;\n    const {\n      trustedTypes\n    } = outputOptions;\n    const fn = RuntimeGlobals.getTrustedTypesPolicy;\n    const wrapPolicyCreationInTryCatch = trustedTypes ? trustedTypes.onPolicyCreationFailure === \"continue\" : false;\n    return Template.asString([\"var policy;\", `${fn} = ${runtimeTemplate.basicFunction(\"\", [\"// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.\", \"if (policy === undefined) {\", Template.indent([\"policy = {\", Template.indent([...(this.runtimeRequirements.has(RuntimeGlobals.createScript) ? [`createScript: ${runtimeTemplate.returningFunction(\"script\", \"script\")}`] : []), ...(this.runtimeRequirements.has(RuntimeGlobals.createScriptUrl) ? [`createScriptURL: ${runtimeTemplate.returningFunction(\"url\", \"url\")}`] : [])].join(\",\\n\")), \"};\", ...(trustedTypes ? ['if (typeof trustedTypes !== \"undefined\" && trustedTypes.createPolicy) {', Template.indent([...(wrapPolicyCreationInTryCatch ? [\"try {\"] : []), ...[`policy = trustedTypes.createPolicy(${JSON.stringify(trustedTypes.policyName)}, policy);`].map(line => wrapPolicyCreationInTryCatch ? Template.indent(line) : line), ...(wrapPolicyCreationInTryCatch ? [\"} catch (e) {\", Template.indent([`console.warn('Could not create trusted-types policy ${JSON.stringify(trustedTypes.policyName)}');`]), \"}\"] : [])]), \"}\"] : [])]), \"}\", \"return policy;\"])};`]);\n  }\n\n}\n\nmodule.exports = GetTrustedTypesPolicyRuntimeModule;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/runtime/GetTrustedTypesPolicyRuntimeModule.js"],"names":["RuntimeGlobals","require","Template","HelperRuntimeModule","GetTrustedTypesPolicyRuntimeModule","constructor","runtimeRequirements","generate","compilation","runtimeTemplate","outputOptions","trustedTypes","fn","getTrustedTypesPolicy","wrapPolicyCreationInTryCatch","onPolicyCreationFailure","asString","basicFunction","indent","has","createScript","returningFunction","createScriptUrl","join","JSON","stringify","policyName","map","line","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,aAAD,CAAxB;;AACA,MAAME,mBAAmB,GAAGF,OAAO,CAAC,uBAAD,CAAnC;AAEA;;;AAEA,MAAMG,kCAAN,SAAiDD,mBAAjD,CAAqE;AACpE;AACD;AACA;AACCE,EAAAA,WAAW,CAACC,mBAAD,EAAsB;AAChC,UAAM,sBAAN;AACA,SAAKA,mBAAL,GAA2BA,mBAA3B;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,QAAQ,GAAG;AACV,UAAMC,WAAW;AAAG;AAA4B,SAAKA,WAArD;AACA,UAAM;AAAEC,MAAAA,eAAF;AAAmBC,MAAAA;AAAnB,QAAqCF,WAA3C;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAmBD,aAAzB;AACA,UAAME,EAAE,GAAGZ,cAAc,CAACa,qBAA1B;AACA,UAAMC,4BAA4B,GAAGH,YAAY,GAC9CA,YAAY,CAACI,uBAAb,KAAyC,UADK,GAE9C,KAFH;AAIA,WAAOb,QAAQ,CAACc,QAAT,CAAkB,CACxB,aADwB,EAEvB,GAAEJ,EAAG,MAAKH,eAAe,CAACQ,aAAhB,CAA8B,EAA9B,EAAkC,CAC5C,gGAD4C,EAE5C,6BAF4C,EAG5Cf,QAAQ,CAACgB,MAAT,CAAgB,CACf,YADe,EAEfhB,QAAQ,CAACgB,MAAT,CACC,CACC,IAAI,KAAKZ,mBAAL,CAAyBa,GAAzB,CAA6BnB,cAAc,CAACoB,YAA5C,IACD,CACC,iBAAgBX,eAAe,CAACY,iBAAhB,CAChB,QADgB,EAEhB,QAFgB,CAGf,EAJF,CADC,GAOD,EAPH,CADD,EASC,IAAI,KAAKf,mBAAL,CAAyBa,GAAzB,CAA6BnB,cAAc,CAACsB,eAA5C,IACD,CACC,oBAAmBb,eAAe,CAACY,iBAAhB,CACnB,KADmB,EAEnB,KAFmB,CAGlB,EAJF,CADC,GAOD,EAPH,CATD,EAiBEE,IAjBF,CAiBO,KAjBP,CADD,CAFe,EAsBf,IAtBe,EAuBf,IAAIZ,YAAY,GACb,CACA,yEADA,EAEAT,QAAQ,CAACgB,MAAT,CAAgB,CACf,IAAIJ,4BAA4B,GAAG,CAAC,OAAD,CAAH,GAAe,EAA/C,CADe,EAEf,GAAG,CACD,sCAAqCU,IAAI,CAACC,SAAL,CACrCd,YAAY,CAACe,UADwB,CAEpC,YAHA,EAIDC,GAJC,CAIGC,IAAI,IACTd,4BAA4B,GAAGZ,QAAQ,CAACgB,MAAT,CAAgBU,IAAhB,CAAH,GAA2BA,IALrD,CAFY,EASf,IAAId,4BAA4B,GAC7B,CACA,eADA,EAEAZ,QAAQ,CAACgB,MAAT,CAAgB,CACd,uDAAsDM,IAAI,CAACC,SAAL,CACtDd,YAAY,CAACe,UADyC,CAErD,KAHa,CAAhB,CAFA,EAOA,GAPA,CAD6B,GAU7B,EAVH,CATe,CAAhB,CAFA,EAuBA,GAvBA,CADa,GA0Bb,EA1BH,CAvBe,CAAhB,CAH4C,EAsD5C,GAtD4C,EAuD5C,gBAvD4C,CAAlC,CAwDR,GA1DqB,CAAlB,CAAP;AA4DA;;AAjFmE;;AAoFrEG,MAAM,CAACC,OAAP,GAAiB1B,kCAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst HelperRuntimeModule = require(\"./HelperRuntimeModule\");\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n\nclass GetTrustedTypesPolicyRuntimeModule extends HelperRuntimeModule {\n\t/**\n\t * @param {ReadonlySet<string>} runtimeRequirements runtime requirements\n\t */\n\tconstructor(runtimeRequirements) {\n\t\tsuper(\"trusted types policy\");\n\t\tthis.runtimeRequirements = runtimeRequirements;\n\t}\n\n\t/**\n\t * @returns {string | null} runtime code\n\t */\n\tgenerate() {\n\t\tconst compilation = /** @type {Compilation} */ (this.compilation);\n\t\tconst { runtimeTemplate, outputOptions } = compilation;\n\t\tconst { trustedTypes } = outputOptions;\n\t\tconst fn = RuntimeGlobals.getTrustedTypesPolicy;\n\t\tconst wrapPolicyCreationInTryCatch = trustedTypes\n\t\t\t? trustedTypes.onPolicyCreationFailure === \"continue\"\n\t\t\t: false;\n\n\t\treturn Template.asString([\n\t\t\t\"var policy;\",\n\t\t\t`${fn} = ${runtimeTemplate.basicFunction(\"\", [\n\t\t\t\t\"// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.\",\n\t\t\t\t\"if (policy === undefined) {\",\n\t\t\t\tTemplate.indent([\n\t\t\t\t\t\"policy = {\",\n\t\t\t\t\tTemplate.indent(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t...(this.runtimeRequirements.has(RuntimeGlobals.createScript)\n\t\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\t\t`createScript: ${runtimeTemplate.returningFunction(\n\t\t\t\t\t\t\t\t\t\t\t\"script\",\n\t\t\t\t\t\t\t\t\t\t\t\"script\"\n\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t: []),\n\t\t\t\t\t\t\t...(this.runtimeRequirements.has(RuntimeGlobals.createScriptUrl)\n\t\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\t\t`createScriptURL: ${runtimeTemplate.returningFunction(\n\t\t\t\t\t\t\t\t\t\t\t\"url\",\n\t\t\t\t\t\t\t\t\t\t\t\"url\"\n\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t: [])\n\t\t\t\t\t\t].join(\",\\n\")\n\t\t\t\t\t),\n\t\t\t\t\t\"};\",\n\t\t\t\t\t...(trustedTypes\n\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t'if (typeof trustedTypes !== \"undefined\" && trustedTypes.createPolicy) {',\n\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t...(wrapPolicyCreationInTryCatch ? [\"try {\"] : []),\n\t\t\t\t\t\t\t\t\t...[\n\t\t\t\t\t\t\t\t\t\t`policy = trustedTypes.createPolicy(${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\ttrustedTypes.policyName\n\t\t\t\t\t\t\t\t\t\t)}, policy);`\n\t\t\t\t\t\t\t\t\t].map(line =>\n\t\t\t\t\t\t\t\t\t\twrapPolicyCreationInTryCatch ? Template.indent(line) : line\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t...(wrapPolicyCreationInTryCatch\n\t\t\t\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\t\t\t\t\"} catch (e) {\",\n\t\t\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\t\t`console.warn('Could not create trusted-types policy ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrustedTypes.policyName\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}');`\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t\t\t: [])\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t  ]\n\t\t\t\t\t\t: [])\n\t\t\t\t]),\n\t\t\t\t\"}\",\n\t\t\t\t\"return policy;\"\n\t\t\t])};`\n\t\t]);\n\t}\n}\n\nmodule.exports = GetTrustedTypesPolicyRuntimeModule;\n"]},"metadata":{},"sourceType":"script"}