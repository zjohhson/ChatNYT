{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst SAFE_IDENTIFIER = /^[_a-zA-Z$][_a-zA-Z$0-9]*$/;\nconst RESERVED_IDENTIFIER = new Set([\"break\", \"case\", \"catch\", \"class\", \"const\", \"continue\", \"debugger\", \"default\", \"delete\", \"do\", \"else\", \"export\", \"extends\", \"finally\", \"for\", \"function\", \"if\", \"import\", \"in\", \"instanceof\", \"new\", \"return\", \"super\", \"switch\", \"this\", \"throw\", \"try\", \"typeof\", \"var\", \"void\", \"while\", \"with\", \"enum\", // strict mode\n\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"yield\", // module code\n\"await\", // skip future reserved keywords defined under ES1 till ES3\n// additional\n\"null\", \"true\", \"false\"]);\n/**\n * @summary Returns a valid JS property name for the given property.\n * Certain strings like \"default\", \"null\", and names with whitespace are not\n * valid JS property names, so they are returned as strings.\n *\n * @param {string} prop property name to analyze\n * @returns {string} valid JS property name\n */\n\nconst propertyName = prop => {\n  if (SAFE_IDENTIFIER.test(prop) && !RESERVED_IDENTIFIER.has(prop)) {\n    return prop;\n  } else {\n    return JSON.stringify(prop);\n  }\n};\n\nmodule.exports = {\n  SAFE_IDENTIFIER,\n  RESERVED_IDENTIFIER,\n  propertyName\n};","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/util/propertyName.js"],"names":["SAFE_IDENTIFIER","RESERVED_IDENTIFIER","Set","propertyName","prop","test","has","JSON","stringify","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,eAAe,GAAG,4BAAxB;AACA,MAAMC,mBAAmB,GAAG,IAAIC,GAAJ,CAAQ,CACnC,OADmC,EAEnC,MAFmC,EAGnC,OAHmC,EAInC,OAJmC,EAKnC,OALmC,EAMnC,UANmC,EAOnC,UAPmC,EAQnC,SARmC,EASnC,QATmC,EAUnC,IAVmC,EAWnC,MAXmC,EAYnC,QAZmC,EAanC,SAbmC,EAcnC,SAdmC,EAenC,KAfmC,EAgBnC,UAhBmC,EAiBnC,IAjBmC,EAkBnC,QAlBmC,EAmBnC,IAnBmC,EAoBnC,YApBmC,EAqBnC,KArBmC,EAsBnC,QAtBmC,EAuBnC,OAvBmC,EAwBnC,QAxBmC,EAyBnC,MAzBmC,EA0BnC,OA1BmC,EA2BnC,KA3BmC,EA4BnC,QA5BmC,EA6BnC,KA7BmC,EA8BnC,MA9BmC,EA+BnC,OA/BmC,EAgCnC,MAhCmC,EAiCnC,MAjCmC,EAkCnC;AACA,YAnCmC,EAoCnC,WApCmC,EAqCnC,KArCmC,EAsCnC,SAtCmC,EAuCnC,SAvCmC,EAwCnC,WAxCmC,EAyCnC,QAzCmC,EA0CnC,QA1CmC,EA2CnC,OA3CmC,EA4CnC,OA5CmC,EA6CnC;AACA,OA9CmC,EA+CnC;AACA;AACA,MAjDmC,EAkDnC,MAlDmC,EAmDnC,OAnDmC,CAAR,CAA5B;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAGC,IAAI,IAAI;AAC5B,MAAIJ,eAAe,CAACK,IAAhB,CAAqBD,IAArB,KAA8B,CAACH,mBAAmB,CAACK,GAApB,CAAwBF,IAAxB,CAAnC,EAAkE;AACjE,WAAOA,IAAP;AACA,GAFD,MAEO;AACN,WAAOG,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAP;AACA;AACD,CAND;;AAQAK,MAAM,CAACC,OAAP,GAAiB;AAAEV,EAAAA,eAAF;AAAmBC,EAAAA,mBAAnB;AAAwCE,EAAAA;AAAxC,CAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst SAFE_IDENTIFIER = /^[_a-zA-Z$][_a-zA-Z$0-9]*$/;\nconst RESERVED_IDENTIFIER = new Set([\n\t\"break\",\n\t\"case\",\n\t\"catch\",\n\t\"class\",\n\t\"const\",\n\t\"continue\",\n\t\"debugger\",\n\t\"default\",\n\t\"delete\",\n\t\"do\",\n\t\"else\",\n\t\"export\",\n\t\"extends\",\n\t\"finally\",\n\t\"for\",\n\t\"function\",\n\t\"if\",\n\t\"import\",\n\t\"in\",\n\t\"instanceof\",\n\t\"new\",\n\t\"return\",\n\t\"super\",\n\t\"switch\",\n\t\"this\",\n\t\"throw\",\n\t\"try\",\n\t\"typeof\",\n\t\"var\",\n\t\"void\",\n\t\"while\",\n\t\"with\",\n\t\"enum\",\n\t// strict mode\n\t\"implements\",\n\t\"interface\",\n\t\"let\",\n\t\"package\",\n\t\"private\",\n\t\"protected\",\n\t\"public\",\n\t\"static\",\n\t\"yield\",\n\t\"yield\",\n\t// module code\n\t\"await\",\n\t// skip future reserved keywords defined under ES1 till ES3\n\t// additional\n\t\"null\",\n\t\"true\",\n\t\"false\"\n]);\n\n/**\n * @summary Returns a valid JS property name for the given property.\n * Certain strings like \"default\", \"null\", and names with whitespace are not\n * valid JS property names, so they are returned as strings.\n *\n * @param {string} prop property name to analyze\n * @returns {string} valid JS property name\n */\nconst propertyName = prop => {\n\tif (SAFE_IDENTIFIER.test(prop) && !RESERVED_IDENTIFIER.has(prop)) {\n\t\treturn prop;\n\t} else {\n\t\treturn JSON.stringify(prop);\n\t}\n};\n\nmodule.exports = { SAFE_IDENTIFIER, RESERVED_IDENTIFIER, propertyName };\n"]},"metadata":{},"sourceType":"script"}