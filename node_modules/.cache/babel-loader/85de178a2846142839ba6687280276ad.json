{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  join,\n  dirname,\n  readJson\n} = require(\"../util/fs\");\n/** @typedef {import(\"../util/fs\").InputFileSystem} InputFileSystem */\n// Extreme shorthand only for github. eg: foo/bar\n\n\nconst RE_URL_GITHUB_EXTREME_SHORT = /^[^/@:.\\s][^/@:\\s]*\\/[^@:\\s]*[^/@:\\s]#\\S+/; // Short url with specific protocol. eg: github:foo/bar\n\nconst RE_GIT_URL_SHORT = /^(github|gitlab|bitbucket|gist):\\/?[^/.]+\\/?/i; // Currently supported protocols\n\nconst RE_PROTOCOL = /^((git\\+)?(ssh|https?|file)|git|github|gitlab|bitbucket|gist):$/i; // Has custom protocol\n\nconst RE_CUSTOM_PROTOCOL = /^((git\\+)?(ssh|https?|file)|git):\\/\\//i; // Valid hash format for npm / yarn ...\n\nconst RE_URL_HASH_VERSION = /#(?:semver:)?(.+)/; // Simple hostname validate\n\nconst RE_HOSTNAME = /^(?:[^/.]+(\\.[^/]+)+|localhost)$/; // For hostname with colon. eg: ssh://user@github.com:foo/bar\n\nconst RE_HOSTNAME_WITH_COLON = /([^/@#:.]+(?:\\.[^/@#:.]+)+|localhost):([^#/0-9]+)/; // Reg for url without protocol\n\nconst RE_NO_PROTOCOL = /^([^/@#:.]+(?:\\.[^/@#:.]+)+)/; // RegExp for version string\n\nconst VERSION_PATTERN_REGEXP = /^([\\d^=v<>~]|[*xX]$)/; // Specific protocol for short url without normal hostname\n\nconst PROTOCOLS_FOR_SHORT = [\"github:\", \"gitlab:\", \"bitbucket:\", \"gist:\", \"file:\"]; // Default protocol for git url\n\nconst DEF_GIT_PROTOCOL = \"git+ssh://\"; // thanks to https://github.com/npm/hosted-git-info/blob/latest/git-host-info.js\n\nconst extractCommithashByDomain = {\n  /**\n   * @param {string} pathname pathname\n   * @param {string} hash hash\n   * @returns {string | undefined} hash\n   */\n  \"github.com\": (pathname, hash) => {\n    let [, user, project, type, commithash] = pathname.split(\"/\", 5);\n\n    if (type && type !== \"tree\") {\n      return;\n    }\n\n    if (!type) {\n      commithash = hash;\n    } else {\n      commithash = \"#\" + commithash;\n    }\n\n    if (project && project.endsWith(\".git\")) {\n      project = project.slice(0, -4);\n    }\n\n    if (!user || !project) {\n      return;\n    }\n\n    return commithash;\n  },\n\n  /**\n   * @param {string} pathname pathname\n   * @param {string} hash hash\n   * @returns {string | undefined} hash\n   */\n  \"gitlab.com\": (pathname, hash) => {\n    const path = pathname.slice(1);\n\n    if (path.includes(\"/-/\") || path.includes(\"/archive.tar.gz\")) {\n      return;\n    }\n\n    const segments = path.split(\"/\");\n    let project =\n    /** @type {string} */\n    segments.pop();\n\n    if (project.endsWith(\".git\")) {\n      project = project.slice(0, -4);\n    }\n\n    const user = segments.join(\"/\");\n\n    if (!user || !project) {\n      return;\n    }\n\n    return hash;\n  },\n\n  /**\n   * @param {string} pathname pathname\n   * @param {string} hash hash\n   * @returns {string | undefined} hash\n   */\n  \"bitbucket.org\": (pathname, hash) => {\n    let [, user, project, aux] = pathname.split(\"/\", 4);\n\n    if ([\"get\"].includes(aux)) {\n      return;\n    }\n\n    if (project && project.endsWith(\".git\")) {\n      project = project.slice(0, -4);\n    }\n\n    if (!user || !project) {\n      return;\n    }\n\n    return hash;\n  },\n\n  /**\n   * @param {string} pathname pathname\n   * @param {string} hash hash\n   * @returns {string | undefined} hash\n   */\n  \"gist.github.com\": (pathname, hash) => {\n    let [, user, project, aux] = pathname.split(\"/\", 4);\n\n    if (aux === \"raw\") {\n      return;\n    }\n\n    if (!project) {\n      if (!user) {\n        return;\n      }\n\n      project = user;\n    }\n\n    if (project.endsWith(\".git\")) {\n      project = project.slice(0, -4);\n    }\n\n    return hash;\n  }\n};\n/**\n * extract commit hash from parsed url\n *\n * @inner\n * @param {URL} urlParsed parsed url\n * @returns {string} commithash\n */\n\nfunction getCommithash(urlParsed) {\n  let {\n    hostname,\n    pathname,\n    hash\n  } = urlParsed;\n  hostname = hostname.replace(/^www\\./, \"\");\n\n  try {\n    hash = decodeURIComponent(hash); // eslint-disable-next-line no-empty\n  } catch (e) {}\n\n  if (extractCommithashByDomain[\n  /** @type {keyof extractCommithashByDomain} */\n  hostname]) {\n    return extractCommithashByDomain[\n    /** @type {keyof extractCommithashByDomain} */\n    hostname](pathname, hash) || \"\";\n  }\n\n  return hash;\n}\n/**\n * make url right for URL parse\n *\n * @inner\n * @param {string} gitUrl git url\n * @returns {string} fixed url\n */\n\n\nfunction correctUrl(gitUrl) {\n  // like:\n  // proto://hostname.com:user/repo -> proto://hostname.com/user/repo\n  return gitUrl.replace(RE_HOSTNAME_WITH_COLON, \"$1/$2\");\n}\n/**\n * make url protocol right for URL parse\n *\n * @inner\n * @param {string} gitUrl git url\n * @returns {string} fixed url\n */\n\n\nfunction correctProtocol(gitUrl) {\n  // eg: github:foo/bar#v1.0. Should not add double slash, in case of error parsed `pathname`\n  if (RE_GIT_URL_SHORT.test(gitUrl)) {\n    return gitUrl;\n  } // eg: user@github.com:foo/bar\n\n\n  if (!RE_CUSTOM_PROTOCOL.test(gitUrl)) {\n    return `${DEF_GIT_PROTOCOL}${gitUrl}`;\n  }\n\n  return gitUrl;\n}\n/**\n * extract git dep version from hash\n *\n * @inner\n * @param {string} hash hash\n * @returns {string} git dep version\n */\n\n\nfunction getVersionFromHash(hash) {\n  const matched = hash.match(RE_URL_HASH_VERSION);\n  return matched && matched[1] || \"\";\n}\n/**\n * if string can be decoded\n *\n * @inner\n * @param {string} str str to be checked\n * @returns {boolean} if can be decoded\n */\n\n\nfunction canBeDecoded(str) {\n  try {\n    decodeURIComponent(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * get right dep version from git url\n *\n * @inner\n * @param {string} gitUrl git url\n * @returns {string} dep version\n */\n\n\nfunction getGitUrlVersion(gitUrl) {\n  let oriGitUrl = gitUrl; // github extreme shorthand\n\n  if (RE_URL_GITHUB_EXTREME_SHORT.test(gitUrl)) {\n    gitUrl = \"github:\" + gitUrl;\n  } else {\n    gitUrl = correctProtocol(gitUrl);\n  }\n\n  gitUrl = correctUrl(gitUrl);\n  let parsed;\n\n  try {\n    parsed = new URL(gitUrl); // eslint-disable-next-line no-empty\n  } catch (e) {}\n\n  if (!parsed) {\n    return \"\";\n  }\n\n  const {\n    protocol,\n    hostname,\n    pathname,\n    username,\n    password\n  } = parsed;\n\n  if (!RE_PROTOCOL.test(protocol)) {\n    return \"\";\n  } // pathname shouldn't be empty or URL malformed\n\n\n  if (!pathname || !canBeDecoded(pathname)) {\n    return \"\";\n  } // without protocol, there should have auth info\n\n\n  if (RE_NO_PROTOCOL.test(oriGitUrl) && !username && !password) {\n    return \"\";\n  }\n\n  if (!PROTOCOLS_FOR_SHORT.includes(protocol.toLowerCase())) {\n    if (!RE_HOSTNAME.test(hostname)) {\n      return \"\";\n    }\n\n    const commithash = getCommithash(parsed);\n    return getVersionFromHash(commithash) || commithash;\n  } // for protocol short\n\n\n  return getVersionFromHash(gitUrl);\n}\n/**\n * @param {string} str maybe required version\n * @returns {boolean} true, if it looks like a version\n */\n\n\nfunction isRequiredVersion(str) {\n  return VERSION_PATTERN_REGEXP.test(str);\n}\n\nexports.isRequiredVersion = isRequiredVersion;\n/**\n * @see https://docs.npmjs.com/cli/v7/configuring-npm/package-json#urls-as-dependencies\n * @param {string} versionDesc version to be normalized\n * @returns {string} normalized version\n */\n\nfunction normalizeVersion(versionDesc) {\n  versionDesc = versionDesc && versionDesc.trim() || \"\";\n\n  if (isRequiredVersion(versionDesc)) {\n    return versionDesc;\n  } // add handle for URL Dependencies\n\n\n  return getGitUrlVersion(versionDesc.toLowerCase());\n}\n\nexports.normalizeVersion = normalizeVersion;\n/**\n *\n * @param {InputFileSystem} fs file system\n * @param {string} directory directory to start looking into\n * @param {string[]} descriptionFiles possible description filenames\n * @param {function((Error | null)=, {data: object, path: string}=): void} callback callback\n */\n\nconst getDescriptionFile = (fs, directory, descriptionFiles, callback) => {\n  let i = 0;\n\n  const tryLoadCurrent = () => {\n    if (i >= descriptionFiles.length) {\n      const parentDirectory = dirname(fs, directory);\n      if (!parentDirectory || parentDirectory === directory) return callback();\n      return getDescriptionFile(fs, parentDirectory, descriptionFiles, callback);\n    }\n\n    const filePath = join(fs, directory, descriptionFiles[i]);\n    readJson(fs, filePath, (err, data) => {\n      if (err) {\n        if (\"code\" in err && err.code === \"ENOENT\") {\n          i++;\n          return tryLoadCurrent();\n        }\n\n        return callback(err);\n      }\n\n      if (!data || typeof data !== \"object\" || Array.isArray(data)) {\n        return callback(new Error(`Description file ${filePath} is not an object`));\n      }\n\n      callback(null, {\n        data,\n        path: filePath\n      });\n    });\n  };\n\n  tryLoadCurrent();\n};\n\nexports.getDescriptionFile = getDescriptionFile;\n\nexports.getRequiredVersionFromDescriptionFile = (data, packageName) => {\n  if (data.optionalDependencies && typeof data.optionalDependencies === \"object\" && packageName in data.optionalDependencies) {\n    return normalizeVersion(data.optionalDependencies[packageName]);\n  }\n\n  if (data.dependencies && typeof data.dependencies === \"object\" && packageName in data.dependencies) {\n    return normalizeVersion(data.dependencies[packageName]);\n  }\n\n  if (data.peerDependencies && typeof data.peerDependencies === \"object\" && packageName in data.peerDependencies) {\n    return normalizeVersion(data.peerDependencies[packageName]);\n  }\n\n  if (data.devDependencies && typeof data.devDependencies === \"object\" && packageName in data.devDependencies) {\n    return normalizeVersion(data.devDependencies[packageName]);\n  }\n};","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/sharing/utils.js"],"names":["join","dirname","readJson","require","RE_URL_GITHUB_EXTREME_SHORT","RE_GIT_URL_SHORT","RE_PROTOCOL","RE_CUSTOM_PROTOCOL","RE_URL_HASH_VERSION","RE_HOSTNAME","RE_HOSTNAME_WITH_COLON","RE_NO_PROTOCOL","VERSION_PATTERN_REGEXP","PROTOCOLS_FOR_SHORT","DEF_GIT_PROTOCOL","extractCommithashByDomain","pathname","hash","user","project","type","commithash","split","endsWith","slice","path","includes","segments","pop","aux","getCommithash","urlParsed","hostname","replace","decodeURIComponent","e","correctUrl","gitUrl","correctProtocol","test","getVersionFromHash","matched","match","canBeDecoded","str","getGitUrlVersion","oriGitUrl","parsed","URL","protocol","username","password","toLowerCase","isRequiredVersion","exports","normalizeVersion","versionDesc","trim","getDescriptionFile","fs","directory","descriptionFiles","callback","i","tryLoadCurrent","length","parentDirectory","filePath","err","data","code","Array","isArray","Error","getRequiredVersionFromDescriptionFile","packageName","optionalDependencies","dependencies","peerDependencies","devDependencies"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { join, dirname, readJson } = require(\"../util/fs\");\n\n/** @typedef {import(\"../util/fs\").InputFileSystem} InputFileSystem */\n\n// Extreme shorthand only for github. eg: foo/bar\nconst RE_URL_GITHUB_EXTREME_SHORT = /^[^/@:.\\s][^/@:\\s]*\\/[^@:\\s]*[^/@:\\s]#\\S+/;\n\n// Short url with specific protocol. eg: github:foo/bar\nconst RE_GIT_URL_SHORT = /^(github|gitlab|bitbucket|gist):\\/?[^/.]+\\/?/i;\n\n// Currently supported protocols\nconst RE_PROTOCOL =\n\t/^((git\\+)?(ssh|https?|file)|git|github|gitlab|bitbucket|gist):$/i;\n\n// Has custom protocol\nconst RE_CUSTOM_PROTOCOL = /^((git\\+)?(ssh|https?|file)|git):\\/\\//i;\n\n// Valid hash format for npm / yarn ...\nconst RE_URL_HASH_VERSION = /#(?:semver:)?(.+)/;\n\n// Simple hostname validate\nconst RE_HOSTNAME = /^(?:[^/.]+(\\.[^/]+)+|localhost)$/;\n\n// For hostname with colon. eg: ssh://user@github.com:foo/bar\nconst RE_HOSTNAME_WITH_COLON =\n\t/([^/@#:.]+(?:\\.[^/@#:.]+)+|localhost):([^#/0-9]+)/;\n\n// Reg for url without protocol\nconst RE_NO_PROTOCOL = /^([^/@#:.]+(?:\\.[^/@#:.]+)+)/;\n\n// RegExp for version string\nconst VERSION_PATTERN_REGEXP = /^([\\d^=v<>~]|[*xX]$)/;\n\n// Specific protocol for short url without normal hostname\nconst PROTOCOLS_FOR_SHORT = [\n\t\"github:\",\n\t\"gitlab:\",\n\t\"bitbucket:\",\n\t\"gist:\",\n\t\"file:\"\n];\n\n// Default protocol for git url\nconst DEF_GIT_PROTOCOL = \"git+ssh://\";\n\n// thanks to https://github.com/npm/hosted-git-info/blob/latest/git-host-info.js\nconst extractCommithashByDomain = {\n\t/**\n\t * @param {string} pathname pathname\n\t * @param {string} hash hash\n\t * @returns {string | undefined} hash\n\t */\n\t\"github.com\": (pathname, hash) => {\n\t\tlet [, user, project, type, commithash] = pathname.split(\"/\", 5);\n\t\tif (type && type !== \"tree\") {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!type) {\n\t\t\tcommithash = hash;\n\t\t} else {\n\t\t\tcommithash = \"#\" + commithash;\n\t\t}\n\n\t\tif (project && project.endsWith(\".git\")) {\n\t\t\tproject = project.slice(0, -4);\n\t\t}\n\n\t\tif (!user || !project) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn commithash;\n\t},\n\t/**\n\t * @param {string} pathname pathname\n\t * @param {string} hash hash\n\t * @returns {string | undefined} hash\n\t */\n\t\"gitlab.com\": (pathname, hash) => {\n\t\tconst path = pathname.slice(1);\n\t\tif (path.includes(\"/-/\") || path.includes(\"/archive.tar.gz\")) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst segments = path.split(\"/\");\n\t\tlet project = /** @type {string} */ (segments.pop());\n\t\tif (project.endsWith(\".git\")) {\n\t\t\tproject = project.slice(0, -4);\n\t\t}\n\n\t\tconst user = segments.join(\"/\");\n\t\tif (!user || !project) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn hash;\n\t},\n\t/**\n\t * @param {string} pathname pathname\n\t * @param {string} hash hash\n\t * @returns {string | undefined} hash\n\t */\n\t\"bitbucket.org\": (pathname, hash) => {\n\t\tlet [, user, project, aux] = pathname.split(\"/\", 4);\n\t\tif ([\"get\"].includes(aux)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (project && project.endsWith(\".git\")) {\n\t\t\tproject = project.slice(0, -4);\n\t\t}\n\n\t\tif (!user || !project) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn hash;\n\t},\n\t/**\n\t * @param {string} pathname pathname\n\t * @param {string} hash hash\n\t * @returns {string | undefined} hash\n\t */\n\t\"gist.github.com\": (pathname, hash) => {\n\t\tlet [, user, project, aux] = pathname.split(\"/\", 4);\n\t\tif (aux === \"raw\") {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!project) {\n\t\t\tif (!user) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tproject = user;\n\t\t}\n\n\t\tif (project.endsWith(\".git\")) {\n\t\t\tproject = project.slice(0, -4);\n\t\t}\n\n\t\treturn hash;\n\t}\n};\n\n/**\n * extract commit hash from parsed url\n *\n * @inner\n * @param {URL} urlParsed parsed url\n * @returns {string} commithash\n */\nfunction getCommithash(urlParsed) {\n\tlet { hostname, pathname, hash } = urlParsed;\n\thostname = hostname.replace(/^www\\./, \"\");\n\n\ttry {\n\t\thash = decodeURIComponent(hash);\n\t\t// eslint-disable-next-line no-empty\n\t} catch (e) {}\n\n\tif (\n\t\textractCommithashByDomain[\n\t\t\t/** @type {keyof extractCommithashByDomain} */ (hostname)\n\t\t]\n\t) {\n\t\treturn (\n\t\t\textractCommithashByDomain[\n\t\t\t\t/** @type {keyof extractCommithashByDomain} */ (hostname)\n\t\t\t](pathname, hash) || \"\"\n\t\t);\n\t}\n\n\treturn hash;\n}\n\n/**\n * make url right for URL parse\n *\n * @inner\n * @param {string} gitUrl git url\n * @returns {string} fixed url\n */\nfunction correctUrl(gitUrl) {\n\t// like:\n\t// proto://hostname.com:user/repo -> proto://hostname.com/user/repo\n\treturn gitUrl.replace(RE_HOSTNAME_WITH_COLON, \"$1/$2\");\n}\n\n/**\n * make url protocol right for URL parse\n *\n * @inner\n * @param {string} gitUrl git url\n * @returns {string} fixed url\n */\nfunction correctProtocol(gitUrl) {\n\t// eg: github:foo/bar#v1.0. Should not add double slash, in case of error parsed `pathname`\n\tif (RE_GIT_URL_SHORT.test(gitUrl)) {\n\t\treturn gitUrl;\n\t}\n\n\t// eg: user@github.com:foo/bar\n\tif (!RE_CUSTOM_PROTOCOL.test(gitUrl)) {\n\t\treturn `${DEF_GIT_PROTOCOL}${gitUrl}`;\n\t}\n\n\treturn gitUrl;\n}\n\n/**\n * extract git dep version from hash\n *\n * @inner\n * @param {string} hash hash\n * @returns {string} git dep version\n */\nfunction getVersionFromHash(hash) {\n\tconst matched = hash.match(RE_URL_HASH_VERSION);\n\n\treturn (matched && matched[1]) || \"\";\n}\n\n/**\n * if string can be decoded\n *\n * @inner\n * @param {string} str str to be checked\n * @returns {boolean} if can be decoded\n */\nfunction canBeDecoded(str) {\n\ttry {\n\t\tdecodeURIComponent(str);\n\t} catch (e) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * get right dep version from git url\n *\n * @inner\n * @param {string} gitUrl git url\n * @returns {string} dep version\n */\nfunction getGitUrlVersion(gitUrl) {\n\tlet oriGitUrl = gitUrl;\n\t// github extreme shorthand\n\tif (RE_URL_GITHUB_EXTREME_SHORT.test(gitUrl)) {\n\t\tgitUrl = \"github:\" + gitUrl;\n\t} else {\n\t\tgitUrl = correctProtocol(gitUrl);\n\t}\n\n\tgitUrl = correctUrl(gitUrl);\n\n\tlet parsed;\n\ttry {\n\t\tparsed = new URL(gitUrl);\n\t\t// eslint-disable-next-line no-empty\n\t} catch (e) {}\n\n\tif (!parsed) {\n\t\treturn \"\";\n\t}\n\n\tconst { protocol, hostname, pathname, username, password } = parsed;\n\tif (!RE_PROTOCOL.test(protocol)) {\n\t\treturn \"\";\n\t}\n\n\t// pathname shouldn't be empty or URL malformed\n\tif (!pathname || !canBeDecoded(pathname)) {\n\t\treturn \"\";\n\t}\n\n\t// without protocol, there should have auth info\n\tif (RE_NO_PROTOCOL.test(oriGitUrl) && !username && !password) {\n\t\treturn \"\";\n\t}\n\n\tif (!PROTOCOLS_FOR_SHORT.includes(protocol.toLowerCase())) {\n\t\tif (!RE_HOSTNAME.test(hostname)) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tconst commithash = getCommithash(parsed);\n\t\treturn getVersionFromHash(commithash) || commithash;\n\t}\n\n\t// for protocol short\n\treturn getVersionFromHash(gitUrl);\n}\n\n/**\n * @param {string} str maybe required version\n * @returns {boolean} true, if it looks like a version\n */\nfunction isRequiredVersion(str) {\n\treturn VERSION_PATTERN_REGEXP.test(str);\n}\n\nexports.isRequiredVersion = isRequiredVersion;\n\n/**\n * @see https://docs.npmjs.com/cli/v7/configuring-npm/package-json#urls-as-dependencies\n * @param {string} versionDesc version to be normalized\n * @returns {string} normalized version\n */\nfunction normalizeVersion(versionDesc) {\n\tversionDesc = (versionDesc && versionDesc.trim()) || \"\";\n\n\tif (isRequiredVersion(versionDesc)) {\n\t\treturn versionDesc;\n\t}\n\n\t// add handle for URL Dependencies\n\treturn getGitUrlVersion(versionDesc.toLowerCase());\n}\n\nexports.normalizeVersion = normalizeVersion;\n\n/**\n *\n * @param {InputFileSystem} fs file system\n * @param {string} directory directory to start looking into\n * @param {string[]} descriptionFiles possible description filenames\n * @param {function((Error | null)=, {data: object, path: string}=): void} callback callback\n */\nconst getDescriptionFile = (fs, directory, descriptionFiles, callback) => {\n\tlet i = 0;\n\tconst tryLoadCurrent = () => {\n\t\tif (i >= descriptionFiles.length) {\n\t\t\tconst parentDirectory = dirname(fs, directory);\n\t\t\tif (!parentDirectory || parentDirectory === directory) return callback();\n\t\t\treturn getDescriptionFile(\n\t\t\t\tfs,\n\t\t\t\tparentDirectory,\n\t\t\t\tdescriptionFiles,\n\t\t\t\tcallback\n\t\t\t);\n\t\t}\n\t\tconst filePath = join(fs, directory, descriptionFiles[i]);\n\t\treadJson(fs, filePath, (err, data) => {\n\t\t\tif (err) {\n\t\t\t\tif (\"code\" in err && err.code === \"ENOENT\") {\n\t\t\t\t\ti++;\n\t\t\t\t\treturn tryLoadCurrent();\n\t\t\t\t}\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t\tif (!data || typeof data !== \"object\" || Array.isArray(data)) {\n\t\t\t\treturn callback(\n\t\t\t\t\tnew Error(`Description file ${filePath} is not an object`)\n\t\t\t\t);\n\t\t\t}\n\t\t\tcallback(null, { data, path: filePath });\n\t\t});\n\t};\n\ttryLoadCurrent();\n};\nexports.getDescriptionFile = getDescriptionFile;\n\nexports.getRequiredVersionFromDescriptionFile = (data, packageName) => {\n\tif (\n\t\tdata.optionalDependencies &&\n\t\ttypeof data.optionalDependencies === \"object\" &&\n\t\tpackageName in data.optionalDependencies\n\t) {\n\t\treturn normalizeVersion(data.optionalDependencies[packageName]);\n\t}\n\tif (\n\t\tdata.dependencies &&\n\t\ttypeof data.dependencies === \"object\" &&\n\t\tpackageName in data.dependencies\n\t) {\n\t\treturn normalizeVersion(data.dependencies[packageName]);\n\t}\n\tif (\n\t\tdata.peerDependencies &&\n\t\ttypeof data.peerDependencies === \"object\" &&\n\t\tpackageName in data.peerDependencies\n\t) {\n\t\treturn normalizeVersion(data.peerDependencies[packageName]);\n\t}\n\tif (\n\t\tdata.devDependencies &&\n\t\ttypeof data.devDependencies === \"object\" &&\n\t\tpackageName in data.devDependencies\n\t) {\n\t\treturn normalizeVersion(data.devDependencies[packageName]);\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}