{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\n\nconst {\n  WEBASSEMBLY_MODULE_TYPE_SYNC\n} = require(\"../ModuleTypeConstants\");\n\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\nconst {\n  compareModulesByIdentifier\n} = require(\"../util/comparators\");\n\nconst memoize = require(\"../util/memoize\");\n\nconst WebAssemblyInInitialChunkError = require(\"./WebAssemblyInInitialChunkError\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").OutputNormalized} OutputOptions */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {import(\"../ModuleTemplate\")} ModuleTemplate */\n\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n\n\nconst getWebAssemblyGenerator = memoize(() => require(\"./WebAssemblyGenerator\"));\nconst getWebAssemblyJavascriptGenerator = memoize(() => require(\"./WebAssemblyJavascriptGenerator\"));\nconst getWebAssemblyParser = memoize(() => require(\"./WebAssemblyParser\"));\nconst PLUGIN_NAME = \"WebAssemblyModulesPlugin\";\n/**\n * @typedef {Object} WebAssemblyModulesPluginOptions\n * @property {boolean} [mangleImports] mangle imports\n */\n\nclass WebAssemblyModulesPlugin {\n  /**\n   * @param {WebAssemblyModulesPluginOptions} options options\n   */\n  constructor(options) {\n    this.options = options;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyFactories.set(WebAssemblyImportDependency, normalModuleFactory);\n      compilation.dependencyFactories.set(WebAssemblyExportImportedDependency, normalModuleFactory);\n      normalModuleFactory.hooks.createParser.for(WEBASSEMBLY_MODULE_TYPE_SYNC).tap(PLUGIN_NAME, () => {\n        const WebAssemblyParser = getWebAssemblyParser();\n        return new WebAssemblyParser();\n      });\n      normalModuleFactory.hooks.createGenerator.for(WEBASSEMBLY_MODULE_TYPE_SYNC).tap(PLUGIN_NAME, () => {\n        const WebAssemblyJavascriptGenerator = getWebAssemblyJavascriptGenerator();\n        const WebAssemblyGenerator = getWebAssemblyGenerator();\n        return Generator.byType({\n          javascript: new WebAssemblyJavascriptGenerator(),\n          webassembly: new WebAssemblyGenerator(this.options)\n        });\n      });\n      compilation.hooks.renderManifest.tap(PLUGIN_NAME, (result, options) => {\n        const {\n          chunkGraph\n        } = compilation;\n        const {\n          chunk,\n          outputOptions,\n          codeGenerationResults\n        } = options;\n\n        for (const module of chunkGraph.getOrderedChunkModulesIterable(chunk, compareModulesByIdentifier)) {\n          if (module.type === WEBASSEMBLY_MODULE_TYPE_SYNC) {\n            const filenameTemplate =\n            /** @type {NonNullable<OutputOptions[\"webassemblyModuleFilename\"]>} */\n            outputOptions.webassemblyModuleFilename;\n            result.push({\n              render: () => codeGenerationResults.getSource(module, chunk.runtime, \"webassembly\"),\n              filenameTemplate,\n              pathOptions: {\n                module,\n                runtime: chunk.runtime,\n                chunkGraph\n              },\n              auxiliary: true,\n              identifier: `webassemblyModule${chunkGraph.getModuleId(module)}`,\n              hash: chunkGraph.getModuleHash(module, chunk.runtime)\n            });\n          }\n        }\n\n        return result;\n      });\n      compilation.hooks.afterChunks.tap(PLUGIN_NAME, () => {\n        const chunkGraph = compilation.chunkGraph;\n        const initialWasmModules = new Set();\n\n        for (const chunk of compilation.chunks) {\n          if (chunk.canBeInitial()) {\n            for (const module of chunkGraph.getChunkModulesIterable(chunk)) {\n              if (module.type === WEBASSEMBLY_MODULE_TYPE_SYNC) {\n                initialWasmModules.add(module);\n              }\n            }\n          }\n        }\n\n        for (const module of initialWasmModules) {\n          compilation.errors.push(new WebAssemblyInInitialChunkError(module, compilation.moduleGraph, compilation.chunkGraph, compilation.requestShortener));\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = WebAssemblyModulesPlugin;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/wasm-sync/WebAssemblyModulesPlugin.js"],"names":["Generator","require","WEBASSEMBLY_MODULE_TYPE_SYNC","WebAssemblyExportImportedDependency","WebAssemblyImportDependency","compareModulesByIdentifier","memoize","WebAssemblyInInitialChunkError","getWebAssemblyGenerator","getWebAssemblyJavascriptGenerator","getWebAssemblyParser","PLUGIN_NAME","WebAssemblyModulesPlugin","constructor","options","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","createParser","for","WebAssemblyParser","createGenerator","WebAssemblyJavascriptGenerator","WebAssemblyGenerator","byType","javascript","webassembly","renderManifest","result","chunkGraph","chunk","outputOptions","codeGenerationResults","module","getOrderedChunkModulesIterable","type","filenameTemplate","webassemblyModuleFilename","push","render","getSource","runtime","pathOptions","auxiliary","identifier","getModuleId","hash","getModuleHash","afterChunks","initialWasmModules","Set","chunks","canBeInitial","getChunkModulesIterable","add","errors","moduleGraph","requestShortener","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\nconst { WEBASSEMBLY_MODULE_TYPE_SYNC } = require(\"../ModuleTypeConstants\");\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nconst { compareModulesByIdentifier } = require(\"../util/comparators\");\nconst memoize = require(\"../util/memoize\");\nconst WebAssemblyInInitialChunkError = require(\"./WebAssemblyInInitialChunkError\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").OutputNormalized} OutputOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleTemplate\")} ModuleTemplate */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n\nconst getWebAssemblyGenerator = memoize(() =>\n\trequire(\"./WebAssemblyGenerator\")\n);\nconst getWebAssemblyJavascriptGenerator = memoize(() =>\n\trequire(\"./WebAssemblyJavascriptGenerator\")\n);\nconst getWebAssemblyParser = memoize(() => require(\"./WebAssemblyParser\"));\n\nconst PLUGIN_NAME = \"WebAssemblyModulesPlugin\";\n\n/**\n * @typedef {Object} WebAssemblyModulesPluginOptions\n * @property {boolean} [mangleImports] mangle imports\n */\n\nclass WebAssemblyModulesPlugin {\n\t/**\n\t * @param {WebAssemblyModulesPluginOptions} options options\n\t */\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\tPLUGIN_NAME,\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tWebAssemblyImportDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tWebAssemblyExportImportedDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(WEBASSEMBLY_MODULE_TYPE_SYNC)\n\t\t\t\t\t.tap(PLUGIN_NAME, () => {\n\t\t\t\t\t\tconst WebAssemblyParser = getWebAssemblyParser();\n\n\t\t\t\t\t\treturn new WebAssemblyParser();\n\t\t\t\t\t});\n\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t.for(WEBASSEMBLY_MODULE_TYPE_SYNC)\n\t\t\t\t\t.tap(PLUGIN_NAME, () => {\n\t\t\t\t\t\tconst WebAssemblyJavascriptGenerator =\n\t\t\t\t\t\t\tgetWebAssemblyJavascriptGenerator();\n\t\t\t\t\t\tconst WebAssemblyGenerator = getWebAssemblyGenerator();\n\n\t\t\t\t\t\treturn Generator.byType({\n\t\t\t\t\t\t\tjavascript: new WebAssemblyJavascriptGenerator(),\n\t\t\t\t\t\t\twebassembly: new WebAssemblyGenerator(this.options)\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.renderManifest.tap(PLUGIN_NAME, (result, options) => {\n\t\t\t\t\tconst { chunkGraph } = compilation;\n\t\t\t\t\tconst { chunk, outputOptions, codeGenerationResults } = options;\n\n\t\t\t\t\tfor (const module of chunkGraph.getOrderedChunkModulesIterable(\n\t\t\t\t\t\tchunk,\n\t\t\t\t\t\tcompareModulesByIdentifier\n\t\t\t\t\t)) {\n\t\t\t\t\t\tif (module.type === WEBASSEMBLY_MODULE_TYPE_SYNC) {\n\t\t\t\t\t\t\tconst filenameTemplate =\n\t\t\t\t\t\t\t\t/** @type {NonNullable<OutputOptions[\"webassemblyModuleFilename\"]>} */\n\t\t\t\t\t\t\t\t(outputOptions.webassemblyModuleFilename);\n\n\t\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\t\trender: () =>\n\t\t\t\t\t\t\t\t\tcodeGenerationResults.getSource(\n\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\tchunk.runtime,\n\t\t\t\t\t\t\t\t\t\t\"webassembly\"\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tfilenameTemplate,\n\t\t\t\t\t\t\t\tpathOptions: {\n\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\truntime: chunk.runtime,\n\t\t\t\t\t\t\t\t\tchunkGraph\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tauxiliary: true,\n\t\t\t\t\t\t\t\tidentifier: `webassemblyModule${chunkGraph.getModuleId(\n\t\t\t\t\t\t\t\t\tmodule\n\t\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t\t\thash: chunkGraph.getModuleHash(module, chunk.runtime)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result;\n\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.afterChunks.tap(PLUGIN_NAME, () => {\n\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\tconst initialWasmModules = new Set();\n\t\t\t\t\tfor (const chunk of compilation.chunks) {\n\t\t\t\t\t\tif (chunk.canBeInitial()) {\n\t\t\t\t\t\t\tfor (const module of chunkGraph.getChunkModulesIterable(chunk)) {\n\t\t\t\t\t\t\t\tif (module.type === WEBASSEMBLY_MODULE_TYPE_SYNC) {\n\t\t\t\t\t\t\t\t\tinitialWasmModules.add(module);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const module of initialWasmModules) {\n\t\t\t\t\t\tcompilation.errors.push(\n\t\t\t\t\t\t\tnew WebAssemblyInInitialChunkError(\n\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\tcompilation.moduleGraph,\n\t\t\t\t\t\t\t\tcompilation.chunkGraph,\n\t\t\t\t\t\t\t\tcompilation.requestShortener\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = WebAssemblyModulesPlugin;\n"]},"metadata":{},"sourceType":"script"}