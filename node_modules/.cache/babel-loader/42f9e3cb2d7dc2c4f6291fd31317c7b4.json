{"ast":null,"code":"import t from \"../lib/scaleD.js\";\nimport e from \"../lib/LdrsBaseElement.js\";\nvar s = \":host{align-items:center;display:inline-flex;flex-shrink:0;height:calc(var(--uib-size)*.625);justify-content:center;width:var(--uib-size)}:host([hidden]){display:none}.container{height:calc(var(--uib-size)*.625);overflow:visible;transform-origin:center;width:var(--uib-size)}.car{stroke:var(--uib-color);stroke-dasharray:100;stroke-dashoffset:0;animation:travel var(--uib-speed) ease-in-out infinite,fade var(--uib-speed) ease-out infinite;transition:stroke .5s ease;will-change:stroke-dasharray,stroke-dashoffset}.car,.track{stroke-linecap:round;stroke-linejoin:round}.track{stroke:var(--uib-color);opacity:var(--uib-bg-opacity)}@keyframes travel{0%{stroke-dashoffset:100}75%{stroke-dashoffset:0}}@keyframes fade{0%{opacity:0}20%,55%{opacity:1}to{opacity:0}}\";\n\nclass i extends e {\n  _attributes = [\"size\", \"color\", \"speed\", \"stroke\", \"bg-opacity\"];\n  size;\n  color;\n  speed;\n  stroke;\n  \"bg-opacity\";\n  d;\n\n  static get observedAttributes() {\n    return [\"size\", \"color\", \"speed\", \"stroke\", \"bg-opacity\"];\n  }\n\n  constructor() {\n    super(), this.storePropsToUpgrade(this._attributes), this.reflect(this._attributes), this.d = \"M0.5,17.2h8.2l3-4.7l5.9,12l7.8-24l5.9,16.7v0h8.2\";\n  }\n\n  connectedCallback() {\n    this.upgradeStoredProps(), this.applyDefaultProps({\n      size: 50,\n      color: \"black\",\n      speed: 1.5,\n      stroke: 4,\n      \"bg-opacity\": .1\n    });\n    const e = parseInt(this.size),\n          i = t(e / 40, this.d);\n    this.template.innerHTML = `\\n      <svg\\n        class=\"container\" \\n        x=\"0px\" \\n        y=\"0px\"\\n        viewBox=\"0 0 ${this.size} ${.625 * e}\"\\n        height=\"${.625 * e}\"\\n        width=\"${this.size}\"\\n        preserveAspectRatio='xMidYMid meet'\\n      >\\n        <path \\n          class=\"track\"\\n          stroke-width=\"${this.stroke}\" \\n          fill=\"none\" \\n          pathlength=\"100\"\\n          d=\"${i}\"\\n        />\\n        <path \\n          class=\"car\"\\n          stroke-width=\"${this.stroke}\" \\n          fill=\"none\" \\n          pathlength=\"100\"\\n          d=\"${i}\"\\n        />\\n      </svg>\\n      <style>\\n        :host{\\n          --uib-size: ${this.size}px;\\n          --uib-color: ${this.color};\\n          --uib-speed: ${this.speed}s;\\n          --uib-bg-opacity: ${this[\"bg-opacity\"]};\\n        }\\n        ${s}\\n      </style>\\n    `, this.shadow.replaceChildren(this.template.content.cloneNode(!0));\n  }\n\n  attributeChangedCallback() {\n    const e = parseInt(this.size),\n          i = this.shadow.querySelector(\"style\"),\n          r = this.shadow.querySelector(\"svg\"),\n          o = this.shadow.querySelectorAll(\"path\");\n    i && (r.setAttribute(\"height\", String(.625 * e)), r.setAttribute(\"width\", this.size), r.setAttribute(\"viewBox\", `0 0 ${this.size} ${.625 * e}`), o.forEach(s => {\n      s.setAttribute(\"stroke-width\", this.stroke), s.setAttribute(\"d\", t(e / 40, this.d));\n    }), i.innerHTML = `\\n      :host{\\n        --uib-size: ${this.size}px;\\n        --uib-color: ${this.color};\\n        --uib-speed: ${this.speed}s;\\n        --uib-bg-opacity: ${this[\"bg-opacity\"]};\\n      }\\n      ${s}\\n    `);\n  }\n\n}\n\nvar r = {\n  register: function () {\n    let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"l-cardio\";\n    customElements.get(t) || customElements.define(t, class extends i {});\n  },\n  element: i\n};\nexport { r as default };","map":{"version":3,"mappings":";;;;AAGA,MAAMA,CAAN,SAAqBC,CAArB,CAAqBA;AACjBC,gBAAc,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,EAA2B,QAA3B,EAAqC,YAArC,CAAdA;AACAC;AACAC;AACAC;AACAC;AACA;AACAC;;AACWC;AACP,WAAO,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,EAA2B,QAA3B,EAAqC,YAArC,CAAP;AAEJC;;AAAAA;AACIC,aACAC,KAAKC,mBAALD,CAAyBA,KAAKT,WAA9BS,CADAD,EAEAC,KAAKE,OAALF,CAAaA,KAAKT,WAAlBS,CAFAD,EAGAC,KAAKJ,CAALI,GAAS,kDAHTD;AAKJI;;AAAAA;AACIH,SAAKI,kBAALJ,IACAA,KAAKK,iBAALL,CAAuB;AACnBR,YAAM,EADa;AAEnBC,aAAO,OAFY;AAGnBC,aAAO,GAHY;AAInBC,cAAQ,CAJW;AAKnB,oBAAc;AALK,KAAvBK,CADAA;AAQA,UAAMM,IAAUC,SAASP,KAAKR,IAAde,CAAhB;AAAA,UACMC,IAAUC,EAAOH,IAAU,EAAjBG,EAAqBT,KAAKJ,CAA1Ba,CADhB;AAEAT,SAAKU,QAALV,CAAcW,SAAdX,GAA0B,qGAKXA,KAAKR,QAAmB,OAAXc,uBACX,OAAPA,sBACDN,KAAKR,iIAKIQ,KAAKL,8EAGhBa,kFAIWR,KAAKL,8EAGhBa,sFAKSR,KAAKR,mCACJQ,KAAKP,kCACLO,KAAKN,wCACAM,KAAK,YAALA,CAAK,yBAEzBY,yBAhCFZ,EAmCAA,KAAKa,MAALb,CAAYc,eAAZd,CAA4BA,KAAKU,QAALV,CAAce,OAAdf,CAAsBgB,SAAtBhB,CAAsBgB,CAAU,CAAhChB,CAA5BA,CAnCAA;AAqCJiB;;AAAAA;AACI,UAAMX,IAAUC,SAASP,KAAKR,IAAde,CAAhB;AAAA,UACMW,IAAUlB,KAAKa,MAALb,CAAYmB,aAAZnB,CAA0B,OAA1BA,CADhB;AAAA,UAEMoB,IAAQpB,KAAKa,MAALb,CAAYmB,aAAZnB,CAA0B,KAA1BA,CAFd;AAAA,UAGMqB,IAAUrB,KAAKa,MAALb,CAAYsB,gBAAZtB,CAA6B,MAA7BA,CAHhB;AAIKkB,UAELE,EAAMG,YAANH,CAAmB,QAAnBA,EAA6BI,OAAc,OAAPlB,CAAPkB,CAA7BJ,GACAA,EAAMG,YAANH,CAAmB,OAAnBA,EAA4BpB,KAAKR,IAAjC4B,CADAA,EAEAA,EAAMG,YAANH,CAAmB,SAAnBA,EAA8B,OAAOpB,KAAKR,QAAe,OAAPc,GAAlDc,CAFAA,EAGAC,EAAQI,OAARJ,CAAiBK;AACbA,QAAOH,YAAPG,CAAoB,cAApBA,EAAoC1B,KAAKL,MAAzC+B,GACAA,EAAOH,YAAPG,CAAoB,GAApBA,EAAyBjB,EAAOH,IAAU,EAAjBG,EAAqBT,KAAKJ,CAA1Ba,CAAzBiB,CADAA;AACsD,KAF1DL,CAHAD,EAOAF,EAAQP,SAARO,GAAoB,uCAENlB,KAAKR,iCACJQ,KAAKP,gCACLO,KAAKN,sCACAM,KAAK,YAALA,CAAK,qBAEzBY,SAhBKM;AAkBR;;AAxFgB5B;;AA0FrB,IAAeqC;AACXC,YAAU,YAAQ;AAAA,QAAPC,CAAO;AACTC,mBAAeC,GAAfD,CAAmBD,CAAnBC,KACDA,eAAeE,MAAfF,CAAsBD,CAAtBC,EAA4B,cAAczC,CAAd,CAAcA,EAA1CyC,CADCA;AAGJ,GALM;AAOXG,WAAS5C;AAPE,CAAf;AAOaA","names":["Cardio","Base","_attributes","size","color","speed","stroke","d","observedAttributes","constructor","super","this","storePropsToUpgrade","reflect","connectedCallback","upgradeStoredProps","applyDefaultProps","sizeInt","parseInt","scaledD","scaleD","template","innerHTML","styles","shadow","replaceChildren","content","cloneNode","attributeChangedCallback","styleEl","querySelector","svgEl","pathEls","querySelectorAll","setAttribute","String","forEach","pathEl","cardio","register","name","customElements","get","define","element"],"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/ldrs/temp-ts-out/elements/cardio.js"],"sourcesContent":["import scaleD from '../lib/scaleD.js';\nimport Base from '../lib/LdrsBaseElement.js';\nimport styles from './cardio.scss';\nclass Cardio extends Base {\n    _attributes = ['size', 'color', 'speed', 'stroke', 'bg-opacity'];\n    size;\n    color;\n    speed;\n    stroke;\n    'bg-opacity';\n    d;\n    static get observedAttributes() {\n        return ['size', 'color', 'speed', 'stroke', 'bg-opacity'];\n    }\n    constructor() {\n        super();\n        this.storePropsToUpgrade(this._attributes);\n        this.reflect(this._attributes);\n        this.d = 'M0.5,17.2h8.2l3-4.7l5.9,12l7.8-24l5.9,16.7v0h8.2';\n    }\n    connectedCallback() {\n        this.upgradeStoredProps();\n        this.applyDefaultProps({\n            size: 50,\n            color: 'black',\n            speed: 1.5,\n            stroke: 4,\n            'bg-opacity': 0.1,\n        });\n        const sizeInt = parseInt(this.size);\n        const scaledD = scaleD(sizeInt / 40, this.d);\n        this.template.innerHTML = `\n      <svg\n        class=\"container\" \n        x=\"0px\" \n        y=\"0px\"\n        viewBox=\"0 0 ${this.size} ${sizeInt * (25 / 40)}\"\n        height=\"${sizeInt * (25 / 40)}\"\n        width=\"${this.size}\"\n        preserveAspectRatio='xMidYMid meet'\n      >\n        <path \n          class=\"track\"\n          stroke-width=\"${this.stroke}\" \n          fill=\"none\" \n          pathlength=\"100\"\n          d=\"${scaledD}\"\n        />\n        <path \n          class=\"car\"\n          stroke-width=\"${this.stroke}\" \n          fill=\"none\" \n          pathlength=\"100\"\n          d=\"${scaledD}\"\n        />\n      </svg>\n      <style>\n        :host{\n          --uib-size: ${this.size}px;\n          --uib-color: ${this.color};\n          --uib-speed: ${this.speed}s;\n          --uib-bg-opacity: ${this['bg-opacity']};\n        }\n        ${styles}\n      </style>\n    `;\n        this.shadow.replaceChildren(this.template.content.cloneNode(true));\n    }\n    attributeChangedCallback() {\n        const sizeInt = parseInt(this.size);\n        const styleEl = this.shadow.querySelector('style');\n        const svgEl = this.shadow.querySelector('svg');\n        const pathEls = this.shadow.querySelectorAll('path');\n        if (!styleEl)\n            return;\n        svgEl.setAttribute('height', String(sizeInt * (25 / 40)));\n        svgEl.setAttribute('width', this.size);\n        svgEl.setAttribute('viewBox', `0 0 ${this.size} ${sizeInt * (25 / 40)}`);\n        pathEls.forEach((pathEl) => {\n            pathEl.setAttribute('stroke-width', this.stroke);\n            pathEl.setAttribute('d', scaleD(sizeInt / 40, this.d));\n        });\n        styleEl.innerHTML = `\n      :host{\n        --uib-size: ${this.size}px;\n        --uib-color: ${this.color};\n        --uib-speed: ${this.speed}s;\n        --uib-bg-opacity: ${this['bg-opacity']};\n      }\n      ${styles}\n    `;\n    }\n}\nexport default {\n    register: (name = 'l-cardio') => {\n        if (!customElements.get(name)) {\n            customElements.define(name, class extends Cardio {\n            });\n        }\n    },\n    element: Cardio,\n};\n"]},"metadata":{},"sourceType":"module"}