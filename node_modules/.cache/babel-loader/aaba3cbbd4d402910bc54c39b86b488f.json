{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Maël Nison @arcanis\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n\n/**\n * @typedef {Object} PnpApiImpl\n * @property {function(string, string, object): string} resolveToUnqualified\n */\n\nmodule.exports = class PnpPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {PnpApiImpl} pnpApi pnpApi\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, pnpApi, target) {\n    this.source = source;\n    this.pnpApi = pnpApi;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  apply(resolver) {\n    /** @type {ResolveStepHook} */\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"PnpPlugin\", (request, resolveContext, callback) => {\n      const req = request.request;\n      if (!req) return callback(); // The trailing slash indicates to PnP that this value is a folder rather than a file\n\n      const issuer = `${request.path}/`;\n      const packageMatch = /^(@[^/]+\\/)?[^/]+/.exec(req);\n      if (!packageMatch) return callback();\n      const packageName = packageMatch[0];\n      const innerRequest = `.${req.slice(packageName.length)}`;\n      /** @type {string|undefined} */\n\n      let resolution;\n      /** @type {string|undefined} */\n\n      let apiResolution;\n\n      try {\n        resolution = this.pnpApi.resolveToUnqualified(packageName, issuer, {\n          considerBuiltins: false\n        });\n\n        if (resolveContext.fileDependencies) {\n          apiResolution = this.pnpApi.resolveToUnqualified(\"pnpapi\", issuer, {\n            considerBuiltins: false\n          });\n        }\n      } catch (\n      /** @type {unknown} */\n      error) {\n        if (\n        /** @type {Error & { code: string }} */\n        error.code === \"MODULE_NOT_FOUND\" &&\n        /** @type {Error & { pnpCode: string }} */\n        error.pnpCode === \"UNDECLARED_DEPENDENCY\") {\n          // This is not a PnP managed dependency.\n          // Try to continue resolving with our alternatives\n          if (resolveContext.log) {\n            resolveContext.log(`request is not managed by the pnpapi`);\n\n            for (const line of\n            /** @type {Error} */\n            error.message.split(\"\\n\").filter(Boolean)) resolveContext.log(`  ${line}`);\n          }\n\n          return callback();\n        }\n\n        return callback(\n        /** @type {Error} */\n        error);\n      }\n\n      if (resolution === packageName) return callback();\n\n      if (apiResolution && resolveContext.fileDependencies) {\n        resolveContext.fileDependencies.add(apiResolution);\n      }\n      /** @type {ResolveRequest} */\n\n\n      const obj = { ...request,\n        path: resolution,\n        request: innerRequest,\n        ignoreSymlinks: true,\n        fullySpecified: request.fullySpecified && innerRequest !== \".\"\n      };\n      resolver.doResolve(target, obj, `resolved by pnp to ${resolution}`, resolveContext, (err, result) => {\n        if (err) return callback(err);\n        if (result) return callback(null, result); // Skip alternatives\n\n        return callback(null, null);\n      });\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/enhanced-resolve/lib/PnpPlugin.js"],"names":["module","exports","PnpPlugin","constructor","source","pnpApi","target","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","req","issuer","path","packageMatch","exec","packageName","innerRequest","slice","length","resolution","apiResolution","resolveToUnqualified","considerBuiltins","fileDependencies","error","code","pnpCode","log","line","message","split","filter","Boolean","add","obj","ignoreSymlinks","fullySpecified","doResolve","err","result"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AACA;;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,SAAN,CAAgB;AAChC;AACD;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,EAAyB;AACnC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf;AACA,UAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAT,CAAoB,KAAKH,MAAzB,CAAf;AACAE,IAAAA,QAAQ,CACNE,OADF,CACU,KAAKN,MADf,EAEEO,QAFF,CAEW,WAFX,EAEwB,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;AAC7D,YAAMC,GAAG,GAAGH,OAAO,CAACA,OAApB;AACA,UAAI,CAACG,GAAL,EAAU,OAAOD,QAAQ,EAAf,CAFmD,CAI7D;;AACA,YAAME,MAAM,GAAI,GAAEJ,OAAO,CAACK,IAAK,GAA/B;AAEA,YAAMC,YAAY,GAAG,oBAAoBC,IAApB,CAAyBJ,GAAzB,CAArB;AACA,UAAI,CAACG,YAAL,EAAmB,OAAOJ,QAAQ,EAAf;AAEnB,YAAMM,WAAW,GAAGF,YAAY,CAAC,CAAD,CAAhC;AACA,YAAMG,YAAY,GAAI,IAAGN,GAAG,CAACO,KAAJ,CAAUF,WAAW,CAACG,MAAtB,CAA8B,EAAvD;AAEA;;AACA,UAAIC,UAAJ;AACA;;AACA,UAAIC,aAAJ;;AACA,UAAI;AACHD,QAAAA,UAAU,GAAG,KAAKnB,MAAL,CAAYqB,oBAAZ,CAAiCN,WAAjC,EAA8CJ,MAA9C,EAAsD;AAClEW,UAAAA,gBAAgB,EAAE;AADgD,SAAtD,CAAb;;AAGA,YAAId,cAAc,CAACe,gBAAnB,EAAqC;AACpCH,UAAAA,aAAa,GAAG,KAAKpB,MAAL,CAAYqB,oBAAZ,CAAiC,QAAjC,EAA2CV,MAA3C,EAAmD;AAClEW,YAAAA,gBAAgB,EAAE;AADgD,WAAnD,CAAhB;AAGA;AACD,OATD,CASE;AAAO;AAAuBE,MAAAA,KAA9B,EAAqC;AACtC;AACC;AACCA,QAAAA,KAAD,CAAQC,IAAR,KAAiB,kBAAjB;AACA;AACCD,QAAAA,KAAD,CAAQE,OAAR,KAAoB,uBAJrB,EAKE;AACD;AACA;AACA,cAAIlB,cAAc,CAACmB,GAAnB,EAAwB;AACvBnB,YAAAA,cAAc,CAACmB,GAAf,CAAoB,sCAApB;;AACA,iBAAK,MAAMC,IAAX;AAAmB;AAAsBJ,YAAAA,KAAD,CAAQK,OAAR,CACtCC,KADsC,CAChC,IADgC,EAEtCC,MAFsC,CAE/BC,OAF+B,CAAxC,EAGCxB,cAAc,CAACmB,GAAf,CAAoB,KAAIC,IAAK,EAA7B;AACD;;AACD,iBAAOnB,QAAQ,EAAf;AACA;;AACD,eAAOA,QAAQ;AAAC;AAAsBe,QAAAA,KAAvB,CAAf;AACA;;AAED,UAAIL,UAAU,KAAKJ,WAAnB,EAAgC,OAAON,QAAQ,EAAf;;AAEhC,UAAIW,aAAa,IAAIZ,cAAc,CAACe,gBAApC,EAAsD;AACrDf,QAAAA,cAAc,CAACe,gBAAf,CAAgCU,GAAhC,CAAoCb,aAApC;AACA;AACD;;;AACA,YAAMc,GAAG,GAAG,EACX,GAAG3B,OADQ;AAEXK,QAAAA,IAAI,EAAEO,UAFK;AAGXZ,QAAAA,OAAO,EAAES,YAHE;AAIXmB,QAAAA,cAAc,EAAE,IAJL;AAKXC,QAAAA,cAAc,EAAE7B,OAAO,CAAC6B,cAAR,IAA0BpB,YAAY,KAAK;AALhD,OAAZ;AAOAb,MAAAA,QAAQ,CAACkC,SAAT,CACCpC,MADD,EAECiC,GAFD,EAGE,sBAAqBf,UAAW,EAHlC,EAICX,cAJD,EAKC,CAAC8B,GAAD,EAAMC,MAAN,KAAiB;AAChB,YAAID,GAAJ,EAAS,OAAO7B,QAAQ,CAAC6B,GAAD,CAAf;AACT,YAAIC,MAAJ,EAAY,OAAO9B,QAAQ,CAAC,IAAD,EAAO8B,MAAP,CAAf,CAFI,CAGhB;;AACA,eAAO9B,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;AACA,OAVF;AAYA,KA1EF;AA2EA;;AA9F+B,CAAjC","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Maël Nison @arcanis\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/**\n * @typedef {Object} PnpApiImpl\n * @property {function(string, string, object): string} resolveToUnqualified\n */\n\nmodule.exports = class PnpPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {PnpApiImpl} pnpApi pnpApi\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, pnpApi, target) {\n\t\tthis.source = source;\n\t\tthis.pnpApi = pnpApi;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\t/** @type {ResolveStepHook} */\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"PnpPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst req = request.request;\n\t\t\t\tif (!req) return callback();\n\n\t\t\t\t// The trailing slash indicates to PnP that this value is a folder rather than a file\n\t\t\t\tconst issuer = `${request.path}/`;\n\n\t\t\t\tconst packageMatch = /^(@[^/]+\\/)?[^/]+/.exec(req);\n\t\t\t\tif (!packageMatch) return callback();\n\n\t\t\t\tconst packageName = packageMatch[0];\n\t\t\t\tconst innerRequest = `.${req.slice(packageName.length)}`;\n\n\t\t\t\t/** @type {string|undefined} */\n\t\t\t\tlet resolution;\n\t\t\t\t/** @type {string|undefined} */\n\t\t\t\tlet apiResolution;\n\t\t\t\ttry {\n\t\t\t\t\tresolution = this.pnpApi.resolveToUnqualified(packageName, issuer, {\n\t\t\t\t\t\tconsiderBuiltins: false\n\t\t\t\t\t});\n\t\t\t\t\tif (resolveContext.fileDependencies) {\n\t\t\t\t\t\tapiResolution = this.pnpApi.resolveToUnqualified(\"pnpapi\", issuer, {\n\t\t\t\t\t\t\tconsiderBuiltins: false\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} catch (/** @type {unknown} */ error) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t/** @type {Error & { code: string }} */\n\t\t\t\t\t\t(error).code === \"MODULE_NOT_FOUND\" &&\n\t\t\t\t\t\t/** @type {Error & { pnpCode: string }} */\n\t\t\t\t\t\t(error).pnpCode === \"UNDECLARED_DEPENDENCY\"\n\t\t\t\t\t) {\n\t\t\t\t\t\t// This is not a PnP managed dependency.\n\t\t\t\t\t\t// Try to continue resolving with our alternatives\n\t\t\t\t\t\tif (resolveContext.log) {\n\t\t\t\t\t\t\tresolveContext.log(`request is not managed by the pnpapi`);\n\t\t\t\t\t\t\tfor (const line of /** @type {Error} */ (error).message\n\t\t\t\t\t\t\t\t.split(\"\\n\")\n\t\t\t\t\t\t\t\t.filter(Boolean))\n\t\t\t\t\t\t\t\tresolveContext.log(`  ${line}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t}\n\t\t\t\t\treturn callback(/** @type {Error} */ (error));\n\t\t\t\t}\n\n\t\t\t\tif (resolution === packageName) return callback();\n\n\t\t\t\tif (apiResolution && resolveContext.fileDependencies) {\n\t\t\t\t\tresolveContext.fileDependencies.add(apiResolution);\n\t\t\t\t}\n\t\t\t\t/** @type {ResolveRequest} */\n\t\t\t\tconst obj = {\n\t\t\t\t\t...request,\n\t\t\t\t\tpath: resolution,\n\t\t\t\t\trequest: innerRequest,\n\t\t\t\t\tignoreSymlinks: true,\n\t\t\t\t\tfullySpecified: request.fullySpecified && innerRequest !== \".\"\n\t\t\t\t};\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\tobj,\n\t\t\t\t\t`resolved by pnp to ${resolution}`,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\tif (result) return callback(null, result);\n\t\t\t\t\t\t// Skip alternatives\n\t\t\t\t\t\treturn callback(null, null);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}