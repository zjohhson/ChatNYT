{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  getEntryRuntime,\n  mergeRuntimeOwned\n} = require(\"./util/runtime\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/** @typedef {import(\"./Module\").FactoryMeta} FactoryMeta */\n\n/** @typedef {import(\"./util/runtime\").RuntimeSpec} RuntimeSpec */\n\n\nconst PLUGIN_NAME = \"FlagAllModulesAsUsedPlugin\";\n\nclass FlagAllModulesAsUsedPlugin {\n  /**\n   * @param {string} explanation explanation\n   */\n  constructor(explanation) {\n    this.explanation = explanation;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {\n      const moduleGraph = compilation.moduleGraph;\n      compilation.hooks.optimizeDependencies.tap(PLUGIN_NAME, modules => {\n        /** @type {RuntimeSpec} */\n        let runtime = undefined;\n\n        for (const [name, {\n          options\n        }] of compilation.entries) {\n          runtime = mergeRuntimeOwned(runtime, getEntryRuntime(compilation, name, options));\n        }\n\n        for (const module of modules) {\n          const exportsInfo = moduleGraph.getExportsInfo(module);\n          exportsInfo.setUsedInUnknownWay(runtime);\n          moduleGraph.addExtraReason(module, this.explanation);\n\n          if (module.factoryMeta === undefined) {\n            module.factoryMeta = {};\n          }\n          /** @type {FactoryMeta} */\n\n\n          module.factoryMeta.sideEffectFree = false;\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = FlagAllModulesAsUsedPlugin;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/FlagAllModulesAsUsedPlugin.js"],"names":["getEntryRuntime","mergeRuntimeOwned","require","PLUGIN_NAME","FlagAllModulesAsUsedPlugin","constructor","explanation","apply","compiler","hooks","compilation","tap","moduleGraph","optimizeDependencies","modules","runtime","undefined","name","options","entries","module","exportsInfo","getExportsInfo","setUsedInUnknownWay","addExtraReason","factoryMeta","sideEffectFree","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AAAEA,EAAAA,eAAF;AAAmBC,EAAAA;AAAnB,IAAyCC,OAAO,CAAC,gBAAD,CAAtD;AAEA;;AACA;;AACA;;;AAEA,MAAMC,WAAW,GAAG,4BAApB;;AACA,MAAMC,0BAAN,CAAiC;AAChC;AACD;AACA;AACCC,EAAAA,WAAW,CAACC,WAAD,EAAc;AACxB,SAAKA,WAAL,GAAmBA,WAAnB;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+BR,WAA/B,EAA4CO,WAAW,IAAI;AAC1D,YAAME,WAAW,GAAGF,WAAW,CAACE,WAAhC;AACAF,MAAAA,WAAW,CAACD,KAAZ,CAAkBI,oBAAlB,CAAuCF,GAAvC,CAA2CR,WAA3C,EAAwDW,OAAO,IAAI;AAClE;AACA,YAAIC,OAAO,GAAGC,SAAd;;AACA,aAAK,MAAM,CAACC,IAAD,EAAO;AAAEC,UAAAA;AAAF,SAAP,CAAX,IAAkCR,WAAW,CAACS,OAA9C,EAAuD;AACtDJ,UAAAA,OAAO,GAAGd,iBAAiB,CAC1Bc,OAD0B,EAE1Bf,eAAe,CAACU,WAAD,EAAcO,IAAd,EAAoBC,OAApB,CAFW,CAA3B;AAIA;;AACD,aAAK,MAAME,MAAX,IAAqBN,OAArB,EAA8B;AAC7B,gBAAMO,WAAW,GAAGT,WAAW,CAACU,cAAZ,CAA2BF,MAA3B,CAApB;AACAC,UAAAA,WAAW,CAACE,mBAAZ,CAAgCR,OAAhC;AACAH,UAAAA,WAAW,CAACY,cAAZ,CAA2BJ,MAA3B,EAAmC,KAAKd,WAAxC;;AACA,cAAIc,MAAM,CAACK,WAAP,KAAuBT,SAA3B,EAAsC;AACrCI,YAAAA,MAAM,CAACK,WAAP,GAAqB,EAArB;AACA;AACD;;;AACCL,UAAAA,MAAM,CAACK,WAAR,CAAqBC,cAArB,GAAsC,KAAtC;AACA;AACD,OAnBD;AAoBA,KAtBD;AAuBA;;AArC+B;;AAwCjCN,MAAM,CAACO,OAAP,GAAiBvB,0BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { getEntryRuntime, mergeRuntimeOwned } = require(\"./util/runtime\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./Module\").FactoryMeta} FactoryMeta */\n/** @typedef {import(\"./util/runtime\").RuntimeSpec} RuntimeSpec */\n\nconst PLUGIN_NAME = \"FlagAllModulesAsUsedPlugin\";\nclass FlagAllModulesAsUsedPlugin {\n\t/**\n\t * @param {string} explanation explanation\n\t */\n\tconstructor(explanation) {\n\t\tthis.explanation = explanation;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {\n\t\t\tconst moduleGraph = compilation.moduleGraph;\n\t\t\tcompilation.hooks.optimizeDependencies.tap(PLUGIN_NAME, modules => {\n\t\t\t\t/** @type {RuntimeSpec} */\n\t\t\t\tlet runtime = undefined;\n\t\t\t\tfor (const [name, { options }] of compilation.entries) {\n\t\t\t\t\truntime = mergeRuntimeOwned(\n\t\t\t\t\t\truntime,\n\t\t\t\t\t\tgetEntryRuntime(compilation, name, options)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tfor (const module of modules) {\n\t\t\t\t\tconst exportsInfo = moduleGraph.getExportsInfo(module);\n\t\t\t\t\texportsInfo.setUsedInUnknownWay(runtime);\n\t\t\t\t\tmoduleGraph.addExtraReason(module, this.explanation);\n\t\t\t\t\tif (module.factoryMeta === undefined) {\n\t\t\t\t\t\tmodule.factoryMeta = {};\n\t\t\t\t\t}\n\t\t\t\t\t/** @type {FactoryMeta} */\n\t\t\t\t\t(module.factoryMeta).sideEffectFree = false;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = FlagAllModulesAsUsedPlugin;\n"]},"metadata":{},"sourceType":"script"}