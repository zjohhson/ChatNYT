{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { moveHighlight, listReducer, ListActionTypes, handleItemSelection } from '../useList';\nimport { SelectActionTypes } from './useSelect.types';\nexport function selectReducer(state, action) {\n  const {\n    open\n  } = state;\n  const {\n    context: {\n      selectionMode\n    }\n  } = action;\n\n  if (action.type === SelectActionTypes.buttonClick) {\n    var _state$selectedValues;\n\n    const itemToHighlight = (_state$selectedValues = state.selectedValues[0]) != null ? _state$selectedValues : moveHighlight(null, 'start', action.context);\n    return _extends({}, state, {\n      open: !open,\n      highlightedValue: !open ? itemToHighlight : null\n    });\n  }\n\n  if (action.type === SelectActionTypes.browserAutoFill) {\n    return handleItemSelection(action.item, state, action.context);\n  }\n\n  const newState = listReducer(state, action);\n\n  switch (action.type) {\n    case ListActionTypes.keyDown:\n      if (state.open) {\n        if (action.event.key === 'Escape') {\n          return _extends({}, newState, {\n            open: false\n          });\n        }\n\n        if (selectionMode === 'single' && (action.event.key === 'Enter' || action.event.key === ' ')) {\n          return _extends({}, newState, {\n            open: false\n          });\n        }\n      } else {\n        if (action.event.key === 'Enter' || action.event.key === ' ' || action.event.key === 'ArrowDown') {\n          var _state$selectedValues2;\n\n          return _extends({}, state, {\n            open: true,\n            highlightedValue: (_state$selectedValues2 = state.selectedValues[0]) != null ? _state$selectedValues2 : moveHighlight(null, 'start', action.context)\n          });\n        }\n\n        if (action.event.key === 'ArrowUp') {\n          var _state$selectedValues3;\n\n          return _extends({}, state, {\n            open: true,\n            highlightedValue: (_state$selectedValues3 = state.selectedValues[0]) != null ? _state$selectedValues3 : moveHighlight(null, 'end', action.context)\n          });\n        }\n      }\n\n      break;\n\n    case ListActionTypes.itemClick:\n      if (selectionMode === 'single') {\n        return _extends({}, newState, {\n          open: false\n        });\n      }\n\n      break;\n\n    case ListActionTypes.blur:\n      return _extends({}, newState, {\n        open: false\n      });\n\n    default:\n      return newState;\n  }\n\n  return newState;\n}","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/@mui/base/useSelect/selectReducer.js"],"names":["_extends","moveHighlight","listReducer","ListActionTypes","handleItemSelection","SelectActionTypes","selectReducer","state","action","open","context","selectionMode","type","buttonClick","_state$selectedValues","itemToHighlight","selectedValues","highlightedValue","browserAutoFill","item","newState","keyDown","event","key","_state$selectedValues2","_state$selectedValues3","itemClick","blur"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,eAArC,EAAsDC,mBAAtD,QAAiF,YAAjF;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,MAA9B,EAAsC;AAC3C,QAAM;AACJC,IAAAA;AADI,MAEFF,KAFJ;AAGA,QAAM;AACJG,IAAAA,OAAO,EAAE;AACPC,MAAAA;AADO;AADL,MAIFH,MAJJ;;AAKA,MAAIA,MAAM,CAACI,IAAP,KAAgBP,iBAAiB,CAACQ,WAAtC,EAAmD;AACjD,QAAIC,qBAAJ;;AACA,UAAMC,eAAe,GAAG,CAACD,qBAAqB,GAAGP,KAAK,CAACS,cAAN,CAAqB,CAArB,CAAzB,KAAqD,IAArD,GAA4DF,qBAA5D,GAAoFb,aAAa,CAAC,IAAD,EAAO,OAAP,EAAgBO,MAAM,CAACE,OAAvB,CAAzH;AACA,WAAOV,QAAQ,CAAC,EAAD,EAAKO,KAAL,EAAY;AACzBE,MAAAA,IAAI,EAAE,CAACA,IADkB;AAEzBQ,MAAAA,gBAAgB,EAAE,CAACR,IAAD,GAAQM,eAAR,GAA0B;AAFnB,KAAZ,CAAf;AAID;;AACD,MAAIP,MAAM,CAACI,IAAP,KAAgBP,iBAAiB,CAACa,eAAtC,EAAuD;AACrD,WAAOd,mBAAmB,CAACI,MAAM,CAACW,IAAR,EAAcZ,KAAd,EAAqBC,MAAM,CAACE,OAA5B,CAA1B;AACD;;AACD,QAAMU,QAAQ,GAAGlB,WAAW,CAACK,KAAD,EAAQC,MAAR,CAA5B;;AACA,UAAQA,MAAM,CAACI,IAAf;AACE,SAAKT,eAAe,CAACkB,OAArB;AACE,UAAId,KAAK,CAACE,IAAV,EAAgB;AACd,YAAID,MAAM,CAACc,KAAP,CAAaC,GAAb,KAAqB,QAAzB,EAAmC;AACjC,iBAAOvB,QAAQ,CAAC,EAAD,EAAKoB,QAAL,EAAe;AAC5BX,YAAAA,IAAI,EAAE;AADsB,WAAf,CAAf;AAGD;;AACD,YAAIE,aAAa,KAAK,QAAlB,KAA+BH,MAAM,CAACc,KAAP,CAAaC,GAAb,KAAqB,OAArB,IAAgCf,MAAM,CAACc,KAAP,CAAaC,GAAb,KAAqB,GAApF,CAAJ,EAA8F;AAC5F,iBAAOvB,QAAQ,CAAC,EAAD,EAAKoB,QAAL,EAAe;AAC5BX,YAAAA,IAAI,EAAE;AADsB,WAAf,CAAf;AAGD;AACF,OAXD,MAWO;AACL,YAAID,MAAM,CAACc,KAAP,CAAaC,GAAb,KAAqB,OAArB,IAAgCf,MAAM,CAACc,KAAP,CAAaC,GAAb,KAAqB,GAArD,IAA4Df,MAAM,CAACc,KAAP,CAAaC,GAAb,KAAqB,WAArF,EAAkG;AAChG,cAAIC,sBAAJ;;AACA,iBAAOxB,QAAQ,CAAC,EAAD,EAAKO,KAAL,EAAY;AACzBE,YAAAA,IAAI,EAAE,IADmB;AAEzBQ,YAAAA,gBAAgB,EAAE,CAACO,sBAAsB,GAAGjB,KAAK,CAACS,cAAN,CAAqB,CAArB,CAA1B,KAAsD,IAAtD,GAA6DQ,sBAA7D,GAAsFvB,aAAa,CAAC,IAAD,EAAO,OAAP,EAAgBO,MAAM,CAACE,OAAvB;AAF5F,WAAZ,CAAf;AAID;;AACD,YAAIF,MAAM,CAACc,KAAP,CAAaC,GAAb,KAAqB,SAAzB,EAAoC;AAClC,cAAIE,sBAAJ;;AACA,iBAAOzB,QAAQ,CAAC,EAAD,EAAKO,KAAL,EAAY;AACzBE,YAAAA,IAAI,EAAE,IADmB;AAEzBQ,YAAAA,gBAAgB,EAAE,CAACQ,sBAAsB,GAAGlB,KAAK,CAACS,cAAN,CAAqB,CAArB,CAA1B,KAAsD,IAAtD,GAA6DS,sBAA7D,GAAsFxB,aAAa,CAAC,IAAD,EAAO,KAAP,EAAcO,MAAM,CAACE,OAArB;AAF5F,WAAZ,CAAf;AAID;AACF;;AACD;;AACF,SAAKP,eAAe,CAACuB,SAArB;AACE,UAAIf,aAAa,KAAK,QAAtB,EAAgC;AAC9B,eAAOX,QAAQ,CAAC,EAAD,EAAKoB,QAAL,EAAe;AAC5BX,UAAAA,IAAI,EAAE;AADsB,SAAf,CAAf;AAGD;;AACD;;AACF,SAAKN,eAAe,CAACwB,IAArB;AACE,aAAO3B,QAAQ,CAAC,EAAD,EAAKoB,QAAL,EAAe;AAC5BX,QAAAA,IAAI,EAAE;AADsB,OAAf,CAAf;;AAGF;AACE,aAAOW,QAAP;AA1CJ;;AA4CA,SAAOA,QAAP;AACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { moveHighlight, listReducer, ListActionTypes, handleItemSelection } from '../useList';\nimport { SelectActionTypes } from './useSelect.types';\nexport function selectReducer(state, action) {\n  const {\n    open\n  } = state;\n  const {\n    context: {\n      selectionMode\n    }\n  } = action;\n  if (action.type === SelectActionTypes.buttonClick) {\n    var _state$selectedValues;\n    const itemToHighlight = (_state$selectedValues = state.selectedValues[0]) != null ? _state$selectedValues : moveHighlight(null, 'start', action.context);\n    return _extends({}, state, {\n      open: !open,\n      highlightedValue: !open ? itemToHighlight : null\n    });\n  }\n  if (action.type === SelectActionTypes.browserAutoFill) {\n    return handleItemSelection(action.item, state, action.context);\n  }\n  const newState = listReducer(state, action);\n  switch (action.type) {\n    case ListActionTypes.keyDown:\n      if (state.open) {\n        if (action.event.key === 'Escape') {\n          return _extends({}, newState, {\n            open: false\n          });\n        }\n        if (selectionMode === 'single' && (action.event.key === 'Enter' || action.event.key === ' ')) {\n          return _extends({}, newState, {\n            open: false\n          });\n        }\n      } else {\n        if (action.event.key === 'Enter' || action.event.key === ' ' || action.event.key === 'ArrowDown') {\n          var _state$selectedValues2;\n          return _extends({}, state, {\n            open: true,\n            highlightedValue: (_state$selectedValues2 = state.selectedValues[0]) != null ? _state$selectedValues2 : moveHighlight(null, 'start', action.context)\n          });\n        }\n        if (action.event.key === 'ArrowUp') {\n          var _state$selectedValues3;\n          return _extends({}, state, {\n            open: true,\n            highlightedValue: (_state$selectedValues3 = state.selectedValues[0]) != null ? _state$selectedValues3 : moveHighlight(null, 'end', action.context)\n          });\n        }\n      }\n      break;\n    case ListActionTypes.itemClick:\n      if (selectionMode === 'single') {\n        return _extends({}, newState, {\n          open: false\n        });\n      }\n      break;\n    case ListActionTypes.blur:\n      return _extends({}, newState, {\n        open: false\n      });\n    default:\n      return newState;\n  }\n  return newState;\n}"]},"metadata":{},"sourceType":"module"}