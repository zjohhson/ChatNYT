{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { isRequestOptions } from 'openai/core';\nimport * as AssistantsAPI from 'openai/resources/beta/assistants/assistants';\nimport * as FilesAPI from 'openai/resources/beta/assistants/files';\nimport { CursorPage } from 'openai/pagination';\nexport class Assistants extends APIResource {\n  constructor() {\n    super(...arguments);\n    this.files = new FilesAPI.Files(this.client);\n  }\n  /**\n   * Create an assistant with a model and instructions.\n   */\n\n\n  create(body, options) {\n    return this.post('/assistants', {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieves an assistant.\n   */\n\n\n  retrieve(assistantId, options) {\n    return this.get(`/assistants/${assistantId}`, { ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Modifies an assistant.\n   */\n\n\n  update(assistantId, body, options) {\n    return this.post(`/assistants/${assistantId}`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n\n  list() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n\n    if (isRequestOptions(query)) {\n      return this.list({}, query);\n    }\n\n    return this.getAPIList('/assistants', AssistantsPage, {\n      query,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Delete an assistant.\n   */\n\n\n  del(assistantId, options) {\n    return this.delete(`/assistants/${assistantId}`, { ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n\n}\nexport class AssistantsPage extends CursorPage {}\n\n(function (Assistants) {\n  Assistants.AssistantsPage = AssistantsAPI.AssistantsPage;\n  Assistants.Files = FilesAPI.Files;\n  Assistants.AssistantFilesPage = FilesAPI.AssistantFilesPage;\n})(Assistants || (Assistants = {}));","map":{"version":3,"mappings":"AAAA;SAGSA,mBAAmB;SACnBC,wBAAwB;OAC1B,KAAKC,mBAAmB;OACxB,KAAKC,cAAc;SACjBC,kBAAyC;AAElD,OAAM,MAAOC,UAAP,SAA0BL,WAA1B,CAAqC;AAA3CM;;AACE,iBAAwB,IAAIH,QAAQ,CAACI,KAAb,CAAmB,KAAKC,MAAxB,CAAxB;AAqED;AAnEC;;;;;AAGAC,QAAM,CAACC,IAAD,EAA8BC,OAA9B,EAA2D;AAC/D,WAAO,KAAKC,IAAL,CAAU,aAAV,EAAyB;AAC9BF,UAD8B;AAE9B,SAAGC,OAF2B;AAG9BE,aAAO,EAAE;AAAE,uBAAe,eAAjB;AAAkC,WAAGF,OAAO,EAAEE;AAA9C;AAHqB,KAAzB,CAAP;AAKD;AAED;;;;;AAGAC,UAAQ,CAACC,WAAD,EAAsBJ,OAAtB,EAAmD;AACzD,WAAO,KAAKK,GAAL,CAAS,eAAeD,WAAW,EAAnC,EAAuC,EAC5C,GAAGJ,OADyC;AAE5CE,aAAO,EAAE;AAAE,uBAAe,eAAjB;AAAkC,WAAGF,OAAO,EAAEE;AAA9C;AAFmC,KAAvC,CAAP;AAID;AAED;;;;;AAGAI,QAAM,CACJF,WADI,EAEJL,IAFI,EAGJC,OAHI,EAGyB;AAE7B,WAAO,KAAKC,IAAL,CAAU,eAAeG,WAAW,EAApC,EAAwC;AAC7CL,UAD6C;AAE7C,SAAGC,OAF0C;AAG7CE,aAAO,EAAE;AAAE,uBAAe,eAAjB;AAAkC,WAAGF,OAAO,EAAEE;AAA9C;AAHoC,KAAxC,CAAP;AAKD;;AAUDK,MAAI,GAE2B;AAAA,QAD7BC,KAC6B,uEADsB,EACtB;AAAA,QAA7BR,OAA6B;;AAE7B,QAAIV,gBAAgB,CAACkB,KAAD,CAApB,EAA6B;AAC3B,aAAO,KAAKD,IAAL,CAAU,EAAV,EAAcC,KAAd,CAAP;AACD;;AACD,WAAO,KAAKC,UAAL,CAAgB,aAAhB,EAA+BC,cAA/B,EAA+C;AACpDF,WADoD;AAEpD,SAAGR,OAFiD;AAGpDE,aAAO,EAAE;AAAE,uBAAe,eAAjB;AAAkC,WAAGF,OAAO,EAAEE;AAA9C;AAH2C,KAA/C,CAAP;AAKD;AAED;;;;;AAGAS,KAAG,CAACP,WAAD,EAAsBJ,OAAtB,EAAmD;AACpD,WAAO,KAAKY,MAAL,CAAY,eAAeR,WAAW,EAAtC,EAA0C,EAC/C,GAAGJ,OAD4C;AAE/CE,aAAO,EAAE;AAAE,uBAAe,eAAjB;AAAkC,WAAGF,OAAO,EAAEE;AAA9C;AAFsC,KAA1C,CAAP;AAID;;AArEwC;AAwE3C,OAAM,MAAOQ,cAAP,SAA8BjB,UAA9B,CAAmD;;AAuXzD,WAAiBC,UAAjB,EAA2B;AAGXA,8BAAiBH,aAAa,CAACmB,cAA/B;AAIAhB,qBAAQF,QAAQ,CAACI,KAAjB;AAGAF,kCAAqBF,QAAQ,CAACqB,kBAA9B;AAGf,CAbD,EAAiBnB,UAAU,KAAVA,UAAU,MAA3B","names":["APIResource","isRequestOptions","AssistantsAPI","FilesAPI","CursorPage","Assistants","constructor","Files","client","create","body","options","post","headers","retrieve","assistantId","get","update","list","query","getAPIList","AssistantsPage","del","delete","AssistantFilesPage"],"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/openai/src/resources/beta/assistants/assistants.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../../core\";\nimport { APIResource } from \"../../../resource\";\nimport { isRequestOptions } from \"../../../core\";\nimport * as AssistantsAPI from \"./assistants\";\nimport * as FilesAPI from \"./files\";\nimport { CursorPage, type CursorPageParams } from \"../../../pagination\";\n\nexport class Assistants extends APIResource {\n  files: FilesAPI.Files = new FilesAPI.Files(this.client);\n\n  /**\n   * Create an assistant with a model and instructions.\n   */\n  create(body: AssistantCreateParams, options?: Core.RequestOptions): Core.APIPromise<Assistant> {\n    return this.post('/assistants', {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieves an assistant.\n   */\n  retrieve(assistantId: string, options?: Core.RequestOptions): Core.APIPromise<Assistant> {\n    return this.get(`/assistants/${assistantId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Modifies an assistant.\n   */\n  update(\n    assistantId: string,\n    body: AssistantUpdateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Assistant> {\n    return this.post(`/assistants/${assistantId}`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Returns a list of assistants.\n   */\n  list(\n    query?: AssistantListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<AssistantsPage, Assistant>;\n  list(options?: Core.RequestOptions): Core.PagePromise<AssistantsPage, Assistant>;\n  list(\n    query: AssistantListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<AssistantsPage, Assistant> {\n    if (isRequestOptions(query)) {\n      return this.list({}, query);\n    }\n    return this.getAPIList('/assistants', AssistantsPage, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Delete an assistant.\n   */\n  del(assistantId: string, options?: Core.RequestOptions): Core.APIPromise<AsssitantDeleted> {\n    return this.delete(`/assistants/${assistantId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n}\n\nexport class AssistantsPage extends CursorPage<Assistant> {}\n\n/**\n * Represents an `assistant` that can call the model and use tools.\n */\nexport interface Assistant {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the assistant was created.\n   */\n  created_at: number;\n\n  /**\n   * The description of the assistant. The maximum length is 512 characters.\n   */\n  description: string | null;\n\n  /**\n   * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs\n   * attached to this assistant. There can be a maximum of 20 files attached to the\n   * assistant. Files are ordered by their creation date in ascending order.\n   */\n  file_ids: Array<string>;\n\n  /**\n   * The system instructions that the assistant uses. The maximum length is 32768\n   * characters.\n   */\n  instructions: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata: unknown | null;\n\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models/overview) for\n   * descriptions of them.\n   */\n  model: string;\n\n  /**\n   * The name of the assistant. The maximum length is 256 characters.\n   */\n  name: string | null;\n\n  /**\n   * The object type, which is always `assistant`.\n   */\n  object: 'assistant';\n\n  /**\n   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per\n   * assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.\n   */\n  tools: Array<Assistant.CodeInterpreter | Assistant.Retrieval | Assistant.Function>;\n}\n\nexport namespace Assistant {\n  export interface CodeInterpreter {\n    /**\n     * The type of tool being defined: `code_interpreter`\n     */\n    type: 'code_interpreter';\n  }\n\n  export interface Retrieval {\n    /**\n     * The type of tool being defined: `retrieval`\n     */\n    type: 'retrieval';\n  }\n\n  export interface Function {\n    /**\n     * The function definition.\n     */\n    function: Function.Function;\n\n    /**\n     * The type of tool being defined: `function`\n     */\n    type: 'function';\n  }\n\n  export namespace Function {\n    /**\n     * The function definition.\n     */\n    export interface Function {\n      /**\n       * A description of what the function does, used by the model to choose when and\n       * how to call the function.\n       */\n      description: string;\n\n      /**\n       * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain\n       * underscores and dashes, with a maximum length of 64.\n       */\n      name: string;\n\n      /**\n       * The parameters the functions accepts, described as a JSON Schema object. See the\n       * [guide](https://platform.openai.com/docs/guides/gpt/function-calling) for\n       * examples, and the\n       * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\n       * documentation about the format.\n       *\n       * To describe a function that accepts no parameters, provide the value\n       * `{\"type\": \"object\", \"properties\": {}}`.\n       */\n      parameters: Record<string, unknown>;\n    }\n  }\n}\n\nexport interface AsssitantDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'assistant.deleted';\n}\n\nexport interface AssistantCreateParams {\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models/overview) for\n   * descriptions of them.\n   */\n  model: string;\n\n  /**\n   * The description of the assistant. The maximum length is 512 characters.\n   */\n  description?: string | null;\n\n  /**\n   * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs\n   * attached to this assistant. There can be a maximum of 20 files attached to the\n   * assistant. Files are ordered by their creation date in ascending order.\n   */\n  file_ids?: Array<string>;\n\n  /**\n   * The system instructions that the assistant uses. The maximum length is 32768\n   * characters.\n   */\n  instructions?: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * The name of the assistant. The maximum length is 256 characters.\n   */\n  name?: string | null;\n\n  /**\n   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per\n   * assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.\n   */\n  tools?: Array<\n    | AssistantCreateParams.AssistantToolsCode\n    | AssistantCreateParams.AssistantToolsRetrieval\n    | AssistantCreateParams.AssistantToolsFunction\n  >;\n}\n\nexport namespace AssistantCreateParams {\n  export interface AssistantToolsCode {\n    /**\n     * The type of tool being defined: `code_interpreter`\n     */\n    type: 'code_interpreter';\n  }\n\n  export interface AssistantToolsRetrieval {\n    /**\n     * The type of tool being defined: `retrieval`\n     */\n    type: 'retrieval';\n  }\n\n  export interface AssistantToolsFunction {\n    /**\n     * The function definition.\n     */\n    function: AssistantToolsFunction.Function;\n\n    /**\n     * The type of tool being defined: `function`\n     */\n    type: 'function';\n  }\n\n  export namespace AssistantToolsFunction {\n    /**\n     * The function definition.\n     */\n    export interface Function {\n      /**\n       * A description of what the function does, used by the model to choose when and\n       * how to call the function.\n       */\n      description: string;\n\n      /**\n       * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain\n       * underscores and dashes, with a maximum length of 64.\n       */\n      name: string;\n\n      /**\n       * The parameters the functions accepts, described as a JSON Schema object. See the\n       * [guide](https://platform.openai.com/docs/guides/gpt/function-calling) for\n       * examples, and the\n       * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\n       * documentation about the format.\n       *\n       * To describe a function that accepts no parameters, provide the value\n       * `{\"type\": \"object\", \"properties\": {}}`.\n       */\n      parameters: Record<string, unknown>;\n    }\n  }\n}\n\nexport interface AssistantUpdateParams {\n  /**\n   * The description of the assistant. The maximum length is 512 characters.\n   */\n  description?: string | null;\n\n  /**\n   * A list of [File](https://platform.openai.com/docs/api-reference/files) IDs\n   * attached to this assistant. There can be a maximum of 20 files attached to the\n   * assistant. Files are ordered by their creation date in ascending order. If a\n   * file was previosuly attached to the list but does not show up in the list, it\n   * will be deleted from the assistant.\n   */\n  file_ids?: Array<string>;\n\n  /**\n   * The system instructions that the assistant uses. The maximum length is 32768\n   * characters.\n   */\n  instructions?: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * ID of the model to use. You can use the\n   * [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n   * see all of your available models, or see our\n   * [Model overview](https://platform.openai.com/docs/models/overview) for\n   * descriptions of them.\n   */\n  model?: string;\n\n  /**\n   * The name of the assistant. The maximum length is 256 characters.\n   */\n  name?: string | null;\n\n  /**\n   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per\n   * assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.\n   */\n  tools?: Array<\n    | AssistantUpdateParams.AssistantToolsCode\n    | AssistantUpdateParams.AssistantToolsRetrieval\n    | AssistantUpdateParams.AssistantToolsFunction\n  >;\n}\n\nexport namespace AssistantUpdateParams {\n  export interface AssistantToolsCode {\n    /**\n     * The type of tool being defined: `code_interpreter`\n     */\n    type: 'code_interpreter';\n  }\n\n  export interface AssistantToolsRetrieval {\n    /**\n     * The type of tool being defined: `retrieval`\n     */\n    type: 'retrieval';\n  }\n\n  export interface AssistantToolsFunction {\n    /**\n     * The function definition.\n     */\n    function: AssistantToolsFunction.Function;\n\n    /**\n     * The type of tool being defined: `function`\n     */\n    type: 'function';\n  }\n\n  export namespace AssistantToolsFunction {\n    /**\n     * The function definition.\n     */\n    export interface Function {\n      /**\n       * A description of what the function does, used by the model to choose when and\n       * how to call the function.\n       */\n      description: string;\n\n      /**\n       * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain\n       * underscores and dashes, with a maximum length of 64.\n       */\n      name: string;\n\n      /**\n       * The parameters the functions accepts, described as a JSON Schema object. See the\n       * [guide](https://platform.openai.com/docs/guides/gpt/function-calling) for\n       * examples, and the\n       * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\n       * documentation about the format.\n       *\n       * To describe a function that accepts no parameters, provide the value\n       * `{\"type\": \"object\", \"properties\": {}}`.\n       */\n      parameters: Record<string, unknown>;\n    }\n  }\n}\n\nexport interface AssistantListParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * ending with obj_foo, your subsequent call can include before=obj_foo in order to\n   * fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nexport namespace Assistants {\n  export import Assistant = AssistantsAPI.Assistant;\n  export import AsssitantDeleted = AssistantsAPI.AsssitantDeleted;\n  export import AssistantsPage = AssistantsAPI.AssistantsPage;\n  export import AssistantCreateParams = AssistantsAPI.AssistantCreateParams;\n  export import AssistantUpdateParams = AssistantsAPI.AssistantUpdateParams;\n  export import AssistantListParams = AssistantsAPI.AssistantListParams;\n  export import Files = FilesAPI.Files;\n  export import AssistantFile = FilesAPI.AssistantFile;\n  export import FileDeleteResponse = FilesAPI.FileDeleteResponse;\n  export import AssistantFilesPage = FilesAPI.AssistantFilesPage;\n  export import FileCreateParams = FilesAPI.FileCreateParams;\n  export import FileListParams = FilesAPI.FileListParams;\n}\n"]},"metadata":{},"sourceType":"module"}