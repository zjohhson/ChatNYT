{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useWordle = (solution, wordBank) => {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [guesses, setGuesses] = useState([...Array(6)]); // each guess is an array\n\n  const [history, setHistory] = useState([]); // each guess is a string\n\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [usedKeys, setUsedKeys] = useState({}); // {a: 'grey', b: 'green', c: 'yellow'} etc\n\n  const wordBankList = wordBank.map((w, i) => {\n    return w[\"word\"];\n  }); // format a guess into an array of letter objects \n  // e.g. [{key: 'a', color: 'yellow'}]\n\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n    let formattedGuess = [...currentGuess].map(l => {\n      return {\n        key: l,\n        color: 'grey'\n      };\n    }); // find any green letters\n\n    formattedGuess.forEach((l, i) => {\n      if (solution[i] === l.key) {\n        formattedGuess[i].color = 'green';\n        solutionArray[i] = null;\n      }\n    }); // find any yellow letters\n\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== 'green') {\n        formattedGuess[i].color = 'yellow';\n        solutionArray[solutionArray.indexOf(l.key)] = null;\n      }\n    });\n    return formattedGuess;\n  }; // add a new guess to the guesses state\n  // update the isCorrect state if the guess is correct\n  // add one to the turn state\n\n\n  const addNewGuess = formattedGuess => {\n    if (currentGuess === solution) {\n      setIsCorrect(true);\n    }\n\n    setGuesses(prevGuesses => {\n      let newGuesses = [...prevGuesses];\n      newGuesses[turn] = formattedGuess;\n      return newGuesses;\n    });\n    setHistory(prevHistory => {\n      return [...prevHistory, currentGuess];\n    });\n    setTurn(prevTurn => {\n      return prevTurn + 1;\n    });\n    setUsedKeys(prevUsedKeys => {\n      formattedGuess.forEach(l => {\n        const currentColor = prevUsedKeys[l.key];\n\n        if (l.color === 'green') {\n          prevUsedKeys[l.key] = 'green';\n          return;\n        }\n\n        if (l.color === 'yellow' && currentColor !== 'green') {\n          prevUsedKeys[l.key] = 'yellow';\n          return;\n        }\n\n        if (l.color === 'grey' && currentColor !== ('green' || 'yellow')) {\n          prevUsedKeys[l.key] = 'grey';\n          return;\n        }\n      });\n      return prevUsedKeys;\n    });\n    setCurrentGuess('');\n  }; // handle keyup event & track current guess\n  // if user presses enter, add the new guess\n\n\n  const handleKeyup = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === 'Enter') {\n      // only add guess if turn is less than 5\n      if (turn > 5) {\n        console.log('you used all your guesses!');\n        return;\n      } // do not allow duplicate words\n\n\n      if (history.includes(currentGuess)) {\n        console.log('you already tried that word.');\n        return;\n      } // check word is 5 chars\n\n\n      if (currentGuess.length !== 5) {\n        console.log('word must be 5 chars.');\n        return;\n      }\n\n      if (!wordBankList.includes(currentGuess)) {\n        console.log(\"not in word bank\");\n        alert('not in word bank');\n        return;\n      }\n\n      const formatted = formatGuess();\n      addNewGuess(formatted);\n    }\n\n    if (key === 'Backspace') {\n      setCurrentGuess(prev => prev.slice(0, -1));\n      return;\n    }\n\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => prev + key);\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    usedKeys,\n    handleKeyup\n  };\n};\n\n_s(useWordle, \"pbfF6lXJkK2HExjvqYaC4MQFrL4=\");\n\nexport default useWordle;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/src/hooks/useWordle.js"],"names":["useState","useWordle","solution","wordBank","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","Array","history","setHistory","isCorrect","setIsCorrect","usedKeys","setUsedKeys","wordBankList","map","w","i","formatGuess","solutionArray","formattedGuess","l","key","color","forEach","includes","indexOf","addNewGuess","prevGuesses","newGuesses","prevHistory","prevTurn","prevUsedKeys","currentColor","handleKeyup","console","log","length","alert","formatted","prev","slice","test"],"mappings":"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","sourcesContent":["import { useState } from 'react'\n\nconst useWordle = (solution, wordBank) => {\n  const [turn, setTurn] = useState(0) \n  const [currentGuess, setCurrentGuess] = useState('')\n  const [guesses, setGuesses] = useState([...Array(6)]) // each guess is an array\n  const [history, setHistory] = useState([]) // each guess is a string\n  const [isCorrect, setIsCorrect] = useState(false)\n  const [usedKeys, setUsedKeys] = useState({}) // {a: 'grey', b: 'green', c: 'yellow'} etc\n  const wordBankList = wordBank.map((w, i) => {\n    return w[\"word\"]\n  })\n\n  // format a guess into an array of letter objects \n  // e.g. [{key: 'a', color: 'yellow'}]\n  const formatGuess = () => {\n    let solutionArray = [...solution]\n    let formattedGuess = [...currentGuess].map((l) => {\n      return {key: l, color: 'grey'}\n    })\n\n    // find any green letters\n    formattedGuess.forEach((l, i) => {\n      if (solution[i] === l.key) {\n        formattedGuess[i].color = 'green'\n        solutionArray[i] = null\n      }\n    })\n    \n    // find any yellow letters\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== 'green') {\n        formattedGuess[i].color = 'yellow'\n        solutionArray[solutionArray.indexOf(l.key)] = null\n      }\n    })\n\n    return formattedGuess\n  }\n\n  // add a new guess to the guesses state\n  // update the isCorrect state if the guess is correct\n  // add one to the turn state\n  const addNewGuess = (formattedGuess) => {\n    if (currentGuess === solution) {\n      setIsCorrect(true)\n    }\n    setGuesses(prevGuesses => {\n      let newGuesses = [...prevGuesses]\n      newGuesses[turn] = formattedGuess\n      return newGuesses\n    })\n    setHistory(prevHistory => {\n      return [...prevHistory, currentGuess]\n    })\n    setTurn(prevTurn => {\n      return prevTurn + 1\n    })\n    setUsedKeys(prevUsedKeys => {\n      formattedGuess.forEach(l => {\n        const currentColor = prevUsedKeys[l.key]\n\n        if (l.color === 'green') {\n          prevUsedKeys[l.key] = 'green'\n          return\n        }\n        if (l.color === 'yellow' && currentColor !== 'green') {\n          prevUsedKeys[l.key] = 'yellow'\n          return\n        }\n        if (l.color === 'grey' && currentColor !== ('green' || 'yellow')) {\n          prevUsedKeys[l.key] = 'grey'\n          return\n        }\n      })\n\n      return prevUsedKeys\n    })\n    setCurrentGuess('')\n  }\n\n  // handle keyup event & track current guess\n  // if user presses enter, add the new guess\n  const handleKeyup = ({ key }) => {\n    if (key === 'Enter') {\n      // only add guess if turn is less than 5\n      if (turn > 5) {\n        console.log('you used all your guesses!')\n        return\n      }\n      // do not allow duplicate words\n      if (history.includes(currentGuess)) {\n        console.log('you already tried that word.')\n        return\n      }\n      // check word is 5 chars\n      if (currentGuess.length !== 5) {\n        console.log('word must be 5 chars.')\n        return\n      }\n      if (!wordBankList.includes(currentGuess)) {\n        console.log(\"not in word bank\")\n        alert('not in word bank')\n        return\n      }\n      const formatted = formatGuess()\n      addNewGuess(formatted)\n    }\n    if (key === 'Backspace') {\n      setCurrentGuess(prev => prev.slice(0, -1))\n      return\n    }\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => prev + key)\n      }\n    }\n  }\n\n  return {turn, currentGuess, guesses, isCorrect, usedKeys, handleKeyup}\n}\n\nexport default useWordle"]},"metadata":{},"sourceType":"module"}