{"ast":null,"code":"\"use strict\";\n\nconst config = require('./config');\n\nconst axios = require('axios');\n\nconst DEFAULT_ENGINE = \"davinci\";\n\nclass OpenAI {\n  constructor(api_key) {\n    this._api_key = api_key;\n  }\n\n  _send_request(url, method) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    let camelToUnderscore = key => {\n      let result = key.replace(/([A-Z])/g, \" $1\");\n      return result.split(' ').join('_').toLowerCase();\n    };\n\n    const data = {};\n\n    for (const key in opts) {\n      data[camelToUnderscore(key)] = opts[key];\n    }\n\n    return axios({\n      url,\n      headers: {\n        'Authorization': `Bearer ${this._api_key}`,\n        'Content-Type': 'application/json'\n      },\n      data: Object.keys(data).length ? data : '',\n      method\n    });\n  }\n\n  _check_embeddings_engine_name(engine) {\n    const availableEngineNames = ['text-similarity-ada-001', 'text-similarity-babbage-001', 'text-similarity-curie-001', 'text-similarity-davinci-001', 'text-search-ada-doc-001', 'text-search-ada-query-001', 'text-search-babbage-doc-001', 'text-search-babbage-query-001', 'text-search-curie-doc-001', 'text-search-curie-query-001', 'text-search-davinci-doc-001', 'text-search-davinci-query-001', 'code-search-ada-code-001', 'code-search-ada-text-001', 'code-search-babbage-code-001', 'code-search-babbage-text-001'];\n\n    if (!availableEngineNames.includes(engine)) {\n      throw new Error(`Unknown engine name for embeddings. Available engine names are ${availableEngineNames}`);\n    }\n  }\n\n  complete(opts) {\n    const url = config.completionURL(opts.engine || DEFAULT_ENGINE);\n    delete opts.engine;\n    return this._send_request(url, 'post', opts);\n  }\n\n  encode() {\n    // This method is no longer supported in Node>=v14. See\n    return Promise.resolve(new Array(2047).fill(\"\"));\n  }\n\n  search(opts) {\n    const url = config.searchURL(opts.engine || DEFAULT_ENGINE);\n    delete opts.engine;\n    return this._send_request(url, 'post', opts);\n  }\n\n  answers(opts) {\n    const url = config.answersUrl();\n    return this._send_request(url, 'post', opts);\n  }\n\n  classification(opts) {\n    const url = config.classificationsUrl();\n    return this._send_request(url, \"post\", opts);\n  }\n\n  engines() {\n    const url = config.enginesUrl();\n    return this._send_request(url, 'get');\n  }\n\n  engine(engine) {\n    const url = config.engineUrl(engine);\n    return this._send_request(url, 'get');\n  }\n\n  embeddings(opts) {\n    this._check_embeddings_engine_name(opts.engine);\n\n    const url = config.embeddingsUrl(opts.engine);\n    return this._send_request(url, 'post', opts);\n  }\n\n}\n\nmodule.exports = OpenAI;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/React-Wordle-lesson-16/node_modules/openai-api/index.js"],"names":["config","require","axios","DEFAULT_ENGINE","OpenAI","constructor","api_key","_api_key","_send_request","url","method","opts","camelToUnderscore","key","result","replace","split","join","toLowerCase","data","headers","Object","keys","length","_check_embeddings_engine_name","engine","availableEngineNames","includes","Error","complete","completionURL","encode","Promise","resolve","Array","fill","search","searchURL","answers","answersUrl","classification","classificationsUrl","engines","enginesUrl","engineUrl","embeddings","embeddingsUrl","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst config = require('./config');\nconst axios = require('axios');\n\nconst DEFAULT_ENGINE = \"davinci\";\n\nclass OpenAI {\n  constructor(api_key) {\n    this._api_key = api_key;\n  }\n\n  _send_request(url, method, opts = {}) {\n    let camelToUnderscore = (key) => {\n      let result = key.replace(/([A-Z])/g, \" $1\");\n      return result.split(' ').join('_').toLowerCase();\n    };\n\n    const data = {};\n    for (const key in opts) {\n      data[camelToUnderscore(key)] = opts[key];\n    }\n\n    return axios({\n      url,\n      headers: {\n        'Authorization': `Bearer ${this._api_key}`,\n        'Content-Type': 'application/json'\n      },\n      data: Object.keys(data).length ? data : '',\n      method,\n    });\n  }\n\n  _check_embeddings_engine_name(engine) {\n    const availableEngineNames = [\n      'text-similarity-ada-001',\n      'text-similarity-babbage-001',\n      'text-similarity-curie-001',\n      'text-similarity-davinci-001',\n      'text-search-ada-doc-001',\n      'text-search-ada-query-001',\n      'text-search-babbage-doc-001',\n      'text-search-babbage-query-001',\n      'text-search-curie-doc-001',\n      'text-search-curie-query-001',\n      'text-search-davinci-doc-001',\n      'text-search-davinci-query-001',\n      'code-search-ada-code-001',\n      'code-search-ada-text-001',\n      'code-search-babbage-code-001',\n      'code-search-babbage-text-001',\n    ];\n\n    if (!availableEngineNames.includes(engine)) {\n      throw new Error(`Unknown engine name for embeddings. Available engine names are ${availableEngineNames}`);\n    }\n  }\n\n  complete(opts) {\n    const url = config.completionURL(opts.engine || DEFAULT_ENGINE);\n    delete opts.engine;\n\n    return this._send_request(url, 'post', opts);\n  }\n\n  encode() {\n    // This method is no longer supported in Node>=v14. See\n    return Promise.resolve(new Array(2047).fill(\"\"));\n  }\n\n  search(opts) {\n    const url = config.searchURL(opts.engine || DEFAULT_ENGINE);\n    delete opts.engine;\n    return this._send_request(url, 'post', opts);\n  }\n\n  answers(opts) {\n    const url = config.answersUrl();\n    return this._send_request(url, 'post', opts);\n  }\n\n  classification(opts) {\n    const url = config.classificationsUrl();\n    return this._send_request(url, \"post\", opts);\n  }\n\n  engines() {\n    const url = config.enginesUrl();\n    return this._send_request(url, 'get');\n  }\n\n  engine(engine) {\n    const url = config.engineUrl(engine);\n    return this._send_request(url, 'get');\n  }\n\n  embeddings(opts) {\n    this._check_embeddings_engine_name(opts.engine);\n\n    const url = config.embeddingsUrl(opts.engine);\n    return this._send_request(url, 'post', opts);\n  }\n}\n\nmodule.exports = OpenAI;\n"]},"metadata":{},"sourceType":"script"}