{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/**\n * @param {string} path path\n * @returns {{paths: string[], segments: string[]}}} paths and segments\n */\n\nmodule.exports = function getPaths(path) {\n  if (path === \"/\") return {\n    paths: [\"/\"],\n    segments: [\"\"]\n  };\n  const parts = path.split(/(.*?[\\\\/]+)/);\n  const paths = [path];\n  const segments = [parts[parts.length - 1]];\n  let part = parts[parts.length - 1];\n  path = path.substring(0, path.length - part.length - 1);\n\n  for (let i = parts.length - 2; i > 2; i -= 2) {\n    paths.push(path);\n    part = parts[i];\n    path = path.substring(0, path.length - part.length) || \"/\";\n    segments.push(part.slice(0, -1));\n  }\n\n  part = parts[1];\n  segments.push(part);\n  paths.push(part);\n  return {\n    paths: paths,\n    segments: segments\n  };\n};\n/**\n * @param {string} path path\n * @returns {string|null} basename or null\n */\n\n\nmodule.exports.basename = function basename(path) {\n  const i = path.lastIndexOf(\"/\"),\n        j = path.lastIndexOf(\"\\\\\");\n  const p = i < 0 ? j : j < 0 ? i : i < j ? j : i;\n  if (p < 0) return null;\n  const s = path.slice(p + 1);\n  return s;\n};","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/enhanced-resolve/lib/getPaths.js"],"names":["module","exports","getPaths","path","paths","segments","parts","split","length","part","substring","i","push","slice","basename","lastIndexOf","j","p","s"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACxC,MAAIA,IAAI,KAAK,GAAb,EAAkB,OAAO;AAAEC,IAAAA,KAAK,EAAE,CAAC,GAAD,CAAT;AAAgBC,IAAAA,QAAQ,EAAE,CAAC,EAAD;AAA1B,GAAP;AAClB,QAAMC,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAW,aAAX,CAAd;AACA,QAAMH,KAAK,GAAG,CAACD,IAAD,CAAd;AACA,QAAME,QAAQ,GAAG,CAACC,KAAK,CAACA,KAAK,CAACE,MAAN,GAAe,CAAhB,CAAN,CAAjB;AACA,MAAIC,IAAI,GAAGH,KAAK,CAACA,KAAK,CAACE,MAAN,GAAe,CAAhB,CAAhB;AACAL,EAAAA,IAAI,GAAGA,IAAI,CAACO,SAAL,CAAe,CAAf,EAAkBP,IAAI,CAACK,MAAL,GAAcC,IAAI,CAACD,MAAnB,GAA4B,CAA9C,CAAP;;AACA,OAAK,IAAIG,CAAC,GAAGL,KAAK,CAACE,MAAN,GAAe,CAA5B,EAA+BG,CAAC,GAAG,CAAnC,EAAsCA,CAAC,IAAI,CAA3C,EAA8C;AAC7CP,IAAAA,KAAK,CAACQ,IAAN,CAAWT,IAAX;AACAM,IAAAA,IAAI,GAAGH,KAAK,CAACK,CAAD,CAAZ;AACAR,IAAAA,IAAI,GAAGA,IAAI,CAACO,SAAL,CAAe,CAAf,EAAkBP,IAAI,CAACK,MAAL,GAAcC,IAAI,CAACD,MAArC,KAAgD,GAAvD;AACAH,IAAAA,QAAQ,CAACO,IAAT,CAAcH,IAAI,CAACI,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAd;AACA;;AACDJ,EAAAA,IAAI,GAAGH,KAAK,CAAC,CAAD,CAAZ;AACAD,EAAAA,QAAQ,CAACO,IAAT,CAAcH,IAAd;AACAL,EAAAA,KAAK,CAACQ,IAAN,CAAWH,IAAX;AACA,SAAO;AACNL,IAAAA,KAAK,EAAEA,KADD;AAENC,IAAAA,QAAQ,EAAEA;AAFJ,GAAP;AAIA,CApBD;AAsBA;AACA;AACA;AACA;;;AACAL,MAAM,CAACC,OAAP,CAAea,QAAf,GAA0B,SAASA,QAAT,CAAkBX,IAAlB,EAAwB;AACjD,QAAMQ,CAAC,GAAGR,IAAI,CAACY,WAAL,CAAiB,GAAjB,CAAV;AAAA,QACCC,CAAC,GAAGb,IAAI,CAACY,WAAL,CAAiB,IAAjB,CADL;AAEA,QAAME,CAAC,GAAGN,CAAC,GAAG,CAAJ,GAAQK,CAAR,GAAYA,CAAC,GAAG,CAAJ,GAAQL,CAAR,GAAYA,CAAC,GAAGK,CAAJ,GAAQA,CAAR,GAAYL,CAA9C;AACA,MAAIM,CAAC,GAAG,CAAR,EAAW,OAAO,IAAP;AACX,QAAMC,CAAC,GAAGf,IAAI,CAACU,KAAL,CAAWI,CAAC,GAAG,CAAf,CAAV;AACA,SAAOC,CAAP;AACA,CAPD","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/**\n * @param {string} path path\n * @returns {{paths: string[], segments: string[]}}} paths and segments\n */\nmodule.exports = function getPaths(path) {\n\tif (path === \"/\") return { paths: [\"/\"], segments: [\"\"] };\n\tconst parts = path.split(/(.*?[\\\\/]+)/);\n\tconst paths = [path];\n\tconst segments = [parts[parts.length - 1]];\n\tlet part = parts[parts.length - 1];\n\tpath = path.substring(0, path.length - part.length - 1);\n\tfor (let i = parts.length - 2; i > 2; i -= 2) {\n\t\tpaths.push(path);\n\t\tpart = parts[i];\n\t\tpath = path.substring(0, path.length - part.length) || \"/\";\n\t\tsegments.push(part.slice(0, -1));\n\t}\n\tpart = parts[1];\n\tsegments.push(part);\n\tpaths.push(part);\n\treturn {\n\t\tpaths: paths,\n\t\tsegments: segments\n\t};\n};\n\n/**\n * @param {string} path path\n * @returns {string|null} basename or null\n */\nmodule.exports.basename = function basename(path) {\n\tconst i = path.lastIndexOf(\"/\"),\n\t\tj = path.lastIndexOf(\"\\\\\");\n\tconst p = i < 0 ? j : j < 0 ? i : i < j ? j : i;\n\tif (p < 0) return null;\n\tconst s = path.slice(p + 1);\n\treturn s;\n};\n"]},"metadata":{},"sourceType":"script"}