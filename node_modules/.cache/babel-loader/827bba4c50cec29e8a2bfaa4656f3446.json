{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nconst NormalModule = require(\"./NormalModule\");\n\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\n/** @typedef {import(\"../declarations/plugins/LoaderOptionsPlugin\").LoaderOptionsPluginOptions} LoaderOptionsPluginOptions */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/** @typedef {import(\"./ModuleFilenameHelpers\").MatchObject} MatchObject  */\n\n\nconst validate = createSchemaValidation(require(\"../schemas/plugins/LoaderOptionsPlugin.check.js\"), () => require(\"../schemas/plugins/LoaderOptionsPlugin.json\"), {\n  name: \"Loader Options Plugin\",\n  baseDataPath: \"options\"\n});\n\nclass LoaderOptionsPlugin {\n  /**\n   * @param {LoaderOptionsPluginOptions & MatchObject} options options object\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    validate(options); // If no options are set then generate empty options object\n\n    if (typeof options !== \"object\") options = {};\n\n    if (!options.test) {\n      // This is mocking a RegExp object which always returns true\n      // TODO: Figure out how to do `as unknown as RegExp` for this line\n      // in JSDoc equivalent\n\n      /** @type {any} */\n      const defaultTrueMockRegExp = {\n        test: () => true\n      };\n      /** @type {RegExp} */\n\n      options.test = defaultTrueMockRegExp;\n    }\n\n    this.options = options;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const options = this.options;\n    compiler.hooks.compilation.tap(\"LoaderOptionsPlugin\", compilation => {\n      NormalModule.getCompilationHooks(compilation).loader.tap(\"LoaderOptionsPlugin\", (context, module) => {\n        const resource = module.resource;\n        if (!resource) return;\n        const i = resource.indexOf(\"?\");\n\n        if (ModuleFilenameHelpers.matchObject(options, i < 0 ? resource : resource.slice(0, i))) {\n          for (const key of Object.keys(options)) {\n            if (key === \"include\" || key === \"exclude\" || key === \"test\") {\n              continue;\n            }\n\n            context[key] = options[key];\n          }\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = LoaderOptionsPlugin;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/LoaderOptionsPlugin.js"],"names":["ModuleFilenameHelpers","require","NormalModule","createSchemaValidation","validate","name","baseDataPath","LoaderOptionsPlugin","constructor","options","test","defaultTrueMockRegExp","apply","compiler","hooks","compilation","tap","getCompilationHooks","loader","context","module","resource","i","indexOf","matchObject","slice","key","Object","keys","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,yBAAD,CAArC;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAME,sBAAsB,GAAGF,OAAO,CAAC,iCAAD,CAAtC;AAEA;;AACA;;AACA;;;AAEA,MAAMG,QAAQ,GAAGD,sBAAsB,CACtCF,OAAO,CAAC,iDAAD,CAD+B,EAEtC,MAAMA,OAAO,CAAC,6CAAD,CAFyB,EAGtC;AACCI,EAAAA,IAAI,EAAE,uBADP;AAECC,EAAAA,YAAY,EAAE;AAFf,CAHsC,CAAvC;;AASA,MAAMC,mBAAN,CAA0B;AACzB;AACD;AACA;AACCC,EAAAA,WAAW,GAAe;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACzBL,IAAAA,QAAQ,CAACK,OAAD,CAAR,CADyB,CAEzB;;AACA,QAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiCA,OAAO,GAAG,EAAV;;AACjC,QAAI,CAACA,OAAO,CAACC,IAAb,EAAmB;AAClB;AACA;AACA;;AACA;AACA,YAAMC,qBAAqB,GAAG;AAC7BD,QAAAA,IAAI,EAAE,MAAM;AADiB,OAA9B;AAIA;;AACAD,MAAAA,OAAO,CAACC,IAAR,GAAeC,qBAAf;AACA;;AACD,SAAKF,OAAL,GAAeA,OAAf;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCG,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAMJ,OAAO,GAAG,KAAKA,OAArB;AACAI,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,qBAA/B,EAAsDD,WAAW,IAAI;AACpEb,MAAAA,YAAY,CAACe,mBAAb,CAAiCF,WAAjC,EAA8CG,MAA9C,CAAqDF,GAArD,CACC,qBADD,EAEC,CAACG,OAAD,EAAUC,MAAV,KAAqB;AACpB,cAAMC,QAAQ,GAAGD,MAAM,CAACC,QAAxB;AACA,YAAI,CAACA,QAAL,EAAe;AACf,cAAMC,CAAC,GAAGD,QAAQ,CAACE,OAAT,CAAiB,GAAjB,CAAV;;AACA,YACCvB,qBAAqB,CAACwB,WAAtB,CACCf,OADD,EAECa,CAAC,GAAG,CAAJ,GAAQD,QAAR,GAAmBA,QAAQ,CAACI,KAAT,CAAe,CAAf,EAAkBH,CAAlB,CAFpB,CADD,EAKE;AACD,eAAK,MAAMI,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYnB,OAAZ,CAAlB,EAAwC;AACvC,gBAAIiB,GAAG,KAAK,SAAR,IAAqBA,GAAG,KAAK,SAA7B,IAA0CA,GAAG,KAAK,MAAtD,EAA8D;AAC7D;AACA;;AACDP,YAAAA,OAAO,CAACO,GAAD,CAAP,GAAejB,OAAO,CAACiB,GAAD,CAAtB;AACA;AACD;AACD,OAnBF;AAqBA,KAtBD;AAuBA;;AArDwB;;AAwD1BN,MAAM,CAACS,OAAP,GAAiBtB,mBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\nconst NormalModule = require(\"./NormalModule\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\n\n/** @typedef {import(\"../declarations/plugins/LoaderOptionsPlugin\").LoaderOptionsPluginOptions} LoaderOptionsPluginOptions */\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./ModuleFilenameHelpers\").MatchObject} MatchObject  */\n\nconst validate = createSchemaValidation(\n\trequire(\"../schemas/plugins/LoaderOptionsPlugin.check.js\"),\n\t() => require(\"../schemas/plugins/LoaderOptionsPlugin.json\"),\n\t{\n\t\tname: \"Loader Options Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nclass LoaderOptionsPlugin {\n\t/**\n\t * @param {LoaderOptionsPluginOptions & MatchObject} options options object\n\t */\n\tconstructor(options = {}) {\n\t\tvalidate(options);\n\t\t// If no options are set then generate empty options object\n\t\tif (typeof options !== \"object\") options = {};\n\t\tif (!options.test) {\n\t\t\t// This is mocking a RegExp object which always returns true\n\t\t\t// TODO: Figure out how to do `as unknown as RegExp` for this line\n\t\t\t// in JSDoc equivalent\n\t\t\t/** @type {any} */\n\t\t\tconst defaultTrueMockRegExp = {\n\t\t\t\ttest: () => true\n\t\t\t};\n\n\t\t\t/** @type {RegExp} */\n\t\t\toptions.test = defaultTrueMockRegExp;\n\t\t}\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tcompiler.hooks.compilation.tap(\"LoaderOptionsPlugin\", compilation => {\n\t\t\tNormalModule.getCompilationHooks(compilation).loader.tap(\n\t\t\t\t\"LoaderOptionsPlugin\",\n\t\t\t\t(context, module) => {\n\t\t\t\t\tconst resource = module.resource;\n\t\t\t\t\tif (!resource) return;\n\t\t\t\t\tconst i = resource.indexOf(\"?\");\n\t\t\t\t\tif (\n\t\t\t\t\t\tModuleFilenameHelpers.matchObject(\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\ti < 0 ? resource : resource.slice(0, i)\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tfor (const key of Object.keys(options)) {\n\t\t\t\t\t\t\tif (key === \"include\" || key === \"exclude\" || key === \"test\") {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontext[key] = options[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = LoaderOptionsPlugin;\n"]},"metadata":{},"sourceType":"script"}