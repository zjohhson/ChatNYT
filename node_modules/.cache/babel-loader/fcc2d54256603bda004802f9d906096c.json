{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\n\nconst {\n  PathType,\n  getType\n} = require(\"./util/path\");\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\n/** @typedef {string | Array<string> | false} Alias */\n\n/** @typedef {{alias: Alias, name: string, onlyModule?: boolean}} AliasOption */\n\n\nmodule.exports = class AliasPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {AliasOption | Array<AliasOption>} options options\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, options, target) {\n    this.source = source;\n    this.options = Array.isArray(options) ? options : [options];\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    /**\n     * @param {string} maybeAbsolutePath path\n     * @returns {null|string} absolute path with slash ending\n     */\n\n    const getAbsolutePathWithSlashEnding = maybeAbsolutePath => {\n      const type = getType(maybeAbsolutePath);\n\n      if (type === PathType.AbsolutePosix || type === PathType.AbsoluteWin) {\n        return resolver.join(maybeAbsolutePath, \"_\").slice(0, -1);\n      }\n\n      return null;\n    };\n    /**\n     * @param {string} path path\n     * @param {string} maybeSubPath sub path\n     * @returns {boolean} true, if path is sub path\n     */\n\n\n    const isSubPath = (path, maybeSubPath) => {\n      const absolutePath = getAbsolutePathWithSlashEnding(maybeSubPath);\n      if (!absolutePath) return false;\n      return path.startsWith(absolutePath);\n    };\n\n    resolver.getHook(this.source).tapAsync(\"AliasPlugin\", (request, resolveContext, callback) => {\n      const innerRequest = request.request || request.path;\n      if (!innerRequest) return callback();\n      forEachBail(this.options, (item, callback) => {\n        /** @type {boolean} */\n        let shouldStop = false;\n\n        if (innerRequest === item.name || !item.onlyModule && (request.request ? innerRequest.startsWith(`${item.name}/`) : isSubPath(innerRequest, item.name))) {\n          /** @type {string} */\n          const remainingRequest = innerRequest.slice(item.name.length);\n          /**\n           * @param {Alias} alias alias\n           * @param {(err?: null|Error, result?: null|ResolveRequest) => void} callback callback\n           * @returns {void}\n           */\n\n          const resolveWithAlias = (alias, callback) => {\n            if (alias === false) {\n              /** @type {ResolveRequest} */\n              const ignoreObj = { ...request,\n                path: false\n              };\n\n              if (typeof resolveContext.yield === \"function\") {\n                resolveContext.yield(ignoreObj);\n                return callback(null, null);\n              }\n\n              return callback(null, ignoreObj);\n            }\n\n            if (innerRequest !== alias && !innerRequest.startsWith(alias + \"/\")) {\n              shouldStop = true;\n              const newRequestStr = alias + remainingRequest;\n              /** @type {ResolveRequest} */\n\n              const obj = { ...request,\n                request: newRequestStr,\n                fullySpecified: false\n              };\n              return resolver.doResolve(target, obj, \"aliased with mapping '\" + item.name + \"': '\" + alias + \"' to '\" + newRequestStr + \"'\", resolveContext, (err, result) => {\n                if (err) return callback(err);\n                if (result) return callback(null, result);\n                return callback();\n              });\n            }\n\n            return callback();\n          };\n          /**\n           * @param {null|Error} [err] error\n           * @param {null|ResolveRequest} [result] result\n           * @returns {void}\n           */\n\n\n          const stoppingCallback = (err, result) => {\n            if (err) return callback(err);\n            if (result) return callback(null, result); // Don't allow other aliasing or raw request\n\n            if (shouldStop) return callback(null, null);\n            return callback();\n          };\n\n          if (Array.isArray(item.alias)) {\n            return forEachBail(item.alias, resolveWithAlias, stoppingCallback);\n          } else {\n            return resolveWithAlias(item.alias, stoppingCallback);\n          }\n        }\n\n        return callback();\n      }, callback);\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/enhanced-resolve/lib/AliasPlugin.js"],"names":["forEachBail","require","PathType","getType","module","exports","AliasPlugin","constructor","source","options","target","Array","isArray","apply","resolver","ensureHook","getAbsolutePathWithSlashEnding","maybeAbsolutePath","type","AbsolutePosix","AbsoluteWin","join","slice","isSubPath","path","maybeSubPath","absolutePath","startsWith","getHook","tapAsync","request","resolveContext","callback","innerRequest","item","shouldStop","name","onlyModule","remainingRequest","length","resolveWithAlias","alias","ignoreObj","yield","newRequestStr","obj","fullySpecified","doResolve","err","result","stoppingCallback"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\nconst { PathType, getType } = require(\"./util/path\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n/** @typedef {string | Array<string> | false} Alias */\n/** @typedef {{alias: Alias, name: string, onlyModule?: boolean}} AliasOption */\n\nmodule.exports = class AliasPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {AliasOption | Array<AliasOption>} options options\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, options, target) {\n\t\tthis.source = source;\n\t\tthis.options = Array.isArray(options) ? options : [options];\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\t/**\n\t\t * @param {string} maybeAbsolutePath path\n\t\t * @returns {null|string} absolute path with slash ending\n\t\t */\n\t\tconst getAbsolutePathWithSlashEnding = maybeAbsolutePath => {\n\t\t\tconst type = getType(maybeAbsolutePath);\n\t\t\tif (type === PathType.AbsolutePosix || type === PathType.AbsoluteWin) {\n\t\t\t\treturn resolver.join(maybeAbsolutePath, \"_\").slice(0, -1);\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\t/**\n\t\t * @param {string} path path\n\t\t * @param {string} maybeSubPath sub path\n\t\t * @returns {boolean} true, if path is sub path\n\t\t */\n\t\tconst isSubPath = (path, maybeSubPath) => {\n\t\t\tconst absolutePath = getAbsolutePathWithSlashEnding(maybeSubPath);\n\t\t\tif (!absolutePath) return false;\n\t\t\treturn path.startsWith(absolutePath);\n\t\t};\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"AliasPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst innerRequest = request.request || request.path;\n\t\t\t\tif (!innerRequest) return callback();\n\t\t\t\tforEachBail(\n\t\t\t\t\tthis.options,\n\t\t\t\t\t(item, callback) => {\n\t\t\t\t\t\t/** @type {boolean} */\n\t\t\t\t\t\tlet shouldStop = false;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tinnerRequest === item.name ||\n\t\t\t\t\t\t\t(!item.onlyModule &&\n\t\t\t\t\t\t\t\t(request.request\n\t\t\t\t\t\t\t\t\t? innerRequest.startsWith(`${item.name}/`)\n\t\t\t\t\t\t\t\t\t: isSubPath(innerRequest, item.name)))\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t/** @type {string} */\n\t\t\t\t\t\t\tconst remainingRequest = innerRequest.slice(item.name.length);\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @param {Alias} alias alias\n\t\t\t\t\t\t\t * @param {(err?: null|Error, result?: null|ResolveRequest) => void} callback callback\n\t\t\t\t\t\t\t * @returns {void}\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tconst resolveWithAlias = (alias, callback) => {\n\t\t\t\t\t\t\t\tif (alias === false) {\n\t\t\t\t\t\t\t\t\t/** @type {ResolveRequest} */\n\t\t\t\t\t\t\t\t\tconst ignoreObj = {\n\t\t\t\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\t\t\t\tpath: false\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tif (typeof resolveContext.yield === \"function\") {\n\t\t\t\t\t\t\t\t\t\tresolveContext.yield(ignoreObj);\n\t\t\t\t\t\t\t\t\t\treturn callback(null, null);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn callback(null, ignoreObj);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tinnerRequest !== alias &&\n\t\t\t\t\t\t\t\t\t!innerRequest.startsWith(alias + \"/\")\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tshouldStop = true;\n\t\t\t\t\t\t\t\t\tconst newRequestStr = alias + remainingRequest;\n\t\t\t\t\t\t\t\t\t/** @type {ResolveRequest} */\n\t\t\t\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\t\t\t\trequest: newRequestStr,\n\t\t\t\t\t\t\t\t\t\tfullySpecified: false\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\treturn resolver.doResolve(\n\t\t\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\t\t\t\"aliased with mapping '\" +\n\t\t\t\t\t\t\t\t\t\t\titem.name +\n\t\t\t\t\t\t\t\t\t\t\t\"': '\" +\n\t\t\t\t\t\t\t\t\t\t\talias +\n\t\t\t\t\t\t\t\t\t\t\t\"' to '\" +\n\t\t\t\t\t\t\t\t\t\t\tnewRequestStr +\n\t\t\t\t\t\t\t\t\t\t\t\"'\",\n\t\t\t\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\t\t\t\t\tif (result) return callback(null, result);\n\t\t\t\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @param {null|Error} [err] error\n\t\t\t\t\t\t\t * @param {null|ResolveRequest} [result] result\n\t\t\t\t\t\t\t * @returns {void}\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tconst stoppingCallback = (err, result) => {\n\t\t\t\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\t\t\t\tif (result) return callback(null, result);\n\t\t\t\t\t\t\t\t// Don't allow other aliasing or raw request\n\t\t\t\t\t\t\t\tif (shouldStop) return callback(null, null);\n\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (Array.isArray(item.alias)) {\n\t\t\t\t\t\t\t\treturn forEachBail(\n\t\t\t\t\t\t\t\t\titem.alias,\n\t\t\t\t\t\t\t\t\tresolveWithAlias,\n\t\t\t\t\t\t\t\t\tstoppingCallback\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn resolveWithAlias(item.alias, stoppingCallback);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t},\n\t\t\t\t\tcallback\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}