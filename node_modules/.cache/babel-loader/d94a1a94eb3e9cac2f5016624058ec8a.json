{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst makeSerializable = require(\"../util/makeSerializable\");\n\nconst ModuleDependency = require(\"./ModuleDependency\");\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n\n/** @typedef {import(\"../AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n\n/** @typedef {import(\"../Dependency\").ReferencedExport} ReferencedExport */\n\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\n/** @typedef {import(\"../Entrypoint\")} Entrypoint */\n\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n\n/** @typedef {import(\"../javascript/JavascriptParser\").Range} Range */\n\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\n\nclass WorkerDependency extends ModuleDependency {\n  /**\n   * @param {string} request request\n   * @param {Range} range range\n   * @param {Object} workerDependencyOptions options\n   * @param {string} workerDependencyOptions.publicPath public path for the worker\n   */\n  constructor(request, range, workerDependencyOptions) {\n    super(request);\n    this.range = range; // If options are updated, don't forget to update the hash and serialization functions\n\n    this.options = workerDependencyOptions;\n    /** Cache the hash */\n\n    this._hashUpdate = undefined;\n  }\n  /**\n   * Returns list of exports referenced by this dependency\n   * @param {ModuleGraph} moduleGraph module graph\n   * @param {RuntimeSpec} runtime the runtime for which the module is analysed\n   * @returns {(string[] | ReferencedExport)[]} referenced exports\n   */\n\n\n  getReferencedExports(moduleGraph, runtime) {\n    return Dependency.NO_EXPORTS_REFERENCED;\n  }\n\n  get type() {\n    return \"new Worker()\";\n  }\n\n  get category() {\n    return \"worker\";\n  }\n  /**\n   * Update the hash\n   * @param {Hash} hash hash to be updated\n   * @param {UpdateHashContext} context context\n   * @returns {void}\n   */\n\n\n  updateHash(hash, context) {\n    if (this._hashUpdate === undefined) {\n      this._hashUpdate = JSON.stringify(this.options);\n    }\n\n    hash.update(this._hashUpdate);\n  }\n  /**\n   * @param {ObjectSerializerContext} context context\n   */\n\n\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.options);\n    super.serialize(context);\n  }\n  /**\n   * @param {ObjectDeserializerContext} context context\n   */\n\n\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.options = read();\n    super.deserialize(context);\n  }\n\n}\n\nWorkerDependency.Template = class WorkerDependencyTemplate extends ModuleDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, templateContext) {\n    const {\n      chunkGraph,\n      moduleGraph,\n      runtimeRequirements\n    } = templateContext;\n    const dep =\n    /** @type {WorkerDependency} */\n    dependency;\n    const block =\n    /** @type {AsyncDependenciesBlock} */\n    moduleGraph.getParentBlock(dependency);\n    const entrypoint =\n    /** @type {Entrypoint} */\n    chunkGraph.getBlockChunkGroup(block);\n    const chunk = entrypoint.getEntrypointChunk(); // We use the workerPublicPath option if provided, else we fallback to the RuntimeGlobal publicPath\n\n    const workerImportBaseUrl = dep.options.publicPath ? `\"${dep.options.publicPath}\"` : RuntimeGlobals.publicPath;\n    runtimeRequirements.add(RuntimeGlobals.publicPath);\n    runtimeRequirements.add(RuntimeGlobals.baseURI);\n    runtimeRequirements.add(RuntimeGlobals.getChunkScriptFilename);\n    source.replace(dep.range[0], dep.range[1] - 1, `/* worker import */ ${workerImportBaseUrl} + ${RuntimeGlobals.getChunkScriptFilename}(${JSON.stringify(chunk.id)}), ${RuntimeGlobals.baseURI}`);\n  }\n\n};\nmakeSerializable(WorkerDependency, \"webpack/lib/dependencies/WorkerDependency\");\nmodule.exports = WorkerDependency;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/dependencies/WorkerDependency.js"],"names":["Dependency","require","RuntimeGlobals","makeSerializable","ModuleDependency","WorkerDependency","constructor","request","range","workerDependencyOptions","options","_hashUpdate","undefined","getReferencedExports","moduleGraph","runtime","NO_EXPORTS_REFERENCED","type","category","updateHash","hash","context","JSON","stringify","update","serialize","write","deserialize","read","Template","WorkerDependencyTemplate","apply","dependency","source","templateContext","chunkGraph","runtimeRequirements","dep","block","getParentBlock","entrypoint","getBlockChunkGroup","chunk","getEntrypointChunk","workerImportBaseUrl","publicPath","add","baseURI","getChunkScriptFilename","replace","id","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst ModuleDependency = require(\"./ModuleDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../Dependency\").ReferencedExport} ReferencedExport */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../Entrypoint\")} Entrypoint */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../javascript/JavascriptParser\").Range} Range */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\nclass WorkerDependency extends ModuleDependency {\n\t/**\n\t * @param {string} request request\n\t * @param {Range} range range\n\t * @param {Object} workerDependencyOptions options\n\t * @param {string} workerDependencyOptions.publicPath public path for the worker\n\t */\n\tconstructor(request, range, workerDependencyOptions) {\n\t\tsuper(request);\n\t\tthis.range = range;\n\t\t// If options are updated, don't forget to update the hash and serialization functions\n\t\tthis.options = workerDependencyOptions;\n\t\t/** Cache the hash */\n\t\tthis._hashUpdate = undefined;\n\t}\n\n\t/**\n\t * Returns list of exports referenced by this dependency\n\t * @param {ModuleGraph} moduleGraph module graph\n\t * @param {RuntimeSpec} runtime the runtime for which the module is analysed\n\t * @returns {(string[] | ReferencedExport)[]} referenced exports\n\t */\n\tgetReferencedExports(moduleGraph, runtime) {\n\t\treturn Dependency.NO_EXPORTS_REFERENCED;\n\t}\n\n\tget type() {\n\t\treturn \"new Worker()\";\n\t}\n\n\tget category() {\n\t\treturn \"worker\";\n\t}\n\n\t/**\n\t * Update the hash\n\t * @param {Hash} hash hash to be updated\n\t * @param {UpdateHashContext} context context\n\t * @returns {void}\n\t */\n\tupdateHash(hash, context) {\n\t\tif (this._hashUpdate === undefined) {\n\t\t\tthis._hashUpdate = JSON.stringify(this.options);\n\t\t}\n\t\thash.update(this._hashUpdate);\n\t}\n\n\t/**\n\t * @param {ObjectSerializerContext} context context\n\t */\n\tserialize(context) {\n\t\tconst { write } = context;\n\t\twrite(this.options);\n\t\tsuper.serialize(context);\n\t}\n\n\t/**\n\t * @param {ObjectDeserializerContext} context context\n\t */\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\t\tthis.options = read();\n\t\tsuper.deserialize(context);\n\t}\n}\n\nWorkerDependency.Template = class WorkerDependencyTemplate extends (\n\tModuleDependency.Template\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(dependency, source, templateContext) {\n\t\tconst { chunkGraph, moduleGraph, runtimeRequirements } = templateContext;\n\t\tconst dep = /** @type {WorkerDependency} */ (dependency);\n\t\tconst block = /** @type {AsyncDependenciesBlock} */ (\n\t\t\tmoduleGraph.getParentBlock(dependency)\n\t\t);\n\t\tconst entrypoint = /** @type {Entrypoint} */ (\n\t\t\tchunkGraph.getBlockChunkGroup(block)\n\t\t);\n\t\tconst chunk = entrypoint.getEntrypointChunk();\n\t\t// We use the workerPublicPath option if provided, else we fallback to the RuntimeGlobal publicPath\n\t\tconst workerImportBaseUrl = dep.options.publicPath\n\t\t\t? `\"${dep.options.publicPath}\"`\n\t\t\t: RuntimeGlobals.publicPath;\n\n\t\truntimeRequirements.add(RuntimeGlobals.publicPath);\n\t\truntimeRequirements.add(RuntimeGlobals.baseURI);\n\t\truntimeRequirements.add(RuntimeGlobals.getChunkScriptFilename);\n\n\t\tsource.replace(\n\t\t\tdep.range[0],\n\t\t\tdep.range[1] - 1,\n\t\t\t`/* worker import */ ${workerImportBaseUrl} + ${\n\t\t\t\tRuntimeGlobals.getChunkScriptFilename\n\t\t\t}(${JSON.stringify(chunk.id)}), ${RuntimeGlobals.baseURI}`\n\t\t);\n\t}\n};\n\nmakeSerializable(WorkerDependency, \"webpack/lib/dependencies/WorkerDependency\");\n\nmodule.exports = WorkerDependency;\n"]},"metadata":{},"sourceType":"script"}