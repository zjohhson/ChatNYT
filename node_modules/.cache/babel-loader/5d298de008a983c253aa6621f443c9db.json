{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst loaderFlag = \"LOADER_EXECUTION\";\nconst webpackOptionsFlag = \"WEBPACK_OPTIONS\";\n/**\n * @param {string} stack stack trace\n * @param {string} flag flag to cut off\n * @returns {string} stack trace without the specified flag included\n */\n\nconst cutOffByFlag = (stack, flag) => {\n  const errorStack = stack.split(\"\\n\");\n\n  for (let i = 0; i < errorStack.length; i++) {\n    if (errorStack[i].includes(flag)) {\n      errorStack.length = i;\n    }\n  }\n\n  return errorStack.join(\"\\n\");\n};\n/**\n * @param {string} stack stack trace\n * @returns {string} stack trace without the loader execution flag included\n */\n\n\nconst cutOffLoaderExecution = stack => cutOffByFlag(stack, loaderFlag);\n/**\n * @param {string} stack stack trace\n * @returns {string} stack trace without the webpack options flag included\n */\n\n\nconst cutOffWebpackOptions = stack => cutOffByFlag(stack, webpackOptionsFlag);\n/**\n * @param {string} stack stack trace\n * @param {string} message error message\n * @returns {string} stack trace without the message included\n */\n\n\nconst cutOffMultilineMessage = (stack, message) => {\n  const stackSplitByLines = stack.split(\"\\n\");\n  const messageSplitByLines = message.split(\"\\n\");\n  /** @type {string[]} */\n\n  const result = [];\n  stackSplitByLines.forEach((line, idx) => {\n    if (!line.includes(messageSplitByLines[idx])) result.push(line);\n  });\n  return result.join(\"\\n\");\n};\n/**\n * @param {string} stack stack trace\n * @param {string} message error message\n * @returns {string} stack trace without the message included\n */\n\n\nconst cutOffMessage = (stack, message) => {\n  const nextLine = stack.indexOf(\"\\n\");\n\n  if (nextLine === -1) {\n    return stack === message ? \"\" : stack;\n  } else {\n    const firstLine = stack.slice(0, nextLine);\n    return firstLine === message ? stack.slice(nextLine + 1) : stack;\n  }\n};\n/**\n * @param {string} stack stack trace\n * @param {string} message error message\n * @returns {string} stack trace without the loader execution flag and message included\n */\n\n\nconst cleanUp = (stack, message) => {\n  stack = cutOffLoaderExecution(stack);\n  stack = cutOffMessage(stack, message);\n  return stack;\n};\n/**\n * @param {string} stack stack trace\n * @param {string} message error message\n * @returns {string} stack trace without the webpack options flag and message included\n */\n\n\nconst cleanUpWebpackOptions = (stack, message) => {\n  stack = cutOffWebpackOptions(stack);\n  stack = cutOffMultilineMessage(stack, message);\n  return stack;\n};\n\nexports.cutOffByFlag = cutOffByFlag;\nexports.cutOffLoaderExecution = cutOffLoaderExecution;\nexports.cutOffWebpackOptions = cutOffWebpackOptions;\nexports.cutOffMultilineMessage = cutOffMultilineMessage;\nexports.cutOffMessage = cutOffMessage;\nexports.cleanUp = cleanUp;\nexports.cleanUpWebpackOptions = cleanUpWebpackOptions;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/ErrorHelpers.js"],"names":["loaderFlag","webpackOptionsFlag","cutOffByFlag","stack","flag","errorStack","split","i","length","includes","join","cutOffLoaderExecution","cutOffWebpackOptions","cutOffMultilineMessage","message","stackSplitByLines","messageSplitByLines","result","forEach","line","idx","push","cutOffMessage","nextLine","indexOf","firstLine","slice","cleanUp","cleanUpWebpackOptions","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst loaderFlag = \"LOADER_EXECUTION\";\n\nconst webpackOptionsFlag = \"WEBPACK_OPTIONS\";\n\n/**\n * @param {string} stack stack trace\n * @param {string} flag flag to cut off\n * @returns {string} stack trace without the specified flag included\n */\nconst cutOffByFlag = (stack, flag) => {\n\tconst errorStack = stack.split(\"\\n\");\n\tfor (let i = 0; i < errorStack.length; i++) {\n\t\tif (errorStack[i].includes(flag)) {\n\t\t\terrorStack.length = i;\n\t\t}\n\t}\n\treturn errorStack.join(\"\\n\");\n};\n\n/**\n * @param {string} stack stack trace\n * @returns {string} stack trace without the loader execution flag included\n */\nconst cutOffLoaderExecution = stack => cutOffByFlag(stack, loaderFlag);\n\n/**\n * @param {string} stack stack trace\n * @returns {string} stack trace without the webpack options flag included\n */\nconst cutOffWebpackOptions = stack => cutOffByFlag(stack, webpackOptionsFlag);\n\n/**\n * @param {string} stack stack trace\n * @param {string} message error message\n * @returns {string} stack trace without the message included\n */\nconst cutOffMultilineMessage = (stack, message) => {\n\tconst stackSplitByLines = stack.split(\"\\n\");\n\tconst messageSplitByLines = message.split(\"\\n\");\n\n\t/** @type {string[]} */\n\tconst result = [];\n\n\tstackSplitByLines.forEach((line, idx) => {\n\t\tif (!line.includes(messageSplitByLines[idx])) result.push(line);\n\t});\n\n\treturn result.join(\"\\n\");\n};\n\n/**\n * @param {string} stack stack trace\n * @param {string} message error message\n * @returns {string} stack trace without the message included\n */\nconst cutOffMessage = (stack, message) => {\n\tconst nextLine = stack.indexOf(\"\\n\");\n\tif (nextLine === -1) {\n\t\treturn stack === message ? \"\" : stack;\n\t} else {\n\t\tconst firstLine = stack.slice(0, nextLine);\n\t\treturn firstLine === message ? stack.slice(nextLine + 1) : stack;\n\t}\n};\n\n/**\n * @param {string} stack stack trace\n * @param {string} message error message\n * @returns {string} stack trace without the loader execution flag and message included\n */\nconst cleanUp = (stack, message) => {\n\tstack = cutOffLoaderExecution(stack);\n\tstack = cutOffMessage(stack, message);\n\treturn stack;\n};\n\n/**\n * @param {string} stack stack trace\n * @param {string} message error message\n * @returns {string} stack trace without the webpack options flag and message included\n */\nconst cleanUpWebpackOptions = (stack, message) => {\n\tstack = cutOffWebpackOptions(stack);\n\tstack = cutOffMultilineMessage(stack, message);\n\treturn stack;\n};\n\nexports.cutOffByFlag = cutOffByFlag;\nexports.cutOffLoaderExecution = cutOffLoaderExecution;\nexports.cutOffWebpackOptions = cutOffWebpackOptions;\nexports.cutOffMultilineMessage = cutOffMultilineMessage;\nexports.cutOffMessage = cutOffMessage;\nexports.cleanUp = cleanUp;\nexports.cleanUpWebpackOptions = cleanUpWebpackOptions;\n"]},"metadata":{},"sourceType":"script"}