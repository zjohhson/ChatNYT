{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst fs = require(\"graceful-fs\");\n\nconst CachedInputFileSystem = require(\"./CachedInputFileSystem\");\n\nconst ResolverFactory = require(\"./ResolverFactory\");\n/** @typedef {import(\"./PnpPlugin\").PnpApiImpl} PnpApi */\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").FileSystem} FileSystem */\n\n/** @typedef {import(\"./Resolver\").ResolveCallback} ResolveCallback */\n\n/** @typedef {import(\"./Resolver\").ResolveContext} ResolveContext */\n\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n\n/** @typedef {import(\"./ResolverFactory\").Plugin} Plugin */\n\n/** @typedef {import(\"./ResolverFactory\").UserResolveOptions} ResolveOptions */\n\n/** @typedef {{\n * (context: object, path: string, request: string, resolveContext: ResolveContext, callback: ResolveCallback): void;\n * (context: object, path: string, request: string, callback: ResolveCallback): void;\n * (path: string, request: string, resolveContext: ResolveContext, callback: ResolveCallback): void;\n * (path: string, request: string, callback: ResolveCallback): void;\n * }} ResolveFunctionAsync\n */\n\n/** @typedef {{\n * (context: object, path: string, request: string): string|false;\n * (path: string, request: string): string|false;\n * }} ResolveFunction\n */\n\n\nconst nodeFileSystem = new CachedInputFileSystem(fs, 4000);\nconst nodeContext = {\n  environments: [\"node+es3+es5+process+native\"]\n};\nconst asyncResolver = ResolverFactory.createResolver({\n  conditionNames: [\"node\"],\n  extensions: [\".js\", \".json\", \".node\"],\n  fileSystem: nodeFileSystem\n});\n/**\n * @type {ResolveFunctionAsync}\n */\n\nconst resolve =\n/**\n * @param {object|string} context\n * @param {string} path\n * @param {string|ResolveContext|ResolveCallback} request\n * @param {ResolveContext|ResolveCallback=} resolveContext\n * @param {ResolveCallback=} callback\n */\n(context, path, request, resolveContext, callback) => {\n  if (typeof context === \"string\") {\n    callback =\n    /** @type {ResolveCallback} */\n    resolveContext;\n    resolveContext =\n    /** @type {ResolveContext} */\n    request;\n    request = path;\n    path = context;\n    context = nodeContext;\n  }\n\n  if (typeof callback !== \"function\") {\n    callback =\n    /** @type {ResolveCallback} */\n    resolveContext;\n  }\n\n  asyncResolver.resolve(context, path,\n  /** @type {string} */\n  request,\n  /** @type {ResolveContext} */\n  resolveContext,\n  /** @type {ResolveCallback} */\n  callback);\n};\n\nconst syncResolver = ResolverFactory.createResolver({\n  conditionNames: [\"node\"],\n  extensions: [\".js\", \".json\", \".node\"],\n  useSyncFileSystemCalls: true,\n  fileSystem: nodeFileSystem\n});\n/**\n * @type {ResolveFunction}\n */\n\nconst resolveSync =\n/**\n * @param {object|string} context\n * @param {string} path\n * @param {string=} request\n */\n(context, path, request) => {\n  if (typeof context === \"string\") {\n    request = path;\n    path = context;\n    context = nodeContext;\n  }\n\n  return syncResolver.resolveSync(context, path,\n  /** @type {string} */\n  request);\n};\n/** @typedef {Omit<ResolveOptions, \"fileSystem\"> & Partial<Pick<ResolveOptions, \"fileSystem\">>} ResolveOptionsOptionalFS */\n\n/**\n * @param {ResolveOptionsOptionalFS} options Resolver options\n * @returns {ResolveFunctionAsync} Resolver function\n */\n\n\nfunction create(options) {\n  const resolver = ResolverFactory.createResolver({\n    fileSystem: nodeFileSystem,\n    ...options\n  });\n  /**\n   * @param {object|string} context Custom context\n   * @param {string} path Base path\n   * @param {string|ResolveContext|ResolveCallback} request String to resolve\n   * @param {ResolveContext|ResolveCallback=} resolveContext Resolve context\n   * @param {ResolveCallback=} callback Result callback\n   */\n\n  return function (context, path, request, resolveContext, callback) {\n    if (typeof context === \"string\") {\n      callback =\n      /** @type {ResolveCallback} */\n      resolveContext;\n      resolveContext =\n      /** @type {ResolveContext} */\n      request;\n      request = path;\n      path = context;\n      context = nodeContext;\n    }\n\n    if (typeof callback !== \"function\") {\n      callback =\n      /** @type {ResolveCallback} */\n      resolveContext;\n    }\n\n    resolver.resolve(context, path,\n    /** @type {string} */\n    request,\n    /** @type {ResolveContext} */\n    resolveContext, callback);\n  };\n}\n/**\n * @param {ResolveOptionsOptionalFS} options Resolver options\n * @returns {ResolveFunction} Resolver function\n */\n\n\nfunction createSync(options) {\n  const resolver = ResolverFactory.createResolver({\n    useSyncFileSystemCalls: true,\n    fileSystem: nodeFileSystem,\n    ...options\n  });\n  /**\n   * @param {object|string} context custom context\n   * @param {string} path base path\n   * @param {string=} request request to resolve\n   * @returns {string|false} Resolved path or false\n   */\n\n  return function (context, path, request) {\n    if (typeof context === \"string\") {\n      request = path;\n      path = context;\n      context = nodeContext;\n    }\n\n    return resolver.resolveSync(context, path,\n    /** @type {string} */\n    request);\n  };\n}\n/**\n * @template A\n * @template B\n * @param {A} obj input a\n * @param {B} exports input b\n * @returns {A & B} merged\n */\n\n\nconst mergeExports = (obj, exports) => {\n  const descriptors = Object.getOwnPropertyDescriptors(exports);\n  Object.defineProperties(obj, descriptors);\n  return (\n    /** @type {A & B} */\n    Object.freeze(obj)\n  );\n};\n\nmodule.exports = mergeExports(resolve, {\n  get sync() {\n    return resolveSync;\n  },\n\n  create: mergeExports(create, {\n    get sync() {\n      return createSync;\n    }\n\n  }),\n  ResolverFactory,\n  CachedInputFileSystem,\n\n  get CloneBasenamePlugin() {\n    return require(\"./CloneBasenamePlugin\");\n  },\n\n  get LogInfoPlugin() {\n    return require(\"./LogInfoPlugin\");\n  },\n\n  get forEachBail() {\n    return require(\"./forEachBail\");\n  }\n\n});","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/enhanced-resolve/lib/index.js"],"names":["fs","require","CachedInputFileSystem","ResolverFactory","nodeFileSystem","nodeContext","environments","asyncResolver","createResolver","conditionNames","extensions","fileSystem","resolve","context","path","request","resolveContext","callback","syncResolver","useSyncFileSystemCalls","resolveSync","create","options","resolver","createSync","mergeExports","obj","exports","descriptors","Object","getOwnPropertyDescriptors","defineProperties","freeze","module","sync","CloneBasenamePlugin","LogInfoPlugin","forEachBail"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst fs = require(\"graceful-fs\");\nconst CachedInputFileSystem = require(\"./CachedInputFileSystem\");\nconst ResolverFactory = require(\"./ResolverFactory\");\n\n/** @typedef {import(\"./PnpPlugin\").PnpApiImpl} PnpApi */\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").FileSystem} FileSystem */\n/** @typedef {import(\"./Resolver\").ResolveCallback} ResolveCallback */\n/** @typedef {import(\"./Resolver\").ResolveContext} ResolveContext */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./ResolverFactory\").Plugin} Plugin */\n/** @typedef {import(\"./ResolverFactory\").UserResolveOptions} ResolveOptions */\n/** @typedef {{\n * (context: object, path: string, request: string, resolveContext: ResolveContext, callback: ResolveCallback): void;\n * (context: object, path: string, request: string, callback: ResolveCallback): void;\n * (path: string, request: string, resolveContext: ResolveContext, callback: ResolveCallback): void;\n * (path: string, request: string, callback: ResolveCallback): void;\n * }} ResolveFunctionAsync\n */\n/** @typedef {{\n * (context: object, path: string, request: string): string|false;\n * (path: string, request: string): string|false;\n * }} ResolveFunction\n */\n\nconst nodeFileSystem = new CachedInputFileSystem(fs, 4000);\n\nconst nodeContext = {\n\tenvironments: [\"node+es3+es5+process+native\"]\n};\n\nconst asyncResolver = ResolverFactory.createResolver({\n\tconditionNames: [\"node\"],\n\textensions: [\".js\", \".json\", \".node\"],\n\tfileSystem: nodeFileSystem\n});\n\n/**\n * @type {ResolveFunctionAsync}\n */\nconst resolve =\n\t/**\n\t * @param {object|string} context\n\t * @param {string} path\n\t * @param {string|ResolveContext|ResolveCallback} request\n\t * @param {ResolveContext|ResolveCallback=} resolveContext\n\t * @param {ResolveCallback=} callback\n\t */\n\t(context, path, request, resolveContext, callback) => {\n\t\tif (typeof context === \"string\") {\n\t\t\tcallback = /** @type {ResolveCallback} */ (resolveContext);\n\t\t\tresolveContext = /** @type {ResolveContext} */ (request);\n\t\t\trequest = path;\n\t\t\tpath = context;\n\t\t\tcontext = nodeContext;\n\t\t}\n\t\tif (typeof callback !== \"function\") {\n\t\t\tcallback = /** @type {ResolveCallback} */ (resolveContext);\n\t\t}\n\t\tasyncResolver.resolve(\n\t\t\tcontext,\n\t\t\tpath,\n\t\t\t/** @type {string} */ (request),\n\t\t\t/** @type {ResolveContext} */ (resolveContext),\n\t\t\t/** @type {ResolveCallback} */ (callback)\n\t\t);\n\t};\n\nconst syncResolver = ResolverFactory.createResolver({\n\tconditionNames: [\"node\"],\n\textensions: [\".js\", \".json\", \".node\"],\n\tuseSyncFileSystemCalls: true,\n\tfileSystem: nodeFileSystem\n});\n\n/**\n * @type {ResolveFunction}\n */\nconst resolveSync =\n\t/**\n\t * @param {object|string} context\n\t * @param {string} path\n\t * @param {string=} request\n\t */\n\t(context, path, request) => {\n\t\tif (typeof context === \"string\") {\n\t\t\trequest = path;\n\t\t\tpath = context;\n\t\t\tcontext = nodeContext;\n\t\t}\n\t\treturn syncResolver.resolveSync(\n\t\t\tcontext,\n\t\t\tpath,\n\t\t\t/** @type {string} */ (request)\n\t\t);\n\t};\n\n/** @typedef {Omit<ResolveOptions, \"fileSystem\"> & Partial<Pick<ResolveOptions, \"fileSystem\">>} ResolveOptionsOptionalFS */\n\n/**\n * @param {ResolveOptionsOptionalFS} options Resolver options\n * @returns {ResolveFunctionAsync} Resolver function\n */\nfunction create(options) {\n\tconst resolver = ResolverFactory.createResolver({\n\t\tfileSystem: nodeFileSystem,\n\t\t...options\n\t});\n\t/**\n\t * @param {object|string} context Custom context\n\t * @param {string} path Base path\n\t * @param {string|ResolveContext|ResolveCallback} request String to resolve\n\t * @param {ResolveContext|ResolveCallback=} resolveContext Resolve context\n\t * @param {ResolveCallback=} callback Result callback\n\t */\n\treturn function (context, path, request, resolveContext, callback) {\n\t\tif (typeof context === \"string\") {\n\t\t\tcallback = /** @type {ResolveCallback} */ (resolveContext);\n\t\t\tresolveContext = /** @type {ResolveContext} */ (request);\n\t\t\trequest = path;\n\t\t\tpath = context;\n\t\t\tcontext = nodeContext;\n\t\t}\n\t\tif (typeof callback !== \"function\") {\n\t\t\tcallback = /** @type {ResolveCallback} */ (resolveContext);\n\t\t}\n\t\tresolver.resolve(\n\t\t\tcontext,\n\t\t\tpath,\n\t\t\t/** @type {string} */ (request),\n\t\t\t/** @type {ResolveContext} */ (resolveContext),\n\t\t\tcallback\n\t\t);\n\t};\n}\n\n/**\n * @param {ResolveOptionsOptionalFS} options Resolver options\n * @returns {ResolveFunction} Resolver function\n */\nfunction createSync(options) {\n\tconst resolver = ResolverFactory.createResolver({\n\t\tuseSyncFileSystemCalls: true,\n\t\tfileSystem: nodeFileSystem,\n\t\t...options\n\t});\n\t/**\n\t * @param {object|string} context custom context\n\t * @param {string} path base path\n\t * @param {string=} request request to resolve\n\t * @returns {string|false} Resolved path or false\n\t */\n\treturn function (context, path, request) {\n\t\tif (typeof context === \"string\") {\n\t\t\trequest = path;\n\t\t\tpath = context;\n\t\t\tcontext = nodeContext;\n\t\t}\n\t\treturn resolver.resolveSync(context, path, /** @type {string} */ (request));\n\t};\n}\n\n/**\n * @template A\n * @template B\n * @param {A} obj input a\n * @param {B} exports input b\n * @returns {A & B} merged\n */\nconst mergeExports = (obj, exports) => {\n\tconst descriptors = Object.getOwnPropertyDescriptors(exports);\n\tObject.defineProperties(obj, descriptors);\n\treturn /** @type {A & B} */ (Object.freeze(obj));\n};\n\nmodule.exports = mergeExports(resolve, {\n\tget sync() {\n\t\treturn resolveSync;\n\t},\n\tcreate: mergeExports(create, {\n\t\tget sync() {\n\t\t\treturn createSync;\n\t\t}\n\t}),\n\tResolverFactory,\n\tCachedInputFileSystem,\n\tget CloneBasenamePlugin() {\n\t\treturn require(\"./CloneBasenamePlugin\");\n\t},\n\tget LogInfoPlugin() {\n\t\treturn require(\"./LogInfoPlugin\");\n\t},\n\tget forEachBail() {\n\t\treturn require(\"./forEachBail\");\n\t}\n});\n"]},"metadata":{},"sourceType":"script"}