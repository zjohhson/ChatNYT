{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _AbstractChatCompletionRunner_instances, _AbstractChatCompletionRunner_connectedPromise, _AbstractChatCompletionRunner_resolveConnectedPromise, _AbstractChatCompletionRunner_rejectConnectedPromise, _AbstractChatCompletionRunner_endPromise, _AbstractChatCompletionRunner_resolveEndPromise, _AbstractChatCompletionRunner_rejectEndPromise, _AbstractChatCompletionRunner_listeners, _AbstractChatCompletionRunner_ended, _AbstractChatCompletionRunner_errored, _AbstractChatCompletionRunner_aborted, _AbstractChatCompletionRunner_catchingPromiseCreated, _AbstractChatCompletionRunner_getFinalContent, _AbstractChatCompletionRunner_getFinalFunctionCall, _AbstractChatCompletionRunner_getFinalFunctionCallResult, _AbstractChatCompletionRunner_calculateTotalUsage, _AbstractChatCompletionRunner_handleError;\n\nimport { APIUserAbortError, OpenAIError } from 'openai/error';\nimport { isRunnableFunctionWithParse } from \"./RunnableFunction.mjs\";\nexport class AbstractChatCompletionRunner {\n  constructor() {\n    _AbstractChatCompletionRunner_instances.add(this);\n\n    this.controller = new AbortController();\n\n    _AbstractChatCompletionRunner_connectedPromise.set(this, void 0);\n\n    _AbstractChatCompletionRunner_resolveConnectedPromise.set(this, () => {});\n\n    _AbstractChatCompletionRunner_rejectConnectedPromise.set(this, () => {});\n\n    _AbstractChatCompletionRunner_endPromise.set(this, void 0);\n\n    _AbstractChatCompletionRunner_resolveEndPromise.set(this, () => {});\n\n    _AbstractChatCompletionRunner_rejectEndPromise.set(this, () => {});\n\n    _AbstractChatCompletionRunner_listeners.set(this, {});\n\n    this._chatCompletions = [];\n    this.messages = [];\n\n    _AbstractChatCompletionRunner_ended.set(this, false);\n\n    _AbstractChatCompletionRunner_errored.set(this, false);\n\n    _AbstractChatCompletionRunner_aborted.set(this, false);\n\n    _AbstractChatCompletionRunner_catchingPromiseCreated.set(this, false);\n\n    _AbstractChatCompletionRunner_handleError.set(this, error => {\n      __classPrivateFieldSet(this, _AbstractChatCompletionRunner_errored, true, \"f\");\n\n      if (error instanceof Error && error.name === 'AbortError') {\n        error = new APIUserAbortError();\n      }\n\n      if (error instanceof APIUserAbortError) {\n        __classPrivateFieldSet(this, _AbstractChatCompletionRunner_aborted, true, \"f\");\n\n        this._emit('abort', error);\n      }\n\n      const openAIError = error instanceof OpenAIError ? error : new OpenAIError(error instanceof Error ? error.message : String(error));\n\n      this._emit('error', openAIError);\n    });\n\n    __classPrivateFieldSet(this, _AbstractChatCompletionRunner_connectedPromise, new Promise((resolve, reject) => {\n      __classPrivateFieldSet(this, _AbstractChatCompletionRunner_resolveConnectedPromise, resolve, \"f\");\n\n      __classPrivateFieldSet(this, _AbstractChatCompletionRunner_rejectConnectedPromise, reject, \"f\");\n    }), \"f\");\n\n    __classPrivateFieldSet(this, _AbstractChatCompletionRunner_endPromise, new Promise((resolve, reject) => {\n      __classPrivateFieldSet(this, _AbstractChatCompletionRunner_resolveEndPromise, resolve, \"f\");\n\n      __classPrivateFieldSet(this, _AbstractChatCompletionRunner_rejectEndPromise, reject, \"f\");\n    }), \"f\"); // Don't let these promises cause unhandled rejection errors.\n    // we will manually cause an unhandled rejection error later\n    // if the user hasn't registered any error listener or called\n    // any promise-returning method.\n\n\n    __classPrivateFieldGet(this, _AbstractChatCompletionRunner_connectedPromise, \"f\").catch(() => {});\n\n    __classPrivateFieldGet(this, _AbstractChatCompletionRunner_endPromise, \"f\").catch(() => {});\n  }\n\n  _run(executor) {\n    // Unfortunately if we call `executor()` immediately we get runtime errors about\n    // references to `this` before the `super()` constructor call returns.\n    setTimeout(() => {\n      executor().then(() => {\n        this._emitFinal();\n\n        this._emit('end');\n      }, __classPrivateFieldGet(this, _AbstractChatCompletionRunner_handleError, \"f\"));\n    }, 0);\n  }\n\n  _addChatCompletion(chatCompletion) {\n    this._chatCompletions.push(chatCompletion);\n\n    this._emit('chatCompletion', chatCompletion);\n\n    const message = chatCompletion.choices[0]?.message;\n    if (message) this._addMessage(message);\n    return chatCompletion;\n  }\n\n  _addMessage(message) {\n    let emit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.messages.push(message);\n\n    if (emit) {\n      this._emit('message', message);\n\n      if (message.role === 'function' && message.content) {\n        this._emit('functionCallResult', message.content);\n      } else if (message.function_call) {\n        this._emit('functionCall', message.function_call);\n      }\n    }\n  }\n\n  _connected() {\n    if (this.ended) return;\n\n    __classPrivateFieldGet(this, _AbstractChatCompletionRunner_resolveConnectedPromise, \"f\").call(this);\n\n    this._emit('connect');\n  }\n\n  get ended() {\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_ended, \"f\");\n  }\n\n  get errored() {\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_errored, \"f\");\n  }\n\n  get aborted() {\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_aborted, \"f\");\n  }\n\n  abort() {\n    this.controller.abort();\n  }\n  /**\n   * Adds the listener function to the end of the listeners array for the event.\n   * No checks are made to see if the listener has already been added. Multiple calls passing\n   * the same combination of event and listener will result in the listener being added, and\n   * called, multiple times.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n\n\n  on(event, listener) {\n    const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = []);\n    listeners.push({\n      listener\n    });\n    return this;\n  }\n  /**\n   * Removes the specified listener from the listener array for the event.\n   * off() will remove, at most, one instance of a listener from the listener array. If any single\n   * listener has been added multiple times to the listener array for the specified event, then\n   * off() must be called multiple times to remove each instance.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n\n\n  off(event, listener) {\n    const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event];\n\n    if (!listeners) return this;\n    const index = listeners.findIndex(l => l.listener === listener);\n    if (index >= 0) listeners.splice(index, 1);\n    return this;\n  }\n  /**\n   * Adds a one-time listener function for the event. The next time the event is triggered,\n   * this listener is removed and then invoked.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n\n\n  once(event, listener) {\n    const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = []);\n    listeners.push({\n      listener,\n      once: true\n    });\n    return this;\n  }\n  /**\n   * This is similar to `.once()`, but returns a Promise that resolves the next time\n   * the event is triggered, instead of calling a listener callback.\n   * @returns a Promise that resolves the next time given event is triggered,\n   * or rejects if an error is emitted.  (If you request the 'error' event,\n   * returns a promise that resolves with the error).\n   *\n   * Example:\n   *\n   *   const message = await stream.emitted('message') // rejects if the stream errors\n   */\n\n\n  emitted(event) {\n    return new Promise((resolve, reject) => {\n      __classPrivateFieldSet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, true, \"f\");\n\n      if (event !== 'error') this.once('error', reject);\n      this.once(event, resolve);\n    });\n  }\n\n  async done() {\n    __classPrivateFieldSet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, true, \"f\");\n\n    await __classPrivateFieldGet(this, _AbstractChatCompletionRunner_endPromise, \"f\");\n  }\n  /**\n   * @returns a promise that resolves with the final ChatCompletion, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n   */\n\n\n  async finalChatCompletion() {\n    await this.done();\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (!completion) throw new OpenAIError('stream ended without producing a ChatCompletion');\n    return completion;\n  }\n  /**\n   * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n\n\n  async finalContent() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n  }\n  /**\n   * @returns a promise that resolves with the the final ChatCompletionMessage, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n\n\n  async finalMessage() {\n    await this.done();\n    const message = this.messages[this.messages.length - 1];\n    if (!message) throw new OpenAIError('stream ended without producing a ChatCompletionMessage');\n    return message;\n  }\n  /**\n   * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n\n\n  async finalFunctionCall() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n  }\n\n  async finalFunctionCallResult() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n  }\n\n  async totalUsage() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);\n  }\n\n  allChatCompletions() {\n    return [...this._chatCompletions];\n  }\n\n  _emit(event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    // make sure we don't emit any events after end\n    if (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_ended, \"f\")) return;\n\n    if (event === 'end') {\n      __classPrivateFieldSet(this, _AbstractChatCompletionRunner_ended, true, \"f\");\n\n      __classPrivateFieldGet(this, _AbstractChatCompletionRunner_resolveEndPromise, \"f\").call(this);\n    }\n\n    const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event];\n\n    if (listeners) {\n      __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = listeners.filter(l => !l.once);\n      listeners.forEach(_ref => {\n        let {\n          listener\n        } = _ref;\n        return listener(...args);\n      });\n    }\n\n    if (event === 'error') {\n      // NOTE: _emit('error', error) should only be called from #handleError().\n      const error = args[0];\n\n      if (!__classPrivateFieldGet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, \"f\") && !listeners?.length) {\n        // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n        // If you are seeing stack traces here, make sure to handle errors via either:\n        // - runner.on('error', () => ...)\n        // - await runner.done()\n        // - await runner.finalChatCompletion()\n        // - etc.\n        Promise.reject(error);\n      }\n\n      __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectConnectedPromise, \"f\").call(this, error);\n\n      __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectEndPromise, \"f\").call(this, error);\n\n      this._emit('end');\n    }\n  }\n\n  _emitFinal() {\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (completion) this._emit('finalChatCompletion', completion);\n    const finalMessage = this.messages[this.messages.length - 1];\n    if (finalMessage) this._emit('finalMessage', finalMessage);\n\n    const finalContent = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n\n    if (finalContent) this._emit('finalContent', finalContent);\n\n    const finalFunctionCall = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n\n    if (finalFunctionCall) this._emit('finalFunctionCall', finalFunctionCall);\n\n    const finalFunctionCallResult = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n\n    if (finalFunctionCallResult != null) this._emit('finalFunctionCallResult', finalFunctionCallResult);\n\n    if (this._chatCompletions.some(c => c.usage)) {\n      this._emit('totalUsage', __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));\n    }\n  }\n\n  async _createChatCompletion(completions, params, options) {\n    const signal = options?.signal;\n\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n\n    const chatCompletion = await completions.create({ ...params,\n      stream: false\n    }, { ...options,\n      signal: this.controller.signal\n    });\n\n    this._connected();\n\n    return this._addChatCompletion(chatCompletion);\n  }\n\n  async _runChatCompletion(completions, params, options) {\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n\n    return await this._createChatCompletion(completions, params, options);\n  }\n\n  async _runFunctions(completions, params, options) {\n    const {\n      function_call = 'auto',\n      stream,\n      ...restParams\n    } = params;\n    const isSingleFunctionCall = typeof function_call !== 'string' && function_call?.name;\n    const functionsByName = {};\n\n    for (const f of params.functions) {\n      functionsByName[f.name || f.function.name] = f;\n    }\n\n    const functions = params.functions.map(f => ({\n      name: f.name || f.function.name,\n      parameters: f.parameters,\n      description: f.description\n    }));\n\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n\n    for (let i = 0; i < (options?.maxChatCompletions ?? 5); ++i) {\n      const chatCompletion = await this._createChatCompletion(completions, { ...restParams,\n        function_call,\n        functions,\n        messages: [...this.messages]\n      }, options);\n      const message = chatCompletion.choices[0]?.message;\n\n      if (!message) {\n        throw new OpenAIError(`missing message in ChatCompletion response`);\n      }\n\n      if (!message.function_call) return;\n      const {\n        name,\n        arguments: args\n      } = message.function_call;\n      const fn = functionsByName[name];\n\n      if (!fn || typeof function_call !== 'string' && name !== function_call?.name) {\n        this._addMessage({\n          role: 'function',\n          name,\n          content: `Invalid function_call: ${JSON.stringify(name)}. Available options are: ${functions.map(f => JSON.stringify(f.name)).join(', ')}. Please try again`\n        });\n\n        if (isSingleFunctionCall) return;\n        continue;\n      }\n\n      let parsed;\n\n      try {\n        parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n      } catch (error) {\n        this._addMessage({\n          role: 'function',\n          name,\n          content: error instanceof Error ? error.message : String(error)\n        });\n\n        continue;\n      }\n\n      const rawContent = await fn.function(parsed, this);\n      const content = typeof rawContent === 'string' ? rawContent : rawContent === undefined ? 'undefined' : JSON.stringify(rawContent);\n\n      this._addMessage({\n        role: 'function',\n        name,\n        content\n      });\n\n      if (isSingleFunctionCall) return;\n    }\n  }\n\n}\n_AbstractChatCompletionRunner_connectedPromise = new WeakMap(), _AbstractChatCompletionRunner_resolveConnectedPromise = new WeakMap(), _AbstractChatCompletionRunner_rejectConnectedPromise = new WeakMap(), _AbstractChatCompletionRunner_endPromise = new WeakMap(), _AbstractChatCompletionRunner_resolveEndPromise = new WeakMap(), _AbstractChatCompletionRunner_rejectEndPromise = new WeakMap(), _AbstractChatCompletionRunner_listeners = new WeakMap(), _AbstractChatCompletionRunner_ended = new WeakMap(), _AbstractChatCompletionRunner_errored = new WeakMap(), _AbstractChatCompletionRunner_aborted = new WeakMap(), _AbstractChatCompletionRunner_catchingPromiseCreated = new WeakMap(), _AbstractChatCompletionRunner_handleError = new WeakMap(), _AbstractChatCompletionRunner_instances = new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent() {\n  for (let i = this.messages.length - 1; i >= 0; i--) {\n    const message = this.messages[i];\n    if (message?.role === 'assistant') return message.content;\n  }\n\n  return null;\n}, _AbstractChatCompletionRunner_getFinalFunctionCall = function _AbstractChatCompletionRunner_getFinalFunctionCall() {\n  for (let i = this.messages.length - 1; i >= 0; i--) {\n    const message = this.messages[i];\n    if (message?.function_call) return message.function_call;\n  }\n}, _AbstractChatCompletionRunner_getFinalFunctionCallResult = function _AbstractChatCompletionRunner_getFinalFunctionCallResult() {\n  for (let i = this.messages.length - 1; i >= 0; i--) {\n    const message = this.messages[i];\n    if (message?.role === 'function' && message.content != null) return message.content;\n  }\n}, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage() {\n  const total = {\n    completion_tokens: 0,\n    prompt_tokens: 0,\n    total_tokens: 0\n  };\n\n  for (const {\n    usage\n  } of this._chatCompletions) {\n    if (usage) {\n      total.completion_tokens += usage.completion_tokens;\n      total.prompt_tokens += usage.prompt_tokens;\n      total.total_tokens += usage.total_tokens;\n    }\n  }\n\n  return total;\n};","map":{"version":3,"mappings":"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","names":["APIUserAbortError","OpenAIError","isRunnableFunctionWithParse","AbstractChatCompletionRunner","constructor","AbortController","_AbstractChatCompletionRunner_connectedPromise","_AbstractChatCompletionRunner_resolveConnectedPromise","_AbstractChatCompletionRunner_rejectConnectedPromise","_AbstractChatCompletionRunner_endPromise","_AbstractChatCompletionRunner_resolveEndPromise","_AbstractChatCompletionRunner_rejectEndPromise","_AbstractChatCompletionRunner_listeners","_AbstractChatCompletionRunner_ended","_AbstractChatCompletionRunner_errored","_AbstractChatCompletionRunner_aborted","_AbstractChatCompletionRunner_catchingPromiseCreated","_AbstractChatCompletionRunner_handleError","error","__classPrivateFieldSet","Error","name","_emit","openAIError","message","String","Promise","resolve","reject","__classPrivateFieldGet","catch","_run","executor","setTimeout","then","_emitFinal","_addChatCompletion","chatCompletion","_chatCompletions","push","choices","_addMessage","emit","messages","role","content","function_call","_connected","ended","call","errored","aborted","abort","controller","on","event","listener","listeners","off","index","findIndex","l","splice","once","emitted","done","finalChatCompletion","completion","length","finalContent","_AbstractChatCompletionRunner_instances","_AbstractChatCompletionRunner_getFinalContent","finalMessage","finalFunctionCall","_AbstractChatCompletionRunner_getFinalFunctionCall","finalFunctionCallResult","_AbstractChatCompletionRunner_getFinalFunctionCallResult","totalUsage","_AbstractChatCompletionRunner_calculateTotalUsage","allChatCompletions","args","filter","forEach","some","c","usage","_createChatCompletion","completions","params","options","signal","addEventListener","create","stream","_runChatCompletion","_runFunctions","restParams","isSingleFunctionCall","functionsByName","f","functions","function","map","parameters","description","i","maxChatCompletions","arguments","fn","JSON","stringify","join","parsed","parse","rawContent","undefined","total","completion_tokens","prompt_tokens","total_tokens"],"sources":["/Users/zachjohnson/Desktop/React-Wordle-lesson-16/node_modules/openai/src/lib/AbstractChatCompletionRunner.ts"],"sourcesContent":["import * as Core from \"../core\";\nimport { type CompletionUsage } from \"../resources/completions\";\nimport {\n  type Completions,\n  type ChatCompletion,\n  type ChatCompletionMessage,\n  type ChatCompletionMessageParam,\n  type ChatCompletionCreateParams,\n} from \"../resources/chat/completions\";\nimport { APIUserAbortError, OpenAIError } from \"../error\";\nimport {\n  type RunnableFunction,\n  isRunnableFunctionWithParse,\n  type BaseFunctionsArgs,\n} from './RunnableFunction';\nimport { ChatCompletionFunctionRunnerParams } from './ChatCompletionRunner';\nimport { ChatCompletionStreamingFunctionRunnerParams } from './ChatCompletionStreamingRunner';\n\nexport abstract class AbstractChatCompletionRunner<\n  Events extends CustomEvents<any> = AbstractChatCompletionRunnerEvents,\n> {\n  controller: AbortController = new AbortController();\n\n  #connectedPromise: Promise<void>;\n  #resolveConnectedPromise: () => void = () => {};\n  #rejectConnectedPromise: (error: OpenAIError) => void = () => {};\n\n  #endPromise: Promise<void>;\n  #resolveEndPromise: () => void = () => {};\n  #rejectEndPromise: (error: OpenAIError) => void = () => {};\n\n  #listeners: { [Event in keyof Events]?: ListenersForEvent<Events, Event> } = {};\n\n  protected _chatCompletions: ChatCompletion[] = [];\n  messages: (ChatCompletionMessage | ChatCompletionMessageParam)[] = [];\n\n  #ended = false;\n  #errored = false;\n  #aborted = false;\n  #catchingPromiseCreated = false;\n\n  constructor() {\n    this.#connectedPromise = new Promise<void>((resolve, reject) => {\n      this.#resolveConnectedPromise = resolve;\n      this.#rejectConnectedPromise = reject;\n    });\n\n    this.#endPromise = new Promise<void>((resolve, reject) => {\n      this.#resolveEndPromise = resolve;\n      this.#rejectEndPromise = reject;\n    });\n\n    // Don't let these promises cause unhandled rejection errors.\n    // we will manually cause an unhandled rejection error later\n    // if the user hasn't registered any error listener or called\n    // any promise-returning method.\n    this.#connectedPromise.catch(() => {});\n    this.#endPromise.catch(() => {});\n  }\n\n  protected _run(executor: () => Promise<any>) {\n    // Unfortunately if we call `executor()` immediately we get runtime errors about\n    // references to `this` before the `super()` constructor call returns.\n    setTimeout(() => {\n      executor().then(() => {\n        this._emitFinal();\n        this._emit('end');\n      }, this.#handleError);\n    }, 0);\n  }\n\n  protected _addChatCompletion(chatCompletion: ChatCompletion): ChatCompletion {\n    this._chatCompletions.push(chatCompletion);\n    this._emit('chatCompletion', chatCompletion);\n    const message = chatCompletion.choices[0]?.message;\n    if (message) this._addMessage(message);\n    return chatCompletion;\n  }\n\n  protected _addMessage(message: ChatCompletionMessage | ChatCompletionMessageParam, emit = true) {\n    this.messages.push(message);\n    if (emit) {\n      this._emit('message', message);\n      if (message.role === 'function' && message.content) {\n        this._emit('functionCallResult', message.content);\n      } else if (message.function_call) {\n        this._emit('functionCall', message.function_call);\n      }\n    }\n  }\n\n  protected _connected() {\n    if (this.ended) return;\n    this.#resolveConnectedPromise();\n    this._emit('connect');\n  }\n\n  get ended(): boolean {\n    return this.#ended;\n  }\n\n  get errored(): boolean {\n    return this.#errored;\n  }\n\n  get aborted(): boolean {\n    return this.#aborted;\n  }\n\n  abort() {\n    this.controller.abort();\n  }\n\n  /**\n   * Adds the listener function to the end of the listeners array for the event.\n   * No checks are made to see if the listener has already been added. Multiple calls passing\n   * the same combination of event and listener will result in the listener being added, and\n   * called, multiple times.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  on<Event extends keyof Events>(event: Event, listener: ListenerForEvent<Events, Event>): this {\n    const listeners: ListenersForEvent<Events, Event> =\n      this.#listeners[event] || (this.#listeners[event] = []);\n    listeners.push({ listener });\n    return this;\n  }\n\n  /**\n   * Removes the specified listener from the listener array for the event.\n   * off() will remove, at most, one instance of a listener from the listener array. If any single\n   * listener has been added multiple times to the listener array for the specified event, then\n   * off() must be called multiple times to remove each instance.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  off<Event extends keyof Events>(event: Event, listener: ListenerForEvent<Events, Event>): this {\n    const listeners = this.#listeners[event];\n    if (!listeners) return this;\n    const index = listeners.findIndex((l) => l.listener === listener);\n    if (index >= 0) listeners.splice(index, 1);\n    return this;\n  }\n\n  /**\n   * Adds a one-time listener function for the event. The next time the event is triggered,\n   * this listener is removed and then invoked.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  once<Event extends keyof Events>(event: Event, listener: ListenerForEvent<Events, Event>): this {\n    const listeners: ListenersForEvent<Events, Event> =\n      this.#listeners[event] || (this.#listeners[event] = []);\n    listeners.push({ listener, once: true });\n    return this;\n  }\n\n  /**\n   * This is similar to `.once()`, but returns a Promise that resolves the next time\n   * the event is triggered, instead of calling a listener callback.\n   * @returns a Promise that resolves the next time given event is triggered,\n   * or rejects if an error is emitted.  (If you request the 'error' event,\n   * returns a promise that resolves with the error).\n   *\n   * Example:\n   *\n   *   const message = await stream.emitted('message') // rejects if the stream errors\n   */\n  emitted<Event extends keyof Events>(\n    event: Event,\n  ): Promise<\n    EventParameters<Events, Event> extends [infer Param] ? Param\n    : EventParameters<Events, Event> extends [] ? void\n    : EventParameters<Events, Event>\n  > {\n    return new Promise((resolve, reject) => {\n      this.#catchingPromiseCreated = true;\n      if (event !== 'error') this.once('error', reject);\n      this.once(event, resolve as any);\n    });\n  }\n\n  async done(): Promise<void> {\n    this.#catchingPromiseCreated = true;\n    await this.#endPromise;\n  }\n\n  /**\n   * @returns a promise that resolves with the final ChatCompletion, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n   */\n  async finalChatCompletion(): Promise<ChatCompletion> {\n    await this.done();\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (!completion) throw new OpenAIError('stream ended without producing a ChatCompletion');\n    return completion;\n  }\n\n  #getFinalContent(): string | null {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n      const message = this.messages[i];\n      if (message?.role === 'assistant') return message.content;\n    }\n    return null;\n  }\n\n  /**\n   * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalContent(): Promise<string | null> {\n    await this.done();\n    return this.#getFinalContent();\n  }\n\n  /**\n   * @returns a promise that resolves with the the final ChatCompletionMessage, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalMessage(): Promise<ChatCompletionMessage> {\n    await this.done();\n    const message = this.messages[this.messages.length - 1];\n    if (!message) throw new OpenAIError('stream ended without producing a ChatCompletionMessage');\n    return message;\n  }\n\n  #getFinalFunctionCall(): ChatCompletionMessage.FunctionCall | undefined {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n      const message = this.messages[i];\n      if (message?.function_call) return message.function_call;\n    }\n  }\n\n  /**\n   * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalFunctionCall(): Promise<ChatCompletionMessage.FunctionCall | undefined> {\n    await this.done();\n    return this.#getFinalFunctionCall();\n  }\n\n  #getFinalFunctionCallResult(): string | undefined {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n      const message = this.messages[i];\n      if (message?.role === 'function' && message.content != null) return message.content;\n    }\n  }\n\n  async finalFunctionCallResult(): Promise<string | undefined> {\n    await this.done();\n    return this.#getFinalFunctionCallResult();\n  }\n\n  #calculateTotalUsage(): CompletionUsage {\n    const total: CompletionUsage = {\n      completion_tokens: 0,\n      prompt_tokens: 0,\n      total_tokens: 0,\n    };\n    for (const { usage } of this._chatCompletions) {\n      if (usage) {\n        total.completion_tokens += usage.completion_tokens;\n        total.prompt_tokens += usage.prompt_tokens;\n        total.total_tokens += usage.total_tokens;\n      }\n    }\n    return total;\n  }\n\n  async totalUsage(): Promise<CompletionUsage> {\n    await this.done();\n    return this.#calculateTotalUsage();\n  }\n\n  allChatCompletions(): ChatCompletion[] {\n    return [...this._chatCompletions];\n  }\n\n  #handleError = (error: unknown) => {\n    this.#errored = true;\n    if (error instanceof Error && error.name === 'AbortError') {\n      error = new APIUserAbortError();\n    }\n    if (error instanceof APIUserAbortError) {\n      this.#aborted = true;\n      this._emit('abort', error);\n    }\n    const openAIError: OpenAIError =\n      error instanceof OpenAIError ? error : (\n        new OpenAIError(error instanceof Error ? error.message : String(error))\n      );\n    this._emit('error', openAIError);\n  };\n\n  protected _emit<Event extends keyof Events>(event: Event, ...args: EventParameters<Events, Event>) {\n    // make sure we don't emit any events after end\n    if (this.#ended) return;\n\n    if (event === 'end') {\n      this.#ended = true;\n      this.#resolveEndPromise();\n    }\n\n    const listeners: ListenersForEvent<Events, Event> | undefined = this.#listeners[event];\n    if (listeners) {\n      this.#listeners[event] = listeners.filter((l) => !l.once) as any;\n      listeners.forEach(({ listener }: any) => listener(...args));\n    }\n\n    if (event === 'error') {\n      // NOTE: _emit('error', error) should only be called from #handleError().\n\n      const error = args[0] as OpenAIError;\n      if (!this.#catchingPromiseCreated && !listeners?.length) {\n        // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n        // If you are seeing stack traces here, make sure to handle errors via either:\n        // - runner.on('error', () => ...)\n        // - await runner.done()\n        // - await runner.finalChatCompletion()\n        // - etc.\n        Promise.reject(error);\n      }\n      this.#rejectConnectedPromise(error);\n      this.#rejectEndPromise(error);\n      this._emit('end');\n    }\n  }\n\n  protected _emitFinal() {\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (completion) this._emit('finalChatCompletion', completion);\n    const finalMessage = this.messages[this.messages.length - 1];\n    if (finalMessage) this._emit('finalMessage', finalMessage);\n    const finalContent = this.#getFinalContent();\n    if (finalContent) this._emit('finalContent', finalContent);\n\n    const finalFunctionCall = this.#getFinalFunctionCall();\n    if (finalFunctionCall) this._emit('finalFunctionCall', finalFunctionCall);\n\n    const finalFunctionCallResult = this.#getFinalFunctionCallResult();\n    if (finalFunctionCallResult != null) this._emit('finalFunctionCallResult', finalFunctionCallResult);\n\n    if (this._chatCompletions.some((c) => c.usage)) {\n      this._emit('totalUsage', this.#calculateTotalUsage());\n    }\n  }\n\n  protected async _createChatCompletion(\n    completions: Completions,\n    params: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): Promise<ChatCompletion> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    const chatCompletion = await completions.create(\n      { ...params, stream: false },\n      { ...options, signal: this.controller.signal },\n    );\n    this._connected();\n    return this._addChatCompletion(chatCompletion);\n  }\n\n  protected async _runChatCompletion(\n    completions: Completions,\n    params: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): Promise<ChatCompletion> {\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n    return await this._createChatCompletion(completions, params, options);\n  }\n\n  protected async _runFunctions<FunctionsArgs extends BaseFunctionsArgs>(\n    completions: Completions,\n    params:\n      | ChatCompletionFunctionRunnerParams<FunctionsArgs>\n      | ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs>,\n    options?: Core.RequestOptions & { maxChatCompletions?: number },\n  ) {\n    const { function_call = 'auto', stream, ...restParams } = params;\n    const isSingleFunctionCall = typeof function_call !== 'string' && function_call?.name;\n\n    const functionsByName: Record<string, RunnableFunction<any>> = {};\n    for (const f of params.functions) {\n      functionsByName[f.name || f.function.name] = f;\n    }\n\n    const functions: ChatCompletionCreateParams.Function[] = params.functions.map(\n      (f): ChatCompletionCreateParams.Function => ({\n        name: f.name || f.function.name,\n        parameters: f.parameters as Record<string, unknown>,\n        description: f.description,\n      }),\n    );\n\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n\n    for (let i = 0; i < (options?.maxChatCompletions ?? 5); ++i) {\n      const chatCompletion: ChatCompletion = await this._createChatCompletion(\n        completions,\n        {\n          ...restParams,\n          function_call,\n          functions,\n          messages: [...this.messages],\n        },\n        options,\n      );\n      const message = chatCompletion.choices[0]?.message;\n      if (!message) {\n        throw new OpenAIError(`missing message in ChatCompletion response`);\n      }\n      if (!message.function_call) return;\n      const { name, arguments: args } = message.function_call;\n      const fn = functionsByName[name];\n      if (!fn || (typeof function_call !== 'string' && name !== function_call?.name)) {\n        this._addMessage({\n          role: 'function',\n          name,\n          content: `Invalid function_call: ${JSON.stringify(name)}. Available options are: ${functions\n            .map((f) => JSON.stringify(f.name))\n            .join(', ')}. Please try again`,\n        });\n        if (isSingleFunctionCall) return;\n        continue;\n      }\n      let parsed;\n      try {\n        parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n      } catch (error) {\n        this._addMessage({\n          role: 'function',\n          name,\n          content: error instanceof Error ? error.message : String(error),\n        });\n        continue;\n      }\n      const rawContent = await (fn.function as any)(parsed as any, this);\n      const content =\n        typeof rawContent === 'string' ? rawContent\n        : rawContent === undefined ? 'undefined'\n        : JSON.stringify(rawContent);\n      this._addMessage({ role: 'function', name, content });\n\n      if (isSingleFunctionCall) return;\n    }\n  }\n}\n\ntype CustomEvents<Event extends string> = {\n  [k in Event]: k extends keyof AbstractChatCompletionRunnerEvents ? AbstractChatCompletionRunnerEvents[k]\n  : (...args: any[]) => void;\n};\n\ntype ListenerForEvent<\n  Events extends CustomEvents<any>,\n  Event extends keyof Events,\n> = Event extends keyof AbstractChatCompletionRunnerEvents ? AbstractChatCompletionRunnerEvents[Event]\n: Events[Event];\n\ntype ListenersForEvent<Events extends CustomEvents<any>, Event extends keyof Events> = Array<{\n  listener: ListenerForEvent<Events, Event>;\n  once?: boolean;\n}>;\ntype EventParameters<Events extends CustomEvents<any>, Event extends keyof Events> = Parameters<\n  ListenerForEvent<Events, Event>\n>;\n\nexport interface AbstractChatCompletionRunnerEvents {\n  connect: () => void;\n  functionCall: (functionCall: ChatCompletionMessage.FunctionCall) => void;\n  message: (message: ChatCompletionMessage | ChatCompletionMessageParam) => void;\n  chatCompletion: (completion: ChatCompletion) => void;\n  finalContent: (contentSnapshot: string) => void;\n  finalMessage: (message: ChatCompletionMessage | ChatCompletionMessageParam) => void;\n  finalChatCompletion: (completion: ChatCompletion) => void;\n  finalFunctionCall: (functionCall: ChatCompletionMessage.FunctionCall) => void;\n  functionCallResult: (content: string) => void;\n  finalFunctionCallResult: (content: string) => void;\n  error: (error: OpenAIError) => void;\n  abort: (error: APIUserAbortError) => void;\n  end: () => void;\n  totalUsage: (usage: CompletionUsage) => void;\n}\n"]},"metadata":{},"sourceType":"module"}