{"ast":null,"code":"const fs = require('fs');\n\nconst path = require('path');\n\nconst os = require('os');\n\nconst crypto = require('crypto');\n\nconst packageJson = require('../package.json');\n\nconst version = packageJson.version;\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg; // Parse src into an Object\n\nfunction parse(src) {\n  const obj = {}; // Convert buffer to string\n\n  let lines = src.toString(); // Convert line breaks to same format\n\n  lines = lines.replace(/\\r\\n?/mg, '\\n');\n  let match;\n\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]; // Default undefined or null to empty string\n\n    let value = match[2] || ''; // Remove whitespace\n\n    value = value.trim(); // Check if double quoted\n\n    const maybeQuote = value[0]; // Remove surrounding quotes\n\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2'); // Expand newlines if double quoted\n\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n');\n      value = value.replace(/\\\\r/g, '\\r');\n    } // Add to object\n\n\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _parseVault(options) {\n  const vaultPath = _vaultPath(options); // Parse .env.vault\n\n\n  const result = DotenvModule.configDotenv({\n    path: vaultPath\n  });\n\n  if (!result.parsed) {\n    throw new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);\n  } // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenv.org/vault/.env.vault?environment=prod\"\n\n\n  const keys = _dotenvKey(options).split(',');\n\n  const length = keys.length;\n  let decrypted;\n\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim(); // Get instructions for decrypt\n\n      const attrs = _instructions(result, key); // Decrypt\n\n\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);\n      break;\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error;\n      } // try next key\n\n    }\n  } // Parse decrypted .env string\n\n\n  return DotenvModule.parse(decrypted);\n}\n\nfunction _log(message) {\n  console.log(`[dotenv@${version}][INFO] ${message}`);\n}\n\nfunction _warn(message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`);\n}\n\nfunction _debug(message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`);\n}\n\nfunction _dotenvKey(options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY;\n  } // secondary infra already contains a DOTENV_KEY environment variable\n\n\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY;\n  } // fallback to empty string\n\n\n  return '';\n}\n\nfunction _instructions(result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri;\n\n  try {\n    uri = new URL(dotenvKey);\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      throw new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development');\n    }\n\n    throw error;\n  } // Get decrypt key\n\n\n  const key = uri.password;\n\n  if (!key) {\n    throw new Error('INVALID_DOTENV_KEY: Missing key part');\n  } // Get environment\n\n\n  const environment = uri.searchParams.get('environment');\n\n  if (!environment) {\n    throw new Error('INVALID_DOTENV_KEY: Missing environment part');\n  } // Get ciphertext payload\n\n\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;\n  const ciphertext = result.parsed[environmentKey]; // DOTENV_VAULT_PRODUCTION\n\n  if (!ciphertext) {\n    throw new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);\n  }\n\n  return {\n    ciphertext,\n    key\n  };\n}\n\nfunction _vaultPath(options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env');\n\n  if (options && options.path && options.path.length > 0) {\n    dotenvPath = options.path;\n  } // Locate .env.vault\n\n\n  return dotenvPath.endsWith('.vault') ? dotenvPath : `${dotenvPath}.vault`;\n}\n\nfunction _resolveHome(envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath;\n}\n\nfunction _configVault(options) {\n  _log('Loading env from encrypted .env.vault');\n\n  const parsed = DotenvModule._parseVault(options);\n\n  let processEnv = process.env;\n\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n  }\n\n  DotenvModule.populate(processEnv, parsed, options);\n  return {\n    parsed\n  };\n}\n\nfunction configDotenv(options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env');\n  let encoding = 'utf8';\n  const debug = Boolean(options && options.debug);\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = _resolveHome(options.path);\n    }\n\n    if (options.encoding != null) {\n      encoding = options.encoding;\n    }\n  }\n\n  try {\n    // Specifying an encoding returns a string instead of a buffer\n    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, {\n      encoding\n    }));\n    let processEnv = process.env;\n\n    if (options && options.processEnv != null) {\n      processEnv = options.processEnv;\n    }\n\n    DotenvModule.populate(processEnv, parsed, options);\n    return {\n      parsed\n    };\n  } catch (e) {\n    if (debug) {\n      _debug(`Failed to load ${dotenvPath} ${e.message}`);\n    }\n\n    return {\n      error: e\n    };\n  }\n} // Populates process.env from .env file\n\n\nfunction config(options) {\n  const vaultPath = _vaultPath(options); // fallback to original dotenv if DOTENV_KEY is not set\n\n\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options);\n  } // dotenvKey exists but .env.vault file does not exist\n\n\n  if (!fs.existsSync(vaultPath)) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);\n\n    return DotenvModule.configDotenv(options);\n  }\n\n  return DotenvModule._configVault(options);\n}\n\nfunction decrypt(encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex');\n  let ciphertext = Buffer.from(encrypted, 'base64');\n  const nonce = ciphertext.slice(0, 12);\n  const authTag = ciphertext.slice(-16);\n  ciphertext = ciphertext.slice(12, -16);\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce);\n    aesgcm.setAuthTag(authTag);\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;\n  } catch (error) {\n    const isRange = error instanceof RangeError;\n    const invalidKeyLength = error.message === 'Invalid key length';\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data';\n\n    if (isRange || invalidKeyLength) {\n      const msg = 'INVALID_DOTENV_KEY: It must be 64 characters long (or more)';\n      throw new Error(msg);\n    } else if (decryptionFailed) {\n      const msg = 'DECRYPTION_FAILED: Please check your DOTENV_KEY';\n      throw new Error(msg);\n    } else {\n      console.error('Error: ', error.code);\n      console.error('Error: ', error.message);\n      throw error;\n    }\n  }\n} // Populate process.env with parsed values\n\n\nfunction populate(processEnv, parsed) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const debug = Boolean(options && options.debug);\n  const override = Boolean(options && options.override);\n\n  if (typeof parsed !== 'object') {\n    throw new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate');\n  } // Set process.env\n\n\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key];\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`);\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`);\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key];\n    }\n  }\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n};\nmodule.exports.configDotenv = DotenvModule.configDotenv;\nmodule.exports._configVault = DotenvModule._configVault;\nmodule.exports._parseVault = DotenvModule._parseVault;\nmodule.exports.config = DotenvModule.config;\nmodule.exports.decrypt = DotenvModule.decrypt;\nmodule.exports.parse = DotenvModule.parse;\nmodule.exports.populate = DotenvModule.populate;\nmodule.exports = DotenvModule;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/dotenv/lib/main.js"],"names":["fs","require","path","os","crypto","packageJson","version","LINE","parse","src","obj","lines","toString","replace","match","exec","key","value","trim","maybeQuote","_parseVault","options","vaultPath","_vaultPath","result","DotenvModule","configDotenv","parsed","Error","keys","_dotenvKey","split","length","decrypted","i","attrs","_instructions","decrypt","ciphertext","error","_log","message","console","log","_warn","_debug","DOTENV_KEY","process","env","dotenvKey","uri","URL","code","password","environment","searchParams","get","environmentKey","toUpperCase","dotenvPath","resolve","cwd","endsWith","_resolveHome","envPath","join","homedir","slice","_configVault","processEnv","populate","encoding","debug","Boolean","readFileSync","e","config","existsSync","encrypted","keyStr","Buffer","from","nonce","authTag","aesgcm","createDecipheriv","setAuthTag","update","final","isRange","RangeError","invalidKeyLength","decryptionFailed","msg","override","Object","prototype","hasOwnProperty","call","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst crypto = require('crypto')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parse src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _parseVault (options) {\n  const vaultPath = _vaultPath(options)\n\n  // Parse .env.vault\n  const result = DotenvModule.configDotenv({ path: vaultPath })\n  if (!result.parsed) {\n    throw new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenv.org/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',')\n  const length = keys.length\n\n  let decrypted\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim()\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key)\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\n\n      break\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted)\n}\n\nfunction _log (message) {\n  console.log(`[dotenv@${version}][INFO] ${message}`)\n}\n\nfunction _warn (message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`)\n}\n\nfunction _debug (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _dotenvKey (options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n  return ''\n}\n\nfunction _instructions (result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri\n  try {\n    uri = new URL(dotenvKey)\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      throw new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development')\n    }\n\n    throw error\n  }\n\n  // Get decrypt key\n  const key = uri.password\n  if (!key) {\n    throw new Error('INVALID_DOTENV_KEY: Missing key part')\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment')\n  if (!environment) {\n    throw new Error('INVALID_DOTENV_KEY: Missing environment part')\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    throw new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\n  }\n\n  return { ciphertext, key }\n}\n\nfunction _vaultPath (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n\n  if (options && options.path && options.path.length > 0) {\n    dotenvPath = options.path\n  }\n\n  // Locate .env.vault\n  return dotenvPath.endsWith('.vault') ? dotenvPath : `${dotenvPath}.vault`\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault')\n\n  const parsed = DotenvModule._parseVault(options)\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsed, options)\n\n  return { parsed }\n}\n\nfunction configDotenv (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = _resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n  }\n\n  try {\n    // Specifying an encoding returns a string instead of a buffer\n    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }))\n\n    let processEnv = process.env\n    if (options && options.processEnv != null) {\n      processEnv = options.processEnv\n    }\n\n    DotenvModule.populate(processEnv, parsed, options)\n\n    return { parsed }\n  } catch (e) {\n    if (debug) {\n      _debug(`Failed to load ${dotenvPath} ${e.message}`)\n    }\n\n    return { error: e }\n  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  const vaultPath = _vaultPath(options)\n\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options)\n  }\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!fs.existsSync(vaultPath)) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\n\n    return DotenvModule.configDotenv(options)\n  }\n\n  return DotenvModule._configVault(options)\n}\n\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\n  let ciphertext = Buffer.from(encrypted, 'base64')\n\n  const nonce = ciphertext.slice(0, 12)\n  const authTag = ciphertext.slice(-16)\n  ciphertext = ciphertext.slice(12, -16)\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\n    aesgcm.setAuthTag(authTag)\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\n  } catch (error) {\n    const isRange = error instanceof RangeError\n    const invalidKeyLength = error.message === 'Invalid key length'\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\n\n    if (isRange || invalidKeyLength) {\n      const msg = 'INVALID_DOTENV_KEY: It must be 64 characters long (or more)'\n      throw new Error(msg)\n    } else if (decryptionFailed) {\n      const msg = 'DECRYPTION_FAILED: Please check your DOTENV_KEY'\n      throw new Error(msg)\n    } else {\n      console.error('Error: ', error.code)\n      console.error('Error: ', error.message)\n      throw error\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (typeof parsed !== 'object') {\n    throw new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key]\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key]\n    }\n  }\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n}\n\nmodule.exports.configDotenv = DotenvModule.configDotenv\nmodule.exports._configVault = DotenvModule._configVault\nmodule.exports._parseVault = DotenvModule._parseVault\nmodule.exports.config = DotenvModule.config\nmodule.exports.decrypt = DotenvModule.decrypt\nmodule.exports.parse = DotenvModule.parse\nmodule.exports.populate = DotenvModule.populate\n\nmodule.exports = DotenvModule\n"]},"metadata":{},"sourceType":"script"}