{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst RuntimeModule = require(\"../RuntimeModule\");\n\nconst Template = require(\"../Template\");\n/** @typedef {import(\"../Compilation\")} Compilation */\n\n\nclass EnsureChunkRuntimeModule extends RuntimeModule {\n  /**\n   * @param {ReadonlySet<string>} runtimeRequirements runtime requirements\n   */\n  constructor(runtimeRequirements) {\n    super(\"ensure chunk\");\n    this.runtimeRequirements = runtimeRequirements;\n  }\n  /**\n   * @returns {string | null} runtime code\n   */\n\n\n  generate() {\n    const compilation =\n    /** @type {Compilation} */\n    this.compilation;\n    const {\n      runtimeTemplate\n    } = compilation; // Check if there are non initial chunks which need to be imported using require-ensure\n\n    if (this.runtimeRequirements.has(RuntimeGlobals.ensureChunkHandlers)) {\n      const withFetchPriority = this.runtimeRequirements.has(RuntimeGlobals.hasFetchPriority);\n      const handlers = RuntimeGlobals.ensureChunkHandlers;\n      return Template.asString([`${handlers} = {};`, \"// This file contains only the entry chunk.\", \"// The chunk loading function for additional chunks\", `${RuntimeGlobals.ensureChunk} = ${runtimeTemplate.basicFunction(`chunkId${withFetchPriority ? \", fetchPriority\" : \"\"}`, [`return Promise.all(Object.keys(${handlers}).reduce(${runtimeTemplate.basicFunction(\"promises, key\", [`${handlers}[key](chunkId, promises${withFetchPriority ? \", fetchPriority\" : \"\"});`, \"return promises;\"])}, []));`])};`]);\n    } else {\n      // There ensureChunk is used somewhere in the tree, so we need an empty requireEnsure\n      // function. This can happen with multiple entrypoints.\n      return Template.asString([\"// The chunk loading function for additional chunks\", \"// Since all referenced chunks are already included\", \"// in this file, this function is empty here.\", `${RuntimeGlobals.ensureChunk} = ${runtimeTemplate.returningFunction(\"Promise.resolve()\")};`]);\n    }\n  }\n\n}\n\nmodule.exports = EnsureChunkRuntimeModule;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/runtime/EnsureChunkRuntimeModule.js"],"names":["RuntimeGlobals","require","RuntimeModule","Template","EnsureChunkRuntimeModule","constructor","runtimeRequirements","generate","compilation","runtimeTemplate","has","ensureChunkHandlers","withFetchPriority","hasFetchPriority","handlers","asString","ensureChunk","basicFunction","returningFunction","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAAxB;AAEA;;;AAEA,MAAMG,wBAAN,SAAuCF,aAAvC,CAAqD;AACpD;AACD;AACA;AACCG,EAAAA,WAAW,CAACC,mBAAD,EAAsB;AAChC,UAAM,cAAN;AACA,SAAKA,mBAAL,GAA2BA,mBAA3B;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,QAAQ,GAAG;AACV,UAAMC,WAAW;AAAG;AAA4B,SAAKA,WAArD;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAsBD,WAA5B,CAFU,CAGV;;AACA,QAAI,KAAKF,mBAAL,CAAyBI,GAAzB,CAA6BV,cAAc,CAACW,mBAA5C,CAAJ,EAAsE;AACrE,YAAMC,iBAAiB,GAAG,KAAKN,mBAAL,CAAyBI,GAAzB,CACzBV,cAAc,CAACa,gBADU,CAA1B;AAGA,YAAMC,QAAQ,GAAGd,cAAc,CAACW,mBAAhC;AACA,aAAOR,QAAQ,CAACY,QAAT,CAAkB,CACvB,GAAED,QAAS,QADY,EAExB,6CAFwB,EAGxB,qDAHwB,EAIvB,GAAEd,cAAc,CAACgB,WAAY,MAAKP,eAAe,CAACQ,aAAhB,CACjC,UAASL,iBAAiB,GAAG,iBAAH,GAAuB,EAAG,EADnB,EAElC,CACE,kCAAiCE,QAAS,YAAWL,eAAe,CAACQ,aAAhB,CACrD,eADqD,EAErD,CACE,GAAEH,QAAS,0BACXF,iBAAiB,GAAG,iBAAH,GAAuB,EACxC,IAHF,EAIC,kBAJD,CAFqD,CAQpD,SATH,CAFkC,CAajC,GAjBsB,CAAlB,CAAP;AAmBA,KAxBD,MAwBO;AACN;AACA;AACA,aAAOT,QAAQ,CAACY,QAAT,CAAkB,CACxB,qDADwB,EAExB,qDAFwB,EAGxB,+CAHwB,EAIvB,GAAEf,cAAc,CAACgB,WAAY,MAAKP,eAAe,CAACS,iBAAhB,CAClC,mBADkC,CAEjC,GANsB,CAAlB,CAAP;AAQA;AACD;;AApDmD;;AAuDrDC,MAAM,CAACC,OAAP,GAAiBhB,wBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n\nclass EnsureChunkRuntimeModule extends RuntimeModule {\n\t/**\n\t * @param {ReadonlySet<string>} runtimeRequirements runtime requirements\n\t */\n\tconstructor(runtimeRequirements) {\n\t\tsuper(\"ensure chunk\");\n\t\tthis.runtimeRequirements = runtimeRequirements;\n\t}\n\n\t/**\n\t * @returns {string | null} runtime code\n\t */\n\tgenerate() {\n\t\tconst compilation = /** @type {Compilation} */ (this.compilation);\n\t\tconst { runtimeTemplate } = compilation;\n\t\t// Check if there are non initial chunks which need to be imported using require-ensure\n\t\tif (this.runtimeRequirements.has(RuntimeGlobals.ensureChunkHandlers)) {\n\t\t\tconst withFetchPriority = this.runtimeRequirements.has(\n\t\t\t\tRuntimeGlobals.hasFetchPriority\n\t\t\t);\n\t\t\tconst handlers = RuntimeGlobals.ensureChunkHandlers;\n\t\t\treturn Template.asString([\n\t\t\t\t`${handlers} = {};`,\n\t\t\t\t\"// This file contains only the entry chunk.\",\n\t\t\t\t\"// The chunk loading function for additional chunks\",\n\t\t\t\t`${RuntimeGlobals.ensureChunk} = ${runtimeTemplate.basicFunction(\n\t\t\t\t\t`chunkId${withFetchPriority ? \", fetchPriority\" : \"\"}`,\n\t\t\t\t\t[\n\t\t\t\t\t\t`return Promise.all(Object.keys(${handlers}).reduce(${runtimeTemplate.basicFunction(\n\t\t\t\t\t\t\t\"promises, key\",\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t`${handlers}[key](chunkId, promises${\n\t\t\t\t\t\t\t\t\twithFetchPriority ? \", fetchPriority\" : \"\"\n\t\t\t\t\t\t\t\t});`,\n\t\t\t\t\t\t\t\t\"return promises;\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t)}, []));`\n\t\t\t\t\t]\n\t\t\t\t)};`\n\t\t\t]);\n\t\t} else {\n\t\t\t// There ensureChunk is used somewhere in the tree, so we need an empty requireEnsure\n\t\t\t// function. This can happen with multiple entrypoints.\n\t\t\treturn Template.asString([\n\t\t\t\t\"// The chunk loading function for additional chunks\",\n\t\t\t\t\"// Since all referenced chunks are already included\",\n\t\t\t\t\"// in this file, this function is empty here.\",\n\t\t\t\t`${RuntimeGlobals.ensureChunk} = ${runtimeTemplate.returningFunction(\n\t\t\t\t\t\"Promise.resolve()\"\n\t\t\t\t)};`\n\t\t\t]);\n\t\t}\n\t}\n}\n\nmodule.exports = EnsureChunkRuntimeModule;\n"]},"metadata":{},"sourceType":"script"}