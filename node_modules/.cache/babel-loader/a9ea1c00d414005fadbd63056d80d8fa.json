{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  WEBASSEMBLY_MODULE_TYPE_ASYNC\n} = require(\"../ModuleTypeConstants\");\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst Template = require(\"../Template\");\n\nconst AsyncWasmLoadingRuntimeModule = require(\"../wasm-async/AsyncWasmLoadingRuntimeModule\");\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nclass ReadFileCompileAsyncWasmPlugin {\n  constructor() {\n    let {\n      type = \"async-node\",\n      import: useImport = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._type = type;\n    this._import = useImport;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"ReadFileCompileAsyncWasmPlugin\", compilation => {\n      const globalWasmLoading = compilation.outputOptions.wasmLoading;\n      /**\n       * @param {Chunk} chunk chunk\n       * @returns {boolean} true, if wasm loading is enabled for the chunk\n       */\n\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const wasmLoading = options && options.wasmLoading !== undefined ? options.wasmLoading : globalWasmLoading;\n        return wasmLoading === this._type;\n      };\n\n      const {\n        importMetaName\n      } = compilation.outputOptions;\n      /**\n       * @type {(path: string) => string}\n       */\n\n      const generateLoadBinaryCode = this._import ? path => Template.asString([\"Promise.all([import('fs'), import('url')]).then(([{ readFile }, { URL }]) => new Promise((resolve, reject) => {\", Template.indent([`readFile(new URL(${path}, ${importMetaName}.url), (err, buffer) => {`, Template.indent([\"if (err) return reject(err);\", \"\", \"// Fake fetch response\", \"resolve({\", Template.indent([\"arrayBuffer() { return buffer; }\"]), \"});\"]), \"});\"]), \"}))\"]) : path => Template.asString([\"new Promise(function (resolve, reject) {\", Template.indent([\"try {\", Template.indent([\"var { readFile } = require('fs');\", \"var { join } = require('path');\", \"\", `readFile(join(__dirname, ${path}), function(err, buffer){`, Template.indent([\"if (err) return reject(err);\", \"\", \"// Fake fetch response\", \"resolve({\", Template.indent([\"arrayBuffer() { return buffer; }\"]), \"});\"]), \"});\"]), \"} catch (err) { reject(err); }\"]), \"})\"]);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.instantiateWasm).tap(\"ReadFileCompileAsyncWasmPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        const chunkGraph = compilation.chunkGraph;\n\n        if (!chunkGraph.hasModuleInGraph(chunk, m => m.type === WEBASSEMBLY_MODULE_TYPE_ASYNC)) {\n          return;\n        }\n\n        set.add(RuntimeGlobals.publicPath);\n        compilation.addRuntimeModule(chunk, new AsyncWasmLoadingRuntimeModule({\n          generateLoadBinaryCode,\n          supportsStreaming: false\n        }));\n      });\n    });\n  }\n\n}\n\nmodule.exports = ReadFileCompileAsyncWasmPlugin;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/node/ReadFileCompileAsyncWasmPlugin.js"],"names":["WEBASSEMBLY_MODULE_TYPE_ASYNC","require","RuntimeGlobals","Template","AsyncWasmLoadingRuntimeModule","ReadFileCompileAsyncWasmPlugin","constructor","type","import","useImport","_type","_import","apply","compiler","hooks","thisCompilation","tap","compilation","globalWasmLoading","outputOptions","wasmLoading","isEnabledForChunk","chunk","options","getEntryOptions","undefined","importMetaName","generateLoadBinaryCode","path","asString","indent","runtimeRequirementInTree","for","instantiateWasm","set","chunkGraph","hasModuleInGraph","m","add","publicPath","addRuntimeModule","supportsStreaming","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { WEBASSEMBLY_MODULE_TYPE_ASYNC } = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst AsyncWasmLoadingRuntimeModule = require(\"../wasm-async/AsyncWasmLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ReadFileCompileAsyncWasmPlugin {\n\tconstructor({ type = \"async-node\", import: useImport = false } = {}) {\n\t\tthis._type = type;\n\t\tthis._import = useImport;\n\t}\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"ReadFileCompileAsyncWasmPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst globalWasmLoading = compilation.outputOptions.wasmLoading;\n\t\t\t\t/**\n\t\t\t\t * @param {Chunk} chunk chunk\n\t\t\t\t * @returns {boolean} true, if wasm loading is enabled for the chunk\n\t\t\t\t */\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst wasmLoading =\n\t\t\t\t\t\toptions && options.wasmLoading !== undefined\n\t\t\t\t\t\t\t? options.wasmLoading\n\t\t\t\t\t\t\t: globalWasmLoading;\n\t\t\t\t\treturn wasmLoading === this._type;\n\t\t\t\t};\n\t\t\t\tconst { importMetaName } = compilation.outputOptions;\n\t\t\t\t/**\n\t\t\t\t * @type {(path: string) => string}\n\t\t\t\t */\n\t\t\t\tconst generateLoadBinaryCode = this._import\n\t\t\t\t\t? path =>\n\t\t\t\t\t\t\tTemplate.asString([\n\t\t\t\t\t\t\t\t\"Promise.all([import('fs'), import('url')]).then(([{ readFile }, { URL }]) => new Promise((resolve, reject) => {\",\n\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t`readFile(new URL(${path}, ${importMetaName}.url), (err, buffer) => {`,\n\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\"if (err) return reject(err);\",\n\t\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t\t\"// Fake fetch response\",\n\t\t\t\t\t\t\t\t\t\t\"resolve({\",\n\t\t\t\t\t\t\t\t\t\tTemplate.indent([\"arrayBuffer() { return buffer; }\"]),\n\t\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\"}))\"\n\t\t\t\t\t\t\t])\n\t\t\t\t\t: path =>\n\t\t\t\t\t\t\tTemplate.asString([\n\t\t\t\t\t\t\t\t\"new Promise(function (resolve, reject) {\",\n\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\"try {\",\n\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\"var { readFile } = require('fs');\",\n\t\t\t\t\t\t\t\t\t\t\"var { join } = require('path');\",\n\t\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t\t`readFile(join(__dirname, ${path}), function(err, buffer){`,\n\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\"if (err) return reject(err);\",\n\t\t\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t\t\t\"// Fake fetch response\",\n\t\t\t\t\t\t\t\t\t\t\t\"resolve({\",\n\t\t\t\t\t\t\t\t\t\t\tTemplate.indent([\"arrayBuffer() { return buffer; }\"]),\n\t\t\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\"} catch (err) { reject(err); }\"\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\"})\"\n\t\t\t\t\t\t\t]);\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.instantiateWasm)\n\t\t\t\t\t.tap(\"ReadFileCompileAsyncWasmPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!chunkGraph.hasModuleInGraph(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tm => m.type === WEBASSEMBLY_MODULE_TYPE_ASYNC\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew AsyncWasmLoadingRuntimeModule({\n\t\t\t\t\t\t\t\tgenerateLoadBinaryCode,\n\t\t\t\t\t\t\t\tsupportsStreaming: false\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ReadFileCompileAsyncWasmPlugin;\n"]},"metadata":{},"sourceType":"script"}