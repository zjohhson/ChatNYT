{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst ExportWebpackRequireRuntimeModule = require(\"./ExportWebpackRequireRuntimeModule\");\n\nconst ModuleChunkLoadingRuntimeModule = require(\"./ModuleChunkLoadingRuntimeModule\");\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nclass ModuleChunkLoadingPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"ModuleChunkLoadingPlugin\", compilation => {\n      const globalChunkLoading = compilation.outputOptions.chunkLoading;\n      /**\n       * @param {Chunk} chunk chunk to check\n       * @returns {boolean} true, when the plugin is enabled for the chunk\n       */\n\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const chunkLoading = options && options.chunkLoading !== undefined ? options.chunkLoading : globalChunkLoading;\n        return chunkLoading === \"import\";\n      };\n\n      const onceForChunkSet = new WeakSet();\n      /**\n       * @param {Chunk} chunk chunk to check\n       * @param {Set<string>} set runtime requirements\n       */\n\n      const handler = (chunk, set) => {\n        if (onceForChunkSet.has(chunk)) return;\n        onceForChunkSet.add(chunk);\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.moduleFactoriesAddOnly);\n        set.add(RuntimeGlobals.hasOwnProperty);\n        compilation.addRuntimeModule(chunk, new ModuleChunkLoadingRuntimeModule(set));\n      };\n\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"ModuleChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.baseURI).tap(\"ModuleChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.externalInstallChunk).tap(\"ModuleChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.onChunksLoaded).tap(\"ModuleChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.externalInstallChunk).tap(\"ModuleChunkLoadingPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        compilation.addRuntimeModule(chunk, new ExportWebpackRequireRuntimeModule());\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"ModuleChunkLoadingPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.getChunkScriptFilename);\n      });\n    });\n  }\n\n}\n\nmodule.exports = ModuleChunkLoadingPlugin;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/esm/ModuleChunkLoadingPlugin.js"],"names":["RuntimeGlobals","require","ExportWebpackRequireRuntimeModule","ModuleChunkLoadingRuntimeModule","ModuleChunkLoadingPlugin","apply","compiler","hooks","thisCompilation","tap","compilation","globalChunkLoading","outputOptions","chunkLoading","isEnabledForChunk","chunk","options","getEntryOptions","undefined","onceForChunkSet","WeakSet","handler","set","has","add","moduleFactoriesAddOnly","hasOwnProperty","addRuntimeModule","runtimeRequirementInTree","for","ensureChunkHandlers","baseURI","externalInstallChunk","onChunksLoaded","getChunkScriptFilename","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst ExportWebpackRequireRuntimeModule = require(\"./ExportWebpackRequireRuntimeModule\");\nconst ModuleChunkLoadingRuntimeModule = require(\"./ModuleChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ModuleChunkLoadingPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"ModuleChunkLoadingPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst globalChunkLoading = compilation.outputOptions.chunkLoading;\n\t\t\t\t/**\n\t\t\t\t * @param {Chunk} chunk chunk to check\n\t\t\t\t * @returns {boolean} true, when the plugin is enabled for the chunk\n\t\t\t\t */\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst chunkLoading =\n\t\t\t\t\t\toptions && options.chunkLoading !== undefined\n\t\t\t\t\t\t\t? options.chunkLoading\n\t\t\t\t\t\t\t: globalChunkLoading;\n\t\t\t\t\treturn chunkLoading === \"import\";\n\t\t\t\t};\n\t\t\t\tconst onceForChunkSet = new WeakSet();\n\t\t\t\t/**\n\t\t\t\t * @param {Chunk} chunk chunk to check\n\t\t\t\t * @param {Set<string>} set runtime requirements\n\t\t\t\t */\n\t\t\t\tconst handler = (chunk, set) => {\n\t\t\t\t\tif (onceForChunkSet.has(chunk)) return;\n\t\t\t\t\tonceForChunkSet.add(chunk);\n\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\tset.add(RuntimeGlobals.moduleFactoriesAddOnly);\n\t\t\t\t\tset.add(RuntimeGlobals.hasOwnProperty);\n\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\tchunk,\n\t\t\t\t\t\tnew ModuleChunkLoadingRuntimeModule(set)\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(\"ModuleChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.baseURI)\n\t\t\t\t\t.tap(\"ModuleChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.externalInstallChunk)\n\t\t\t\t\t.tap(\"ModuleChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.onChunksLoaded)\n\t\t\t\t\t.tap(\"ModuleChunkLoadingPlugin\", handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.externalInstallChunk)\n\t\t\t\t\t.tap(\"ModuleChunkLoadingPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew ExportWebpackRequireRuntimeModule()\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(\"ModuleChunkLoadingPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tset.add(RuntimeGlobals.getChunkScriptFilename);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ModuleChunkLoadingPlugin;\n"]},"metadata":{},"sourceType":"script"}