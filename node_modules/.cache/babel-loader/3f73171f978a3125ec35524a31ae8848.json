{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nconst {\n  register\n} = require(\"./serialization\");\n/** @typedef {import(\"../serialization/ObjectMiddleware\").Constructor} Constructor */\n\n\nclass ClassSerializer {\n  constructor(Constructor) {\n    this.Constructor = Constructor;\n  }\n\n  serialize(obj, context) {\n    obj.serialize(context);\n  }\n\n  deserialize(context) {\n    if (typeof this.Constructor.deserialize === \"function\") {\n      return this.Constructor.deserialize(context);\n    }\n\n    const obj = new this.Constructor();\n    obj.deserialize(context);\n    return obj;\n  }\n\n}\n/**\n * @param {Constructor} Constructor the constructor\n * @param {string} request the request which will be required when deserializing\n * @param {string | null} [name] the name to make multiple serializer unique when sharing a request\n */\n\n\nmodule.exports = function (Constructor, request) {\n  let name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  register(Constructor, request, name, new ClassSerializer(Constructor));\n};","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/util/makeSerializable.js"],"names":["register","require","ClassSerializer","constructor","Constructor","serialize","obj","context","deserialize","module","exports","request","name"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,OAAO,CAAC,iBAAD,CAA5B;AAEA;;;AAEA,MAAMC,eAAN,CAAsB;AACrBC,EAAAA,WAAW,CAACC,WAAD,EAAc;AACxB,SAAKA,WAAL,GAAmBA,WAAnB;AACA;;AAEDC,EAAAA,SAAS,CAACC,GAAD,EAAMC,OAAN,EAAe;AACvBD,IAAAA,GAAG,CAACD,SAAJ,CAAcE,OAAd;AACA;;AAEDC,EAAAA,WAAW,CAACD,OAAD,EAAU;AACpB,QAAI,OAAO,KAAKH,WAAL,CAAiBI,WAAxB,KAAwC,UAA5C,EAAwD;AACvD,aAAO,KAAKJ,WAAL,CAAiBI,WAAjB,CAA6BD,OAA7B,CAAP;AACA;;AACD,UAAMD,GAAG,GAAG,IAAI,KAAKF,WAAT,EAAZ;AACAE,IAAAA,GAAG,CAACE,WAAJ,CAAgBD,OAAhB;AACA,WAAOD,GAAP;AACA;;AAhBoB;AAmBtB;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,UAACN,WAAD,EAAcO,OAAd,EAAuC;AAAA,MAAhBC,IAAgB,uEAAT,IAAS;AACvDZ,EAAAA,QAAQ,CAACI,WAAD,EAAcO,OAAd,EAAuBC,IAAvB,EAA6B,IAAIV,eAAJ,CAAoBE,WAApB,CAA7B,CAAR;AACA,CAFD","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst { register } = require(\"./serialization\");\n\n/** @typedef {import(\"../serialization/ObjectMiddleware\").Constructor} Constructor */\n\nclass ClassSerializer {\n\tconstructor(Constructor) {\n\t\tthis.Constructor = Constructor;\n\t}\n\n\tserialize(obj, context) {\n\t\tobj.serialize(context);\n\t}\n\n\tdeserialize(context) {\n\t\tif (typeof this.Constructor.deserialize === \"function\") {\n\t\t\treturn this.Constructor.deserialize(context);\n\t\t}\n\t\tconst obj = new this.Constructor();\n\t\tobj.deserialize(context);\n\t\treturn obj;\n\t}\n}\n\n/**\n * @param {Constructor} Constructor the constructor\n * @param {string} request the request which will be required when deserializing\n * @param {string | null} [name] the name to make multiple serializer unique when sharing a request\n */\nmodule.exports = (Constructor, request, name = null) => {\n\tregister(Constructor, request, name, new ClassSerializer(Constructor));\n};\n"]},"metadata":{},"sourceType":"script"}