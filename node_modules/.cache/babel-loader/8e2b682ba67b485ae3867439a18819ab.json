{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  ConcatSource,\n  PrefixSource\n} = require(\"webpack-sources\");\n\nconst CssModule = require(\"../CssModule\");\n\nconst HotUpdateChunk = require(\"../HotUpdateChunk\");\n\nconst {\n  CSS_MODULE_TYPE,\n  CSS_MODULE_TYPE_GLOBAL,\n  CSS_MODULE_TYPE_MODULE,\n  CSS_MODULE_TYPE_AUTO\n} = require(\"../ModuleTypeConstants\");\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst SelfModuleFactory = require(\"../SelfModuleFactory\");\n\nconst WebpackError = require(\"../WebpackError\");\n\nconst CssExportDependency = require(\"../dependencies/CssExportDependency\");\n\nconst CssImportDependency = require(\"../dependencies/CssImportDependency\");\n\nconst CssLocalIdentifierDependency = require(\"../dependencies/CssLocalIdentifierDependency\");\n\nconst CssSelfLocalIdentifierDependency = require(\"../dependencies/CssSelfLocalIdentifierDependency\");\n\nconst CssUrlDependency = require(\"../dependencies/CssUrlDependency\");\n\nconst StaticExportsDependency = require(\"../dependencies/StaticExportsDependency\");\n\nconst {\n  compareModulesByIdentifier\n} = require(\"../util/comparators\");\n\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\n\nconst createHash = require(\"../util/createHash\");\n\nconst memoize = require(\"../util/memoize\");\n\nconst nonNumericOnlyHash = require(\"../util/nonNumericOnlyHash\");\n\nconst CssExportsGenerator = require(\"./CssExportsGenerator\");\n\nconst CssGenerator = require(\"./CssGenerator\");\n\nconst CssParser = require(\"./CssParser\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssExperimentOptions} CssExperimentOptions */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").Output} OutputOptions */\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {import(\"../util/memoize\")} Memoize */\n\n\nconst getCssLoadingRuntimeModule = memoize(() => require(\"./CssLoadingRuntimeModule\"));\n/**\n * @param {string} name name\n * @returns {{oneOf: [{$ref: string}], definitions: *}} schema\n */\n\nconst getSchema = name => {\n  const {\n    definitions\n  } = require(\"../../schemas/WebpackOptions.json\");\n\n  return {\n    definitions,\n    oneOf: [{\n      $ref: `#/definitions/${name}`\n    }]\n  };\n};\n\nconst validateGeneratorOptions = createSchemaValidation(require(\"../../schemas/plugins/css/CssGeneratorOptions.check.js\"), () => getSchema(\"CssGeneratorOptions\"), {\n  name: \"Css Modules Plugin\",\n  baseDataPath: \"parser\"\n});\nconst validateParserOptions = createSchemaValidation(require(\"../../schemas/plugins/css/CssParserOptions.check.js\"), () => getSchema(\"CssParserOptions\"), {\n  name: \"Css Modules Plugin\",\n  baseDataPath: \"parser\"\n});\n/**\n * @param {string} str string\n * @param {boolean=} omitOptionalUnderscore if true, optional underscore is not added\n * @returns {string} escaped string\n */\n\nconst escapeCss = (str, omitOptionalUnderscore) => {\n  const escaped = `${str}`.replace( // cspell:word uffff\n  /[^a-zA-Z0-9_\\u0081-\\uffff-]/g, s => `\\\\${s}`);\n  return !omitOptionalUnderscore && /^(?!--)[0-9_-]/.test(escaped) ? `_${escaped}` : escaped;\n};\n\nconst plugin = \"CssModulesPlugin\";\n\nclass CssModulesPlugin {\n  /**\n   * @param {CssExperimentOptions} options options\n   */\n  constructor(_ref) {\n    let {\n      exportsOnly = false\n    } = _ref;\n    this._exportsOnly = exportsOnly;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(plugin, (compilation, _ref2) => {\n      let {\n        normalModuleFactory\n      } = _ref2;\n      const selfFactory = new SelfModuleFactory(compilation.moduleGraph);\n      compilation.dependencyFactories.set(CssUrlDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(CssUrlDependency, new CssUrlDependency.Template());\n      compilation.dependencyTemplates.set(CssLocalIdentifierDependency, new CssLocalIdentifierDependency.Template());\n      compilation.dependencyFactories.set(CssSelfLocalIdentifierDependency, selfFactory);\n      compilation.dependencyTemplates.set(CssSelfLocalIdentifierDependency, new CssSelfLocalIdentifierDependency.Template());\n      compilation.dependencyTemplates.set(CssExportDependency, new CssExportDependency.Template());\n      compilation.dependencyFactories.set(CssImportDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(CssImportDependency, new CssImportDependency.Template());\n      compilation.dependencyTemplates.set(StaticExportsDependency, new StaticExportsDependency.Template());\n\n      for (const type of [CSS_MODULE_TYPE, CSS_MODULE_TYPE_GLOBAL, CSS_MODULE_TYPE_MODULE, CSS_MODULE_TYPE_AUTO]) {\n        normalModuleFactory.hooks.createParser.for(type).tap(plugin, parserOptions => {\n          validateParserOptions(parserOptions);\n\n          switch (type) {\n            case CSS_MODULE_TYPE:\n            case CSS_MODULE_TYPE_AUTO:\n              return new CssParser();\n\n            case CSS_MODULE_TYPE_GLOBAL:\n              return new CssParser({\n                allowModeSwitch: false\n              });\n\n            case CSS_MODULE_TYPE_MODULE:\n              return new CssParser({\n                defaultMode: \"local\"\n              });\n          }\n        });\n        normalModuleFactory.hooks.createGenerator.for(type).tap(plugin, generatorOptions => {\n          validateGeneratorOptions(generatorOptions);\n          return this._exportsOnly ? new CssExportsGenerator() : new CssGenerator();\n        });\n        normalModuleFactory.hooks.createModuleClass.for(type).tap(plugin, (createData, resolveData) => {\n          if (resolveData.dependencies.length > 0) {\n            // When CSS is imported from CSS there is only one dependency\n            const dependency = resolveData.dependencies[0];\n\n            if (dependency instanceof CssImportDependency) {\n              const parent =\n              /** @type {CssModule} */\n              compilation.moduleGraph.getParentModule(dependency);\n\n              if (parent instanceof CssModule) {\n                /** @type {import(\"../CssModule\").Inheritance | undefined} */\n                let inheritance;\n\n                if (parent.cssLayer !== null && parent.cssLayer !== undefined || parent.supports || parent.media) {\n                  if (!inheritance) {\n                    inheritance = [];\n                  }\n\n                  inheritance.push([parent.cssLayer, parent.supports, parent.media]);\n                }\n\n                if (parent.inheritance) {\n                  if (!inheritance) {\n                    inheritance = [];\n                  }\n\n                  inheritance.push(...parent.inheritance);\n                }\n\n                return new CssModule({ ...createData,\n                  cssLayer: dependency.layer,\n                  supports: dependency.supports,\n                  media: dependency.media,\n                  inheritance\n                });\n              }\n\n              return new CssModule({ ...createData,\n                cssLayer: dependency.layer,\n                supports: dependency.supports,\n                media: dependency.media\n              });\n            }\n          }\n\n          return new CssModule(createData);\n        });\n      }\n\n      const orderedCssModulesPerChunk = new WeakMap();\n      compilation.hooks.afterCodeGeneration.tap(\"CssModulesPlugin\", () => {\n        const {\n          chunkGraph\n        } = compilation;\n\n        for (const chunk of compilation.chunks) {\n          if (CssModulesPlugin.chunkHasCss(chunk, chunkGraph)) {\n            orderedCssModulesPerChunk.set(chunk, this.getOrderedChunkCssModules(chunk, chunkGraph, compilation));\n          }\n        }\n      });\n      compilation.hooks.contentHash.tap(\"CssModulesPlugin\", chunk => {\n        const {\n          chunkGraph,\n          outputOptions: {\n            hashSalt,\n            hashDigest,\n            hashDigestLength,\n            hashFunction\n          }\n        } = compilation;\n        const modules = orderedCssModulesPerChunk.get(chunk);\n        if (modules === undefined) return;\n        const hash = createHash(hashFunction);\n        if (hashSalt) hash.update(hashSalt);\n\n        for (const module of modules) {\n          hash.update(chunkGraph.getModuleHash(module, chunk.runtime));\n        }\n\n        const digest =\n        /** @type {string} */\n        hash.digest(hashDigest);\n        chunk.contentHash.css = nonNumericOnlyHash(digest, hashDigestLength);\n      });\n      compilation.hooks.renderManifest.tap(plugin, (result, options) => {\n        const {\n          chunkGraph\n        } = compilation;\n        const {\n          hash,\n          chunk,\n          codeGenerationResults\n        } = options;\n        if (chunk instanceof HotUpdateChunk) return result;\n        /** @type {CssModule[] | undefined} */\n\n        const modules = orderedCssModulesPerChunk.get(chunk);\n\n        if (modules !== undefined) {\n          result.push({\n            render: () => this.renderChunk({\n              chunk,\n              chunkGraph,\n              codeGenerationResults,\n              uniqueName: compilation.outputOptions.uniqueName,\n              modules\n            }),\n            filenameTemplate: CssModulesPlugin.getChunkFilenameTemplate(chunk, compilation.outputOptions),\n            pathOptions: {\n              hash,\n              runtime: chunk.runtime,\n              chunk,\n              contentHashType: \"css\"\n            },\n            identifier: `css${chunk.id}`,\n            hash: chunk.contentHash.css\n          });\n        }\n\n        return result;\n      });\n      const globalChunkLoading = compilation.outputOptions.chunkLoading;\n      /**\n       * @param {Chunk} chunk the chunk\n       * @returns {boolean} true, when enabled\n       */\n\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const chunkLoading = options && options.chunkLoading !== undefined ? options.chunkLoading : globalChunkLoading;\n        return chunkLoading === \"jsonp\";\n      };\n\n      const onceForChunkSet = new WeakSet();\n      /**\n       * @param {Chunk} chunk chunk to check\n       * @param {Set<string>} set runtime requirements\n       */\n\n      const handler = (chunk, set) => {\n        if (onceForChunkSet.has(chunk)) return;\n        onceForChunkSet.add(chunk);\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.publicPath);\n        set.add(RuntimeGlobals.getChunkCssFilename);\n        set.add(RuntimeGlobals.hasOwnProperty);\n        set.add(RuntimeGlobals.moduleFactoriesAddOnly);\n        set.add(RuntimeGlobals.makeNamespaceObject);\n        const CssLoadingRuntimeModule = getCssLoadingRuntimeModule();\n        compilation.addRuntimeModule(chunk, new CssLoadingRuntimeModule(set));\n      };\n\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hasCssModules).tap(plugin, handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(plugin, handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadUpdateHandlers).tap(plugin, handler);\n    });\n  }\n  /**\n   * @param {Chunk} chunk chunk\n   * @param {Iterable<Module>} modules unordered modules\n   * @param {Compilation} compilation compilation\n   * @returns {Module[]} ordered modules\n   */\n\n\n  getModulesInOrder(chunk, modules, compilation) {\n    if (!modules) return [];\n    /** @type {Module[]} */\n\n    const modulesList = [...modules]; // Get ordered list of modules per chunk group\n    // Lists are in reverse order to allow to use Array.pop()\n\n    const modulesByChunkGroup = Array.from(chunk.groupsIterable, chunkGroup => {\n      const sortedModules = modulesList.map(module => {\n        return {\n          module,\n          index: chunkGroup.getModulePostOrderIndex(module)\n        };\n      }).filter(item => item.index !== undefined).sort((a, b) =>\n      /** @type {number} */\n      b.index -\n      /** @type {number} */\n      a.index).map(item => item.module);\n      return {\n        list: sortedModules,\n        set: new Set(sortedModules)\n      };\n    });\n    if (modulesByChunkGroup.length === 1) return modulesByChunkGroup[0].list.reverse();\n\n    const compareModuleLists = (_ref3, _ref4) => {\n      let {\n        list: a\n      } = _ref3;\n      let {\n        list: b\n      } = _ref4;\n\n      if (a.length === 0) {\n        return b.length === 0 ? 0 : 1;\n      } else {\n        if (b.length === 0) return -1;\n        return compareModulesByIdentifier(a[a.length - 1], b[b.length - 1]);\n      }\n    };\n\n    modulesByChunkGroup.sort(compareModuleLists);\n    /** @type {Module[]} */\n\n    const finalModules = [];\n\n    for (;;) {\n      const failedModules = new Set();\n      const list = modulesByChunkGroup[0].list;\n\n      if (list.length === 0) {\n        // done, everything empty\n        break;\n      }\n      /** @type {Module} */\n\n\n      let selectedModule = list[list.length - 1];\n      let hasFailed = undefined;\n\n      outer: for (;;) {\n        for (const {\n          list,\n          set\n        } of modulesByChunkGroup) {\n          if (list.length === 0) continue;\n          const lastModule = list[list.length - 1];\n          if (lastModule === selectedModule) continue;\n          if (!set.has(selectedModule)) continue;\n          failedModules.add(selectedModule);\n\n          if (failedModules.has(lastModule)) {\n            // There is a conflict, try other alternatives\n            hasFailed = lastModule;\n            continue;\n          }\n\n          selectedModule = lastModule;\n          hasFailed = false;\n          continue outer; // restart\n        }\n\n        break;\n      }\n\n      if (hasFailed) {\n        // There is a not resolve-able conflict with the selectedModule\n        if (compilation) {\n          // TODO print better warning\n          compilation.warnings.push(new WebpackError(`chunk ${chunk.name || chunk.id}\\nConflicting order between ${\n          /** @type {Module} */\n          hasFailed.readableIdentifier(compilation.requestShortener)} and ${selectedModule.readableIdentifier(compilation.requestShortener)}`));\n        }\n\n        selectedModule =\n        /** @type {Module} */\n        hasFailed;\n      } // Insert the selected module into the final modules list\n\n\n      finalModules.push(selectedModule); // Remove the selected module from all lists\n\n      for (const {\n        list,\n        set\n      } of modulesByChunkGroup) {\n        const lastModule = list[list.length - 1];\n        if (lastModule === selectedModule) list.pop();else if (hasFailed && set.has(selectedModule)) {\n          const idx = list.indexOf(selectedModule);\n          if (idx >= 0) list.splice(idx, 1);\n        }\n      }\n\n      modulesByChunkGroup.sort(compareModuleLists);\n    }\n\n    return finalModules;\n  }\n  /**\n   * @param {Chunk} chunk chunk\n   * @param {ChunkGraph} chunkGraph chunk graph\n   * @param {Compilation} compilation compilation\n   * @returns {Module[]} ordered css modules\n   */\n\n\n  getOrderedChunkCssModules(chunk, chunkGraph, compilation) {\n    return [...this.getModulesInOrder(chunk,\n    /** @type {Iterable<Module>} */\n    chunkGraph.getOrderedChunkModulesIterableBySourceType(chunk, \"css-import\", compareModulesByIdentifier), compilation), ...this.getModulesInOrder(chunk,\n    /** @type {Iterable<Module>} */\n    chunkGraph.getOrderedChunkModulesIterableBySourceType(chunk, \"css\", compareModulesByIdentifier), compilation)];\n  }\n  /**\n   * @param {Object} options options\n   * @param {string | undefined} options.uniqueName unique name\n   * @param {Chunk} options.chunk chunk\n   * @param {ChunkGraph} options.chunkGraph chunk graph\n   * @param {CodeGenerationResults} options.codeGenerationResults code generation results\n   * @param {CssModule[]} options.modules ordered css modules\n   * @returns {Source} generated source\n   */\n\n\n  renderChunk(_ref5) {\n    let {\n      uniqueName,\n      chunk,\n      chunkGraph,\n      codeGenerationResults,\n      modules\n    } = _ref5;\n    const source = new ConcatSource();\n    /** @type {string[]} */\n\n    const metaData = [];\n\n    for (const module of modules) {\n      try {\n        const codeGenResult = codeGenerationResults.get(module, chunk.runtime);\n        let moduleSource =\n        /** @type {Source} */\n        codeGenResult.sources.get(\"css\") || codeGenResult.sources.get(\"css-import\");\n        let inheritance = [[module.cssLayer, module.supports, module.media]];\n\n        if (module.inheritance) {\n          inheritance.push(...module.inheritance);\n        }\n\n        for (let i = 0; i < inheritance.length; i++) {\n          const layer = inheritance[i][0];\n          const supports = inheritance[i][1];\n          const media = inheritance[i][2];\n\n          if (media) {\n            moduleSource = new ConcatSource(`@media ${media} {\\n`, new PrefixSource(\"\\t\", moduleSource), \"}\\n\");\n          }\n\n          if (supports) {\n            moduleSource = new ConcatSource(`@supports (${supports}) {\\n`, new PrefixSource(\"\\t\", moduleSource), \"}\\n\");\n          } // Layer can be anonymous\n\n\n          if (layer !== undefined && layer !== null) {\n            moduleSource = new ConcatSource(`@layer${layer ? ` ${layer}` : \"\"} {\\n`, new PrefixSource(\"\\t\", moduleSource), \"}\\n\");\n          }\n        }\n\n        if (moduleSource) {\n          source.add(moduleSource);\n          source.add(\"\\n\");\n        }\n        /** @type {Map<string, string> | undefined} */\n\n\n        const exports = codeGenResult.data && codeGenResult.data.get(\"css-exports\");\n        let moduleId = chunkGraph.getModuleId(module) + \"\"; // When `optimization.moduleIds` is `named` the module id is a path, so we need to normalize it between platforms\n\n        if (typeof moduleId === \"string\") {\n          moduleId = moduleId.replace(/\\\\/g, \"/\");\n        }\n\n        metaData.push(`${exports ? Array.from(exports, _ref6 => {\n          let [n, v] = _ref6;\n          const shortcutValue = `${uniqueName ? uniqueName + \"-\" : \"\"}${moduleId}-${n}`;\n          return v === shortcutValue ? `${escapeCss(n)}/` : v === \"--\" + shortcutValue ? `${escapeCss(n)}%` : `${escapeCss(n)}(${escapeCss(v)})`;\n        }).join(\"\") : \"\"}${escapeCss(moduleId)}`);\n      } catch (e) {\n        /** @type {Error} */\n        e.message += `\\nduring rendering of css ${module.identifier()}`;\n        throw e;\n      }\n    }\n\n    source.add(`head{--webpack-${escapeCss((uniqueName ? uniqueName + \"-\" : \"\") + chunk.id, true)}:${metaData.join(\",\")};}`);\n    return source;\n  }\n  /**\n   * @param {Chunk} chunk chunk\n   * @param {OutputOptions} outputOptions output options\n   * @returns {Chunk[\"cssFilenameTemplate\"] | OutputOptions[\"cssFilename\"] | OutputOptions[\"cssChunkFilename\"]} used filename template\n   */\n\n\n  static getChunkFilenameTemplate(chunk, outputOptions) {\n    if (chunk.cssFilenameTemplate) {\n      return chunk.cssFilenameTemplate;\n    } else if (chunk.canBeInitial()) {\n      return outputOptions.cssFilename;\n    } else {\n      return outputOptions.cssChunkFilename;\n    }\n  }\n  /**\n   * @param {Chunk} chunk chunk\n   * @param {ChunkGraph} chunkGraph chunk graph\n   * @returns {boolean} true, when the chunk has css\n   */\n\n\n  static chunkHasCss(chunk, chunkGraph) {\n    return !!chunkGraph.getChunkModulesIterableBySourceType(chunk, \"css\") || !!chunkGraph.getChunkModulesIterableBySourceType(chunk, \"css-import\");\n  }\n\n}\n\nmodule.exports = CssModulesPlugin;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/css/CssModulesPlugin.js"],"names":["ConcatSource","PrefixSource","require","CssModule","HotUpdateChunk","CSS_MODULE_TYPE","CSS_MODULE_TYPE_GLOBAL","CSS_MODULE_TYPE_MODULE","CSS_MODULE_TYPE_AUTO","RuntimeGlobals","SelfModuleFactory","WebpackError","CssExportDependency","CssImportDependency","CssLocalIdentifierDependency","CssSelfLocalIdentifierDependency","CssUrlDependency","StaticExportsDependency","compareModulesByIdentifier","createSchemaValidation","createHash","memoize","nonNumericOnlyHash","CssExportsGenerator","CssGenerator","CssParser","getCssLoadingRuntimeModule","getSchema","name","definitions","oneOf","$ref","validateGeneratorOptions","baseDataPath","validateParserOptions","escapeCss","str","omitOptionalUnderscore","escaped","replace","s","test","plugin","CssModulesPlugin","constructor","exportsOnly","_exportsOnly","apply","compiler","hooks","compilation","tap","normalModuleFactory","selfFactory","moduleGraph","dependencyFactories","set","dependencyTemplates","Template","type","createParser","for","parserOptions","allowModeSwitch","defaultMode","createGenerator","generatorOptions","createModuleClass","createData","resolveData","dependencies","length","dependency","parent","getParentModule","inheritance","cssLayer","undefined","supports","media","push","layer","orderedCssModulesPerChunk","WeakMap","afterCodeGeneration","chunkGraph","chunk","chunks","chunkHasCss","getOrderedChunkCssModules","contentHash","outputOptions","hashSalt","hashDigest","hashDigestLength","hashFunction","modules","get","hash","update","module","getModuleHash","runtime","digest","css","renderManifest","result","options","codeGenerationResults","render","renderChunk","uniqueName","filenameTemplate","getChunkFilenameTemplate","pathOptions","contentHashType","identifier","id","globalChunkLoading","chunkLoading","isEnabledForChunk","getEntryOptions","onceForChunkSet","WeakSet","handler","has","add","publicPath","getChunkCssFilename","hasOwnProperty","moduleFactoriesAddOnly","makeNamespaceObject","CssLoadingRuntimeModule","addRuntimeModule","runtimeRequirementInTree","hasCssModules","ensureChunkHandlers","hmrDownloadUpdateHandlers","getModulesInOrder","modulesList","modulesByChunkGroup","Array","from","groupsIterable","chunkGroup","sortedModules","map","index","getModulePostOrderIndex","filter","item","sort","a","b","list","Set","reverse","compareModuleLists","finalModules","failedModules","selectedModule","hasFailed","outer","lastModule","warnings","readableIdentifier","requestShortener","pop","idx","indexOf","splice","getOrderedChunkModulesIterableBySourceType","source","metaData","codeGenResult","moduleSource","sources","i","exports","data","moduleId","getModuleId","n","v","shortcutValue","join","e","message","cssFilenameTemplate","canBeInitial","cssFilename","cssChunkFilename","getChunkModulesIterableBySourceType"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AAAEA,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,IAAiCC,OAAO,CAAC,iBAAD,CAA9C;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAM;AACLG,EAAAA,eADK;AAELC,EAAAA,sBAFK;AAGLC,EAAAA,sBAHK;AAILC,EAAAA;AAJK,IAKFN,OAAO,CAAC,wBAAD,CALX;;AAMA,MAAMO,cAAc,GAAGP,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMQ,iBAAiB,GAAGR,OAAO,CAAC,sBAAD,CAAjC;;AACA,MAAMS,YAAY,GAAGT,OAAO,CAAC,iBAAD,CAA5B;;AACA,MAAMU,mBAAmB,GAAGV,OAAO,CAAC,qCAAD,CAAnC;;AACA,MAAMW,mBAAmB,GAAGX,OAAO,CAAC,qCAAD,CAAnC;;AACA,MAAMY,4BAA4B,GAAGZ,OAAO,CAAC,8CAAD,CAA5C;;AACA,MAAMa,gCAAgC,GAAGb,OAAO,CAAC,kDAAD,CAAhD;;AACA,MAAMc,gBAAgB,GAAGd,OAAO,CAAC,kCAAD,CAAhC;;AACA,MAAMe,uBAAuB,GAAGf,OAAO,CAAC,yCAAD,CAAvC;;AACA,MAAM;AAAEgB,EAAAA;AAAF,IAAiChB,OAAO,CAAC,qBAAD,CAA9C;;AACA,MAAMiB,sBAAsB,GAAGjB,OAAO,CAAC,kCAAD,CAAtC;;AACA,MAAMkB,UAAU,GAAGlB,OAAO,CAAC,oBAAD,CAA1B;;AACA,MAAMmB,OAAO,GAAGnB,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAMoB,kBAAkB,GAAGpB,OAAO,CAAC,4BAAD,CAAlC;;AACA,MAAMqB,mBAAmB,GAAGrB,OAAO,CAAC,uBAAD,CAAnC;;AACA,MAAMsB,YAAY,GAAGtB,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAMuB,SAAS,GAAGvB,OAAO,CAAC,aAAD,CAAzB;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;AAEA,MAAMwB,0BAA0B,GAAGL,OAAO,CAAC,MAC1CnB,OAAO,CAAC,2BAAD,CADkC,CAA1C;AAIA;AACA;AACA;AACA;;AACA,MAAMyB,SAAS,GAAGC,IAAI,IAAI;AACzB,QAAM;AAAEC,IAAAA;AAAF,MAAkB3B,OAAO,CAAC,mCAAD,CAA/B;;AACA,SAAO;AACN2B,IAAAA,WADM;AAENC,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,IAAI,EAAG,iBAAgBH,IAAK;AAA9B,KAAD;AAFD,GAAP;AAIA,CAND;;AAQA,MAAMI,wBAAwB,GAAGb,sBAAsB,CACtDjB,OAAO,CAAC,wDAAD,CAD+C,EAEtD,MAAMyB,SAAS,CAAC,qBAAD,CAFuC,EAGtD;AACCC,EAAAA,IAAI,EAAE,oBADP;AAECK,EAAAA,YAAY,EAAE;AAFf,CAHsD,CAAvD;AAQA,MAAMC,qBAAqB,GAAGf,sBAAsB,CACnDjB,OAAO,CAAC,qDAAD,CAD4C,EAEnD,MAAMyB,SAAS,CAAC,kBAAD,CAFoC,EAGnD;AACCC,EAAAA,IAAI,EAAE,oBADP;AAECK,EAAAA,YAAY,EAAE;AAFf,CAHmD,CAApD;AASA;AACA;AACA;AACA;AACA;;AACA,MAAME,SAAS,GAAG,CAACC,GAAD,EAAMC,sBAAN,KAAiC;AAClD,QAAMC,OAAO,GAAI,GAAEF,GAAI,EAAP,CAASG,OAAT,EACf;AACA,gCAFe,EAGfC,CAAC,IAAK,KAAIA,CAAE,EAHG,CAAhB;AAKA,SAAO,CAACH,sBAAD,IAA2B,iBAAiBI,IAAjB,CAAsBH,OAAtB,CAA3B,GACH,IAAGA,OAAQ,EADR,GAEJA,OAFH;AAGA,CATD;;AAWA,MAAMI,MAAM,GAAG,kBAAf;;AAEA,MAAMC,gBAAN,CAAuB;AACtB;AACD;AACA;AACCC,EAAAA,WAAW,OAA0B;AAAA,QAAzB;AAAEC,MAAAA,WAAW,GAAG;AAAhB,KAAyB;AACpC,SAAKC,YAAL,GAAoBD,WAApB;AACA;AACD;AACD;AACA;AACA;AACA;;;AACCE,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACCT,MADD,EAEC,CAACQ,WAAD,YAA0C;AAAA,UAA5B;AAAEE,QAAAA;AAAF,OAA4B;AACzC,YAAMC,WAAW,GAAG,IAAI3C,iBAAJ,CAAsBwC,WAAW,CAACI,WAAlC,CAApB;AACAJ,MAAAA,WAAW,CAACK,mBAAZ,CAAgCC,GAAhC,CACCxC,gBADD,EAECoC,mBAFD;AAIAF,MAAAA,WAAW,CAACO,mBAAZ,CAAgCD,GAAhC,CACCxC,gBADD,EAEC,IAAIA,gBAAgB,CAAC0C,QAArB,EAFD;AAIAR,MAAAA,WAAW,CAACO,mBAAZ,CAAgCD,GAAhC,CACC1C,4BADD,EAEC,IAAIA,4BAA4B,CAAC4C,QAAjC,EAFD;AAIAR,MAAAA,WAAW,CAACK,mBAAZ,CAAgCC,GAAhC,CACCzC,gCADD,EAECsC,WAFD;AAIAH,MAAAA,WAAW,CAACO,mBAAZ,CAAgCD,GAAhC,CACCzC,gCADD,EAEC,IAAIA,gCAAgC,CAAC2C,QAArC,EAFD;AAIAR,MAAAA,WAAW,CAACO,mBAAZ,CAAgCD,GAAhC,CACC5C,mBADD,EAEC,IAAIA,mBAAmB,CAAC8C,QAAxB,EAFD;AAIAR,MAAAA,WAAW,CAACK,mBAAZ,CAAgCC,GAAhC,CACC3C,mBADD,EAECuC,mBAFD;AAIAF,MAAAA,WAAW,CAACO,mBAAZ,CAAgCD,GAAhC,CACC3C,mBADD,EAEC,IAAIA,mBAAmB,CAAC6C,QAAxB,EAFD;AAIAR,MAAAA,WAAW,CAACO,mBAAZ,CAAgCD,GAAhC,CACCvC,uBADD,EAEC,IAAIA,uBAAuB,CAACyC,QAA5B,EAFD;;AAIA,WAAK,MAAMC,IAAX,IAAmB,CAClBtD,eADkB,EAElBC,sBAFkB,EAGlBC,sBAHkB,EAIlBC,oBAJkB,CAAnB,EAKG;AACF4C,QAAAA,mBAAmB,CAACH,KAApB,CAA0BW,YAA1B,CACEC,GADF,CACMF,IADN,EAEER,GAFF,CAEMT,MAFN,EAEcoB,aAAa,IAAI;AAC7B5B,UAAAA,qBAAqB,CAAC4B,aAAD,CAArB;;AAEA,kBAAQH,IAAR;AACC,iBAAKtD,eAAL;AACA,iBAAKG,oBAAL;AACC,qBAAO,IAAIiB,SAAJ,EAAP;;AACD,iBAAKnB,sBAAL;AACC,qBAAO,IAAImB,SAAJ,CAAc;AACpBsC,gBAAAA,eAAe,EAAE;AADG,eAAd,CAAP;;AAGD,iBAAKxD,sBAAL;AACC,qBAAO,IAAIkB,SAAJ,CAAc;AACpBuC,gBAAAA,WAAW,EAAE;AADO,eAAd,CAAP;AATF;AAaA,SAlBF;AAmBAZ,QAAAA,mBAAmB,CAACH,KAApB,CAA0BgB,eAA1B,CACEJ,GADF,CACMF,IADN,EAEER,GAFF,CAEMT,MAFN,EAEcwB,gBAAgB,IAAI;AAChClC,UAAAA,wBAAwB,CAACkC,gBAAD,CAAxB;AACA,iBAAO,KAAKpB,YAAL,GACJ,IAAIvB,mBAAJ,EADI,GAEJ,IAAIC,YAAJ,EAFH;AAGA,SAPF;AAQA4B,QAAAA,mBAAmB,CAACH,KAApB,CAA0BkB,iBAA1B,CACEN,GADF,CACMF,IADN,EAEER,GAFF,CAEMT,MAFN,EAEc,CAAC0B,UAAD,EAAaC,WAAb,KAA6B;AACzC,cAAIA,WAAW,CAACC,YAAZ,CAAyBC,MAAzB,GAAkC,CAAtC,EAAyC;AACxC;AACA,kBAAMC,UAAU,GAAGH,WAAW,CAACC,YAAZ,CAAyB,CAAzB,CAAnB;;AAEA,gBAAIE,UAAU,YAAY3D,mBAA1B,EAA+C;AAC9C,oBAAM4D,MAAM;AACX;AACCvB,cAAAA,WAAW,CAACI,WAAZ,CAAwBoB,eAAxB,CAAwCF,UAAxC,CAFF;;AAIA,kBAAIC,MAAM,YAAYtE,SAAtB,EAAiC;AAChC;AACA,oBAAIwE,WAAJ;;AAEA,oBACEF,MAAM,CAACG,QAAP,KAAoB,IAApB,IACAH,MAAM,CAACG,QAAP,KAAoBC,SADrB,IAEAJ,MAAM,CAACK,QAFP,IAGAL,MAAM,CAACM,KAJR,EAKE;AACD,sBAAI,CAACJ,WAAL,EAAkB;AACjBA,oBAAAA,WAAW,GAAG,EAAd;AACA;;AAEDA,kBAAAA,WAAW,CAACK,IAAZ,CAAiB,CAChBP,MAAM,CAACG,QADS,EAEhBH,MAAM,CAACK,QAFS,EAGhBL,MAAM,CAACM,KAHS,CAAjB;AAKA;;AAED,oBAAIN,MAAM,CAACE,WAAX,EAAwB;AACvB,sBAAI,CAACA,WAAL,EAAkB;AACjBA,oBAAAA,WAAW,GAAG,EAAd;AACA;;AAEDA,kBAAAA,WAAW,CAACK,IAAZ,CAAiB,GAAGP,MAAM,CAACE,WAA3B;AACA;;AAED,uBAAO,IAAIxE,SAAJ,CAAc,EACpB,GAAGiE,UADiB;AAEpBQ,kBAAAA,QAAQ,EAAEJ,UAAU,CAACS,KAFD;AAGpBH,kBAAAA,QAAQ,EAAEN,UAAU,CAACM,QAHD;AAIpBC,kBAAAA,KAAK,EAAEP,UAAU,CAACO,KAJE;AAKpBJ,kBAAAA;AALoB,iBAAd,CAAP;AAOA;;AAED,qBAAO,IAAIxE,SAAJ,CAAc,EACpB,GAAGiE,UADiB;AAEpBQ,gBAAAA,QAAQ,EAAEJ,UAAU,CAACS,KAFD;AAGpBH,gBAAAA,QAAQ,EAAEN,UAAU,CAACM,QAHD;AAIpBC,gBAAAA,KAAK,EAAEP,UAAU,CAACO;AAJE,eAAd,CAAP;AAMA;AACD;;AAED,iBAAO,IAAI5E,SAAJ,CAAciE,UAAd,CAAP;AACA,SA5DF;AA6DA;;AACD,YAAMc,yBAAyB,GAAG,IAAIC,OAAJ,EAAlC;AACAjC,MAAAA,WAAW,CAACD,KAAZ,CAAkBmC,mBAAlB,CAAsCjC,GAAtC,CAA0C,kBAA1C,EAA8D,MAAM;AACnE,cAAM;AAAEkC,UAAAA;AAAF,YAAiBnC,WAAvB;;AACA,aAAK,MAAMoC,KAAX,IAAoBpC,WAAW,CAACqC,MAAhC,EAAwC;AACvC,cAAI5C,gBAAgB,CAAC6C,WAAjB,CAA6BF,KAA7B,EAAoCD,UAApC,CAAJ,EAAqD;AACpDH,YAAAA,yBAAyB,CAAC1B,GAA1B,CACC8B,KADD,EAEC,KAAKG,yBAAL,CAA+BH,KAA/B,EAAsCD,UAAtC,EAAkDnC,WAAlD,CAFD;AAIA;AACD;AACD,OAVD;AAWAA,MAAAA,WAAW,CAACD,KAAZ,CAAkByC,WAAlB,CAA8BvC,GAA9B,CAAkC,kBAAlC,EAAsDmC,KAAK,IAAI;AAC9D,cAAM;AACLD,UAAAA,UADK;AAELM,UAAAA,aAAa,EAAE;AACdC,YAAAA,QADc;AAEdC,YAAAA,UAFc;AAGdC,YAAAA,gBAHc;AAIdC,YAAAA;AAJc;AAFV,YAQF7C,WARJ;AASA,cAAM8C,OAAO,GAAGd,yBAAyB,CAACe,GAA1B,CAA8BX,KAA9B,CAAhB;AACA,YAAIU,OAAO,KAAKnB,SAAhB,EAA2B;AAC3B,cAAMqB,IAAI,GAAG9E,UAAU,CAAC2E,YAAD,CAAvB;AACA,YAAIH,QAAJ,EAAcM,IAAI,CAACC,MAAL,CAAYP,QAAZ;;AACd,aAAK,MAAMQ,MAAX,IAAqBJ,OAArB,EAA8B;AAC7BE,UAAAA,IAAI,CAACC,MAAL,CAAYd,UAAU,CAACgB,aAAX,CAAyBD,MAAzB,EAAiCd,KAAK,CAACgB,OAAvC,CAAZ;AACA;;AACD,cAAMC,MAAM;AAAG;AAAuBL,QAAAA,IAAI,CAACK,MAAL,CAAYV,UAAZ,CAAtC;AACAP,QAAAA,KAAK,CAACI,WAAN,CAAkBc,GAAlB,GAAwBlF,kBAAkB,CAACiF,MAAD,EAAST,gBAAT,CAA1C;AACA,OAnBD;AAoBA5C,MAAAA,WAAW,CAACD,KAAZ,CAAkBwD,cAAlB,CAAiCtD,GAAjC,CAAqCT,MAArC,EAA6C,CAACgE,MAAD,EAASC,OAAT,KAAqB;AACjE,cAAM;AAAEtB,UAAAA;AAAF,YAAiBnC,WAAvB;AACA,cAAM;AAAEgD,UAAAA,IAAF;AAAQZ,UAAAA,KAAR;AAAesB,UAAAA;AAAf,YAAyCD,OAA/C;AAEA,YAAIrB,KAAK,YAAYlF,cAArB,EAAqC,OAAOsG,MAAP;AAErC;;AACA,cAAMV,OAAO,GAAGd,yBAAyB,CAACe,GAA1B,CAA8BX,KAA9B,CAAhB;;AACA,YAAIU,OAAO,KAAKnB,SAAhB,EAA2B;AAC1B6B,UAAAA,MAAM,CAAC1B,IAAP,CAAY;AACX6B,YAAAA,MAAM,EAAE,MACP,KAAKC,WAAL,CAAiB;AAChBxB,cAAAA,KADgB;AAEhBD,cAAAA,UAFgB;AAGhBuB,cAAAA,qBAHgB;AAIhBG,cAAAA,UAAU,EAAE7D,WAAW,CAACyC,aAAZ,CAA0BoB,UAJtB;AAKhBf,cAAAA;AALgB,aAAjB,CAFU;AASXgB,YAAAA,gBAAgB,EAAErE,gBAAgB,CAACsE,wBAAjB,CACjB3B,KADiB,EAEjBpC,WAAW,CAACyC,aAFK,CATP;AAaXuB,YAAAA,WAAW,EAAE;AACZhB,cAAAA,IADY;AAEZI,cAAAA,OAAO,EAAEhB,KAAK,CAACgB,OAFH;AAGZhB,cAAAA,KAHY;AAIZ6B,cAAAA,eAAe,EAAE;AAJL,aAbF;AAmBXC,YAAAA,UAAU,EAAG,MAAK9B,KAAK,CAAC+B,EAAG,EAnBhB;AAoBXnB,YAAAA,IAAI,EAAEZ,KAAK,CAACI,WAAN,CAAkBc;AApBb,WAAZ;AAsBA;;AACD,eAAOE,MAAP;AACA,OAjCD;AAkCA,YAAMY,kBAAkB,GAAGpE,WAAW,CAACyC,aAAZ,CAA0B4B,YAArD;AACA;AACJ;AACA;AACA;;AACI,YAAMC,iBAAiB,GAAGlC,KAAK,IAAI;AAClC,cAAMqB,OAAO,GAAGrB,KAAK,CAACmC,eAAN,EAAhB;AACA,cAAMF,YAAY,GACjBZ,OAAO,IAAIA,OAAO,CAACY,YAAR,KAAyB1C,SAApC,GACG8B,OAAO,CAACY,YADX,GAEGD,kBAHJ;AAIA,eAAOC,YAAY,KAAK,OAAxB;AACA,OAPD;;AAQA,YAAMG,eAAe,GAAG,IAAIC,OAAJ,EAAxB;AACA;AACJ;AACA;AACA;;AACI,YAAMC,OAAO,GAAG,CAACtC,KAAD,EAAQ9B,GAAR,KAAgB;AAC/B,YAAIkE,eAAe,CAACG,GAAhB,CAAoBvC,KAApB,CAAJ,EAAgC;AAChCoC,QAAAA,eAAe,CAACI,GAAhB,CAAoBxC,KAApB;AACA,YAAI,CAACkC,iBAAiB,CAAClC,KAAD,CAAtB,EAA+B;AAE/B9B,QAAAA,GAAG,CAACsE,GAAJ,CAAQrH,cAAc,CAACsH,UAAvB;AACAvE,QAAAA,GAAG,CAACsE,GAAJ,CAAQrH,cAAc,CAACuH,mBAAvB;AACAxE,QAAAA,GAAG,CAACsE,GAAJ,CAAQrH,cAAc,CAACwH,cAAvB;AACAzE,QAAAA,GAAG,CAACsE,GAAJ,CAAQrH,cAAc,CAACyH,sBAAvB;AACA1E,QAAAA,GAAG,CAACsE,GAAJ,CAAQrH,cAAc,CAAC0H,mBAAvB;AAEA,cAAMC,uBAAuB,GAAG1G,0BAA0B,EAA1D;AACAwB,QAAAA,WAAW,CAACmF,gBAAZ,CAA6B/C,KAA7B,EAAoC,IAAI8C,uBAAJ,CAA4B5E,GAA5B,CAApC;AACA,OAbD;;AAcAN,MAAAA,WAAW,CAACD,KAAZ,CAAkBqF,wBAAlB,CACEzE,GADF,CACMpD,cAAc,CAAC8H,aADrB,EAEEpF,GAFF,CAEMT,MAFN,EAEckF,OAFd;AAGA1E,MAAAA,WAAW,CAACD,KAAZ,CAAkBqF,wBAAlB,CACEzE,GADF,CACMpD,cAAc,CAAC+H,mBADrB,EAEErF,GAFF,CAEMT,MAFN,EAEckF,OAFd;AAGA1E,MAAAA,WAAW,CAACD,KAAZ,CAAkBqF,wBAAlB,CACEzE,GADF,CACMpD,cAAc,CAACgI,yBADrB,EAEEtF,GAFF,CAEMT,MAFN,EAEckF,OAFd;AAGA,KAlPF;AAoPA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCc,EAAAA,iBAAiB,CAACpD,KAAD,EAAQU,OAAR,EAAiB9C,WAAjB,EAA8B;AAC9C,QAAI,CAAC8C,OAAL,EAAc,OAAO,EAAP;AAEd;;AACA,UAAM2C,WAAW,GAAG,CAAC,GAAG3C,OAAJ,CAApB,CAJ8C,CAM9C;AACA;;AACA,UAAM4C,mBAAmB,GAAGC,KAAK,CAACC,IAAN,CAAWxD,KAAK,CAACyD,cAAjB,EAAiCC,UAAU,IAAI;AAC1E,YAAMC,aAAa,GAAGN,WAAW,CAC/BO,GADoB,CAChB9C,MAAM,IAAI;AACd,eAAO;AACNA,UAAAA,MADM;AAEN+C,UAAAA,KAAK,EAAEH,UAAU,CAACI,uBAAX,CAAmChD,MAAnC;AAFD,SAAP;AAIA,OANoB,EAOpBiD,MAPoB,CAObC,IAAI,IAAIA,IAAI,CAACH,KAAL,KAAetE,SAPV,EAQpB0E,IARoB,CASpB,CAACC,CAAD,EAAIC,CAAJ;AACC;AAAuBA,MAAAA,CAAC,CAACN,KAAH;AAAY;AAAuBK,MAAAA,CAAC,CAACL,KAVxC,EAYpBD,GAZoB,CAYhBI,IAAI,IAAIA,IAAI,CAAClD,MAZG,CAAtB;AAcA,aAAO;AAAEsD,QAAAA,IAAI,EAAET,aAAR;AAAuBzF,QAAAA,GAAG,EAAE,IAAImG,GAAJ,CAAQV,aAAR;AAA5B,OAAP;AACA,KAhB2B,CAA5B;AAkBA,QAAIL,mBAAmB,CAACrE,MAApB,KAA+B,CAAnC,EACC,OAAOqE,mBAAmB,CAAC,CAAD,CAAnB,CAAuBc,IAAvB,CAA4BE,OAA5B,EAAP;;AAED,UAAMC,kBAAkB,GAAG,kBAA8B;AAAA,UAA7B;AAAEH,QAAAA,IAAI,EAAEF;AAAR,OAA6B;AAAA,UAAhB;AAAEE,QAAAA,IAAI,EAAED;AAAR,OAAgB;;AACxD,UAAID,CAAC,CAACjF,MAAF,KAAa,CAAjB,EAAoB;AACnB,eAAOkF,CAAC,CAAClF,MAAF,KAAa,CAAb,GAAiB,CAAjB,GAAqB,CAA5B;AACA,OAFD,MAEO;AACN,YAAIkF,CAAC,CAAClF,MAAF,KAAa,CAAjB,EAAoB,OAAO,CAAC,CAAR;AACpB,eAAOrD,0BAA0B,CAACsI,CAAC,CAACA,CAAC,CAACjF,MAAF,GAAW,CAAZ,CAAF,EAAkBkF,CAAC,CAACA,CAAC,CAAClF,MAAF,GAAW,CAAZ,CAAnB,CAAjC;AACA;AACD,KAPD;;AASAqE,IAAAA,mBAAmB,CAACW,IAApB,CAAyBM,kBAAzB;AAEA;;AACA,UAAMC,YAAY,GAAG,EAArB;;AAEA,aAAS;AACR,YAAMC,aAAa,GAAG,IAAIJ,GAAJ,EAAtB;AACA,YAAMD,IAAI,GAAGd,mBAAmB,CAAC,CAAD,CAAnB,CAAuBc,IAApC;;AACA,UAAIA,IAAI,CAACnF,MAAL,KAAgB,CAApB,EAAuB;AACtB;AACA;AACA;AACD;;;AACA,UAAIyF,cAAc,GAAGN,IAAI,CAACA,IAAI,CAACnF,MAAL,GAAc,CAAf,CAAzB;AACA,UAAI0F,SAAS,GAAGpF,SAAhB;;AACAqF,MAAAA,KAAK,EAAE,SAAS;AACf,aAAK,MAAM;AAAER,UAAAA,IAAF;AAAQlG,UAAAA;AAAR,SAAX,IAA4BoF,mBAA5B,EAAiD;AAChD,cAAIc,IAAI,CAACnF,MAAL,KAAgB,CAApB,EAAuB;AACvB,gBAAM4F,UAAU,GAAGT,IAAI,CAACA,IAAI,CAACnF,MAAL,GAAc,CAAf,CAAvB;AACA,cAAI4F,UAAU,KAAKH,cAAnB,EAAmC;AACnC,cAAI,CAACxG,GAAG,CAACqE,GAAJ,CAAQmC,cAAR,CAAL,EAA8B;AAC9BD,UAAAA,aAAa,CAACjC,GAAd,CAAkBkC,cAAlB;;AACA,cAAID,aAAa,CAAClC,GAAd,CAAkBsC,UAAlB,CAAJ,EAAmC;AAClC;AACAF,YAAAA,SAAS,GAAGE,UAAZ;AACA;AACA;;AACDH,UAAAA,cAAc,GAAGG,UAAjB;AACAF,UAAAA,SAAS,GAAG,KAAZ;AACA,mBAASC,KAAT,CAbgD,CAahC;AAChB;;AACD;AACA;;AACD,UAAID,SAAJ,EAAe;AACd;AACA,YAAI/G,WAAJ,EAAiB;AAChB;AACAA,UAAAA,WAAW,CAACkH,QAAZ,CAAqBpF,IAArB,CACC,IAAIrE,YAAJ,CACE,SAAQ2E,KAAK,CAAC1D,IAAN,IAAc0D,KAAK,CAAC+B,EAAG;AAC/B;AACC4C,UAAAA,SAAD,CAAYI,kBAAZ,CAA+BnH,WAAW,CAACoH,gBAA3C,CACA,QAAON,cAAc,CAACK,kBAAf,CACPnH,WAAW,CAACoH,gBADL,CAEN,EANH,CADD;AAUA;;AACDN,QAAAA,cAAc;AAAG;AAAuBC,QAAAA,SAAxC;AACA,OA5CO,CA6CR;;;AACAH,MAAAA,YAAY,CAAC9E,IAAb,CAAkBgF,cAAlB,EA9CQ,CA+CR;;AACA,WAAK,MAAM;AAAEN,QAAAA,IAAF;AAAQlG,QAAAA;AAAR,OAAX,IAA4BoF,mBAA5B,EAAiD;AAChD,cAAMuB,UAAU,GAAGT,IAAI,CAACA,IAAI,CAACnF,MAAL,GAAc,CAAf,CAAvB;AACA,YAAI4F,UAAU,KAAKH,cAAnB,EAAmCN,IAAI,CAACa,GAAL,GAAnC,KACK,IAAIN,SAAS,IAAIzG,GAAG,CAACqE,GAAJ,CAAQmC,cAAR,CAAjB,EAA0C;AAC9C,gBAAMQ,GAAG,GAAGd,IAAI,CAACe,OAAL,CAAaT,cAAb,CAAZ;AACA,cAAIQ,GAAG,IAAI,CAAX,EAAcd,IAAI,CAACgB,MAAL,CAAYF,GAAZ,EAAiB,CAAjB;AACd;AACD;;AACD5B,MAAAA,mBAAmB,CAACW,IAApB,CAAyBM,kBAAzB;AACA;;AACD,WAAOC,YAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCrE,EAAAA,yBAAyB,CAACH,KAAD,EAAQD,UAAR,EAAoBnC,WAApB,EAAiC;AACzD,WAAO,CACN,GAAG,KAAKwF,iBAAL,CACFpD,KADE;AAEF;AAECD,IAAAA,UAAU,CAACsF,0CAAX,CACCrF,KADD,EAEC,YAFD,EAGCpE,0BAHD,CAJC,EAUFgC,WAVE,CADG,EAaN,GAAG,KAAKwF,iBAAL,CACFpD,KADE;AAEF;AAECD,IAAAA,UAAU,CAACsF,0CAAX,CACCrF,KADD,EAEC,KAFD,EAGCpE,0BAHD,CAJC,EAUFgC,WAVE,CAbG,CAAP;AA0BA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC4D,EAAAA,WAAW,QAMR;AAAA,QANS;AACXC,MAAAA,UADW;AAEXzB,MAAAA,KAFW;AAGXD,MAAAA,UAHW;AAIXuB,MAAAA,qBAJW;AAKXZ,MAAAA;AALW,KAMT;AACF,UAAM4E,MAAM,GAAG,IAAI5K,YAAJ,EAAf;AACA;;AACA,UAAM6K,QAAQ,GAAG,EAAjB;;AACA,SAAK,MAAMzE,MAAX,IAAqBJ,OAArB,EAA8B;AAC7B,UAAI;AACH,cAAM8E,aAAa,GAAGlE,qBAAqB,CAACX,GAAtB,CAA0BG,MAA1B,EAAkCd,KAAK,CAACgB,OAAxC,CAAtB;AAEA,YAAIyE,YAAY;AACf;AAECD,QAAAA,aAAa,CAACE,OAAd,CAAsB/E,GAAtB,CAA0B,KAA1B,KACC6E,aAAa,CAACE,OAAd,CAAsB/E,GAAtB,CAA0B,YAA1B,CAJH;AAOA,YAAItB,WAAW,GAAG,CAAC,CAACyB,MAAM,CAACxB,QAAR,EAAkBwB,MAAM,CAACtB,QAAzB,EAAmCsB,MAAM,CAACrB,KAA1C,CAAD,CAAlB;;AAEA,YAAIqB,MAAM,CAACzB,WAAX,EAAwB;AACvBA,UAAAA,WAAW,CAACK,IAAZ,CAAiB,GAAGoB,MAAM,CAACzB,WAA3B;AACA;;AAED,aAAK,IAAIsG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtG,WAAW,CAACJ,MAAhC,EAAwC0G,CAAC,EAAzC,EAA6C;AAC5C,gBAAMhG,KAAK,GAAGN,WAAW,CAACsG,CAAD,CAAX,CAAe,CAAf,CAAd;AACA,gBAAMnG,QAAQ,GAAGH,WAAW,CAACsG,CAAD,CAAX,CAAe,CAAf,CAAjB;AACA,gBAAMlG,KAAK,GAAGJ,WAAW,CAACsG,CAAD,CAAX,CAAe,CAAf,CAAd;;AAEA,cAAIlG,KAAJ,EAAW;AACVgG,YAAAA,YAAY,GAAG,IAAI/K,YAAJ,CACb,UAAS+E,KAAM,MADF,EAEd,IAAI9E,YAAJ,CAAiB,IAAjB,EAAuB8K,YAAvB,CAFc,EAGd,KAHc,CAAf;AAKA;;AAED,cAAIjG,QAAJ,EAAc;AACbiG,YAAAA,YAAY,GAAG,IAAI/K,YAAJ,CACb,cAAa8E,QAAS,OADT,EAEd,IAAI7E,YAAJ,CAAiB,IAAjB,EAAuB8K,YAAvB,CAFc,EAGd,KAHc,CAAf;AAKA,WAnB2C,CAqB5C;;;AACA,cAAI9F,KAAK,KAAKJ,SAAV,IAAuBI,KAAK,KAAK,IAArC,EAA2C;AAC1C8F,YAAAA,YAAY,GAAG,IAAI/K,YAAJ,CACb,SAAQiF,KAAK,GAAI,IAAGA,KAAM,EAAb,GAAiB,EAAG,MADpB,EAEd,IAAIhF,YAAJ,CAAiB,IAAjB,EAAuB8K,YAAvB,CAFc,EAGd,KAHc,CAAf;AAKA;AACD;;AAED,YAAIA,YAAJ,EAAkB;AACjBH,UAAAA,MAAM,CAAC9C,GAAP,CAAWiD,YAAX;AACAH,UAAAA,MAAM,CAAC9C,GAAP,CAAW,IAAX;AACA;AACD;;;AACA,cAAMoD,OAAO,GACZJ,aAAa,CAACK,IAAd,IAAsBL,aAAa,CAACK,IAAd,CAAmBlF,GAAnB,CAAuB,aAAvB,CADvB;AAEA,YAAImF,QAAQ,GAAG/F,UAAU,CAACgG,WAAX,CAAuBjF,MAAvB,IAAiC,EAAhD,CAtDG,CAwDH;;AACA,YAAI,OAAOgF,QAAP,KAAoB,QAAxB,EAAkC;AACjCA,UAAAA,QAAQ,GAAGA,QAAQ,CAAC7I,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,CAAX;AACA;;AAEDsI,QAAAA,QAAQ,CAAC7F,IAAT,CACE,GACAkG,OAAO,GACJrC,KAAK,CAACC,IAAN,CAAWoC,OAAX,EAAoB,SAAY;AAAA,cAAX,CAACI,CAAD,EAAIC,CAAJ,CAAW;AAChC,gBAAMC,aAAa,GAAI,GACtBzE,UAAU,GAAGA,UAAU,GAAG,GAAhB,GAAsB,EAChC,GAAEqE,QAAS,IAAGE,CAAE,EAFjB;AAGA,iBAAOC,CAAC,KAAKC,aAAN,GACH,GAAErJ,SAAS,CAACmJ,CAAD,CAAI,GADZ,GAEJC,CAAC,KAAK,OAAOC,aAAb,GACC,GAAErJ,SAAS,CAACmJ,CAAD,CAAI,GADhB,GAEC,GAAEnJ,SAAS,CAACmJ,CAAD,CAAI,IAAGnJ,SAAS,CAACoJ,CAAD,CAAI,GAJnC;AAKC,SATD,EASGE,IATH,CASQ,EATR,CADI,GAWJ,EACH,GAAEtJ,SAAS,CAACiJ,QAAD,CAAW,EAdxB;AAgBA,OA7ED,CA6EE,OAAOM,CAAP,EAAU;AACX;AACCA,QAAAA,CAAD,CAAIC,OAAJ,IAAgB,6BAA4BvF,MAAM,CAACgB,UAAP,EAAoB,EAAhE;AACA,cAAMsE,CAAN;AACA;AACD;;AACDd,IAAAA,MAAM,CAAC9C,GAAP,CACE,kBAAiB3F,SAAS,CAC1B,CAAC4E,UAAU,GAAGA,UAAU,GAAG,GAAhB,GAAsB,EAAjC,IAAuCzB,KAAK,CAAC+B,EADnB,EAE1B,IAF0B,CAGzB,IAAGwD,QAAQ,CAACY,IAAT,CAAc,GAAd,CAAmB,IAJzB;AAMA,WAAOb,MAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACgC,SAAxB3D,wBAAwB,CAAC3B,KAAD,EAAQK,aAAR,EAAuB;AACrD,QAAIL,KAAK,CAACsG,mBAAV,EAA+B;AAC9B,aAAOtG,KAAK,CAACsG,mBAAb;AACA,KAFD,MAEO,IAAItG,KAAK,CAACuG,YAAN,EAAJ,EAA0B;AAChC,aAAOlG,aAAa,CAACmG,WAArB;AACA,KAFM,MAEA;AACN,aAAOnG,aAAa,CAACoG,gBAArB;AACA;AACD;AAED;AACD;AACA;AACA;AACA;;;AACmB,SAAXvG,WAAW,CAACF,KAAD,EAAQD,UAAR,EAAoB;AACrC,WACC,CAAC,CAACA,UAAU,CAAC2G,mCAAX,CAA+C1G,KAA/C,EAAsD,KAAtD,CAAF,IACA,CAAC,CAACD,UAAU,CAAC2G,mCAAX,CAA+C1G,KAA/C,EAAsD,YAAtD,CAFH;AAIA;;AA7hBqB;;AAgiBvBc,MAAM,CAAC8E,OAAP,GAAiBvI,gBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { ConcatSource, PrefixSource } = require(\"webpack-sources\");\nconst CssModule = require(\"../CssModule\");\nconst HotUpdateChunk = require(\"../HotUpdateChunk\");\nconst {\n\tCSS_MODULE_TYPE,\n\tCSS_MODULE_TYPE_GLOBAL,\n\tCSS_MODULE_TYPE_MODULE,\n\tCSS_MODULE_TYPE_AUTO\n} = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst SelfModuleFactory = require(\"../SelfModuleFactory\");\nconst WebpackError = require(\"../WebpackError\");\nconst CssExportDependency = require(\"../dependencies/CssExportDependency\");\nconst CssImportDependency = require(\"../dependencies/CssImportDependency\");\nconst CssLocalIdentifierDependency = require(\"../dependencies/CssLocalIdentifierDependency\");\nconst CssSelfLocalIdentifierDependency = require(\"../dependencies/CssSelfLocalIdentifierDependency\");\nconst CssUrlDependency = require(\"../dependencies/CssUrlDependency\");\nconst StaticExportsDependency = require(\"../dependencies/StaticExportsDependency\");\nconst { compareModulesByIdentifier } = require(\"../util/comparators\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst createHash = require(\"../util/createHash\");\nconst memoize = require(\"../util/memoize\");\nconst nonNumericOnlyHash = require(\"../util/nonNumericOnlyHash\");\nconst CssExportsGenerator = require(\"./CssExportsGenerator\");\nconst CssGenerator = require(\"./CssGenerator\");\nconst CssParser = require(\"./CssParser\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssExperimentOptions} CssExperimentOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").Output} OutputOptions */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../util/memoize\")} Memoize */\n\nconst getCssLoadingRuntimeModule = memoize(() =>\n\trequire(\"./CssLoadingRuntimeModule\")\n);\n\n/**\n * @param {string} name name\n * @returns {{oneOf: [{$ref: string}], definitions: *}} schema\n */\nconst getSchema = name => {\n\tconst { definitions } = require(\"../../schemas/WebpackOptions.json\");\n\treturn {\n\t\tdefinitions,\n\t\toneOf: [{ $ref: `#/definitions/${name}` }]\n\t};\n};\n\nconst validateGeneratorOptions = createSchemaValidation(\n\trequire(\"../../schemas/plugins/css/CssGeneratorOptions.check.js\"),\n\t() => getSchema(\"CssGeneratorOptions\"),\n\t{\n\t\tname: \"Css Modules Plugin\",\n\t\tbaseDataPath: \"parser\"\n\t}\n);\nconst validateParserOptions = createSchemaValidation(\n\trequire(\"../../schemas/plugins/css/CssParserOptions.check.js\"),\n\t() => getSchema(\"CssParserOptions\"),\n\t{\n\t\tname: \"Css Modules Plugin\",\n\t\tbaseDataPath: \"parser\"\n\t}\n);\n\n/**\n * @param {string} str string\n * @param {boolean=} omitOptionalUnderscore if true, optional underscore is not added\n * @returns {string} escaped string\n */\nconst escapeCss = (str, omitOptionalUnderscore) => {\n\tconst escaped = `${str}`.replace(\n\t\t// cspell:word uffff\n\t\t/[^a-zA-Z0-9_\\u0081-\\uffff-]/g,\n\t\ts => `\\\\${s}`\n\t);\n\treturn !omitOptionalUnderscore && /^(?!--)[0-9_-]/.test(escaped)\n\t\t? `_${escaped}`\n\t\t: escaped;\n};\n\nconst plugin = \"CssModulesPlugin\";\n\nclass CssModulesPlugin {\n\t/**\n\t * @param {CssExperimentOptions} options options\n\t */\n\tconstructor({ exportsOnly = false }) {\n\t\tthis._exportsOnly = exportsOnly;\n\t}\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\tplugin,\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst selfFactory = new SelfModuleFactory(compilation.moduleGraph);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tCssUrlDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCssUrlDependency,\n\t\t\t\t\tnew CssUrlDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCssLocalIdentifierDependency,\n\t\t\t\t\tnew CssLocalIdentifierDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tCssSelfLocalIdentifierDependency,\n\t\t\t\t\tselfFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCssSelfLocalIdentifierDependency,\n\t\t\t\t\tnew CssSelfLocalIdentifierDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCssExportDependency,\n\t\t\t\t\tnew CssExportDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tCssImportDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCssImportDependency,\n\t\t\t\t\tnew CssImportDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tStaticExportsDependency,\n\t\t\t\t\tnew StaticExportsDependency.Template()\n\t\t\t\t);\n\t\t\t\tfor (const type of [\n\t\t\t\t\tCSS_MODULE_TYPE,\n\t\t\t\t\tCSS_MODULE_TYPE_GLOBAL,\n\t\t\t\t\tCSS_MODULE_TYPE_MODULE,\n\t\t\t\t\tCSS_MODULE_TYPE_AUTO\n\t\t\t\t]) {\n\t\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t\t.for(type)\n\t\t\t\t\t\t.tap(plugin, parserOptions => {\n\t\t\t\t\t\t\tvalidateParserOptions(parserOptions);\n\n\t\t\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\t\t\tcase CSS_MODULE_TYPE:\n\t\t\t\t\t\t\t\tcase CSS_MODULE_TYPE_AUTO:\n\t\t\t\t\t\t\t\t\treturn new CssParser();\n\t\t\t\t\t\t\t\tcase CSS_MODULE_TYPE_GLOBAL:\n\t\t\t\t\t\t\t\t\treturn new CssParser({\n\t\t\t\t\t\t\t\t\t\tallowModeSwitch: false\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tcase CSS_MODULE_TYPE_MODULE:\n\t\t\t\t\t\t\t\t\treturn new CssParser({\n\t\t\t\t\t\t\t\t\t\tdefaultMode: \"local\"\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t\t.for(type)\n\t\t\t\t\t\t.tap(plugin, generatorOptions => {\n\t\t\t\t\t\t\tvalidateGeneratorOptions(generatorOptions);\n\t\t\t\t\t\t\treturn this._exportsOnly\n\t\t\t\t\t\t\t\t? new CssExportsGenerator()\n\t\t\t\t\t\t\t\t: new CssGenerator();\n\t\t\t\t\t\t});\n\t\t\t\t\tnormalModuleFactory.hooks.createModuleClass\n\t\t\t\t\t\t.for(type)\n\t\t\t\t\t\t.tap(plugin, (createData, resolveData) => {\n\t\t\t\t\t\t\tif (resolveData.dependencies.length > 0) {\n\t\t\t\t\t\t\t\t// When CSS is imported from CSS there is only one dependency\n\t\t\t\t\t\t\t\tconst dependency = resolveData.dependencies[0];\n\n\t\t\t\t\t\t\t\tif (dependency instanceof CssImportDependency) {\n\t\t\t\t\t\t\t\t\tconst parent =\n\t\t\t\t\t\t\t\t\t\t/** @type {CssModule} */\n\t\t\t\t\t\t\t\t\t\t(compilation.moduleGraph.getParentModule(dependency));\n\n\t\t\t\t\t\t\t\t\tif (parent instanceof CssModule) {\n\t\t\t\t\t\t\t\t\t\t/** @type {import(\"../CssModule\").Inheritance | undefined} */\n\t\t\t\t\t\t\t\t\t\tlet inheritance;\n\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t(parent.cssLayer !== null &&\n\t\t\t\t\t\t\t\t\t\t\t\tparent.cssLayer !== undefined) ||\n\t\t\t\t\t\t\t\t\t\t\tparent.supports ||\n\t\t\t\t\t\t\t\t\t\t\tparent.media\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tif (!inheritance) {\n\t\t\t\t\t\t\t\t\t\t\t\tinheritance = [];\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tinheritance.push([\n\t\t\t\t\t\t\t\t\t\t\t\tparent.cssLayer,\n\t\t\t\t\t\t\t\t\t\t\t\tparent.supports,\n\t\t\t\t\t\t\t\t\t\t\t\tparent.media\n\t\t\t\t\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (parent.inheritance) {\n\t\t\t\t\t\t\t\t\t\t\tif (!inheritance) {\n\t\t\t\t\t\t\t\t\t\t\t\tinheritance = [];\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tinheritance.push(...parent.inheritance);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\treturn new CssModule({\n\t\t\t\t\t\t\t\t\t\t\t...createData,\n\t\t\t\t\t\t\t\t\t\t\tcssLayer: dependency.layer,\n\t\t\t\t\t\t\t\t\t\t\tsupports: dependency.supports,\n\t\t\t\t\t\t\t\t\t\t\tmedia: dependency.media,\n\t\t\t\t\t\t\t\t\t\t\tinheritance\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturn new CssModule({\n\t\t\t\t\t\t\t\t\t\t...createData,\n\t\t\t\t\t\t\t\t\t\tcssLayer: dependency.layer,\n\t\t\t\t\t\t\t\t\t\tsupports: dependency.supports,\n\t\t\t\t\t\t\t\t\t\tmedia: dependency.media\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn new CssModule(createData);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tconst orderedCssModulesPerChunk = new WeakMap();\n\t\t\t\tcompilation.hooks.afterCodeGeneration.tap(\"CssModulesPlugin\", () => {\n\t\t\t\t\tconst { chunkGraph } = compilation;\n\t\t\t\t\tfor (const chunk of compilation.chunks) {\n\t\t\t\t\t\tif (CssModulesPlugin.chunkHasCss(chunk, chunkGraph)) {\n\t\t\t\t\t\t\torderedCssModulesPerChunk.set(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tthis.getOrderedChunkCssModules(chunk, chunkGraph, compilation)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tcompilation.hooks.contentHash.tap(\"CssModulesPlugin\", chunk => {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\toutputOptions: {\n\t\t\t\t\t\t\thashSalt,\n\t\t\t\t\t\t\thashDigest,\n\t\t\t\t\t\t\thashDigestLength,\n\t\t\t\t\t\t\thashFunction\n\t\t\t\t\t\t}\n\t\t\t\t\t} = compilation;\n\t\t\t\t\tconst modules = orderedCssModulesPerChunk.get(chunk);\n\t\t\t\t\tif (modules === undefined) return;\n\t\t\t\t\tconst hash = createHash(hashFunction);\n\t\t\t\t\tif (hashSalt) hash.update(hashSalt);\n\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\thash.update(chunkGraph.getModuleHash(module, chunk.runtime));\n\t\t\t\t\t}\n\t\t\t\t\tconst digest = /** @type {string} */ (hash.digest(hashDigest));\n\t\t\t\t\tchunk.contentHash.css = nonNumericOnlyHash(digest, hashDigestLength);\n\t\t\t\t});\n\t\t\t\tcompilation.hooks.renderManifest.tap(plugin, (result, options) => {\n\t\t\t\t\tconst { chunkGraph } = compilation;\n\t\t\t\t\tconst { hash, chunk, codeGenerationResults } = options;\n\n\t\t\t\t\tif (chunk instanceof HotUpdateChunk) return result;\n\n\t\t\t\t\t/** @type {CssModule[] | undefined} */\n\t\t\t\t\tconst modules = orderedCssModulesPerChunk.get(chunk);\n\t\t\t\t\tif (modules !== undefined) {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\trender: () =>\n\t\t\t\t\t\t\t\tthis.renderChunk({\n\t\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\t\t\t\tcodeGenerationResults,\n\t\t\t\t\t\t\t\t\tuniqueName: compilation.outputOptions.uniqueName,\n\t\t\t\t\t\t\t\t\tmodules\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tfilenameTemplate: CssModulesPlugin.getChunkFilenameTemplate(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tcompilation.outputOptions\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tpathOptions: {\n\t\t\t\t\t\t\t\thash,\n\t\t\t\t\t\t\t\truntime: chunk.runtime,\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tcontentHashType: \"css\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tidentifier: `css${chunk.id}`,\n\t\t\t\t\t\t\thash: chunk.contentHash.css\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t});\n\t\t\t\tconst globalChunkLoading = compilation.outputOptions.chunkLoading;\n\t\t\t\t/**\n\t\t\t\t * @param {Chunk} chunk the chunk\n\t\t\t\t * @returns {boolean} true, when enabled\n\t\t\t\t */\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst chunkLoading =\n\t\t\t\t\t\toptions && options.chunkLoading !== undefined\n\t\t\t\t\t\t\t? options.chunkLoading\n\t\t\t\t\t\t\t: globalChunkLoading;\n\t\t\t\t\treturn chunkLoading === \"jsonp\";\n\t\t\t\t};\n\t\t\t\tconst onceForChunkSet = new WeakSet();\n\t\t\t\t/**\n\t\t\t\t * @param {Chunk} chunk chunk to check\n\t\t\t\t * @param {Set<string>} set runtime requirements\n\t\t\t\t */\n\t\t\t\tconst handler = (chunk, set) => {\n\t\t\t\t\tif (onceForChunkSet.has(chunk)) return;\n\t\t\t\t\tonceForChunkSet.add(chunk);\n\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\n\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\tset.add(RuntimeGlobals.getChunkCssFilename);\n\t\t\t\t\tset.add(RuntimeGlobals.hasOwnProperty);\n\t\t\t\t\tset.add(RuntimeGlobals.moduleFactoriesAddOnly);\n\t\t\t\t\tset.add(RuntimeGlobals.makeNamespaceObject);\n\n\t\t\t\t\tconst CssLoadingRuntimeModule = getCssLoadingRuntimeModule();\n\t\t\t\t\tcompilation.addRuntimeModule(chunk, new CssLoadingRuntimeModule(set));\n\t\t\t\t};\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hasCssModules)\n\t\t\t\t\t.tap(plugin, handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(plugin, handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadUpdateHandlers)\n\t\t\t\t\t.tap(plugin, handler);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * @param {Chunk} chunk chunk\n\t * @param {Iterable<Module>} modules unordered modules\n\t * @param {Compilation} compilation compilation\n\t * @returns {Module[]} ordered modules\n\t */\n\tgetModulesInOrder(chunk, modules, compilation) {\n\t\tif (!modules) return [];\n\n\t\t/** @type {Module[]} */\n\t\tconst modulesList = [...modules];\n\n\t\t// Get ordered list of modules per chunk group\n\t\t// Lists are in reverse order to allow to use Array.pop()\n\t\tconst modulesByChunkGroup = Array.from(chunk.groupsIterable, chunkGroup => {\n\t\t\tconst sortedModules = modulesList\n\t\t\t\t.map(module => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmodule,\n\t\t\t\t\t\tindex: chunkGroup.getModulePostOrderIndex(module)\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t\t.filter(item => item.index !== undefined)\n\t\t\t\t.sort(\n\t\t\t\t\t(a, b) =>\n\t\t\t\t\t\t/** @type {number} */ (b.index) - /** @type {number} */ (a.index)\n\t\t\t\t)\n\t\t\t\t.map(item => item.module);\n\n\t\t\treturn { list: sortedModules, set: new Set(sortedModules) };\n\t\t});\n\n\t\tif (modulesByChunkGroup.length === 1)\n\t\t\treturn modulesByChunkGroup[0].list.reverse();\n\n\t\tconst compareModuleLists = ({ list: a }, { list: b }) => {\n\t\t\tif (a.length === 0) {\n\t\t\t\treturn b.length === 0 ? 0 : 1;\n\t\t\t} else {\n\t\t\t\tif (b.length === 0) return -1;\n\t\t\t\treturn compareModulesByIdentifier(a[a.length - 1], b[b.length - 1]);\n\t\t\t}\n\t\t};\n\n\t\tmodulesByChunkGroup.sort(compareModuleLists);\n\n\t\t/** @type {Module[]} */\n\t\tconst finalModules = [];\n\n\t\tfor (;;) {\n\t\t\tconst failedModules = new Set();\n\t\t\tconst list = modulesByChunkGroup[0].list;\n\t\t\tif (list.length === 0) {\n\t\t\t\t// done, everything empty\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/** @type {Module} */\n\t\t\tlet selectedModule = list[list.length - 1];\n\t\t\tlet hasFailed = undefined;\n\t\t\touter: for (;;) {\n\t\t\t\tfor (const { list, set } of modulesByChunkGroup) {\n\t\t\t\t\tif (list.length === 0) continue;\n\t\t\t\t\tconst lastModule = list[list.length - 1];\n\t\t\t\t\tif (lastModule === selectedModule) continue;\n\t\t\t\t\tif (!set.has(selectedModule)) continue;\n\t\t\t\t\tfailedModules.add(selectedModule);\n\t\t\t\t\tif (failedModules.has(lastModule)) {\n\t\t\t\t\t\t// There is a conflict, try other alternatives\n\t\t\t\t\t\thasFailed = lastModule;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tselectedModule = lastModule;\n\t\t\t\t\thasFailed = false;\n\t\t\t\t\tcontinue outer; // restart\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (hasFailed) {\n\t\t\t\t// There is a not resolve-able conflict with the selectedModule\n\t\t\t\tif (compilation) {\n\t\t\t\t\t// TODO print better warning\n\t\t\t\t\tcompilation.warnings.push(\n\t\t\t\t\t\tnew WebpackError(\n\t\t\t\t\t\t\t`chunk ${chunk.name || chunk.id}\\nConflicting order between ${\n\t\t\t\t\t\t\t\t/** @type {Module} */\n\t\t\t\t\t\t\t\t(hasFailed).readableIdentifier(compilation.requestShortener)\n\t\t\t\t\t\t\t} and ${selectedModule.readableIdentifier(\n\t\t\t\t\t\t\t\tcompilation.requestShortener\n\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tselectedModule = /** @type {Module} */ (hasFailed);\n\t\t\t}\n\t\t\t// Insert the selected module into the final modules list\n\t\t\tfinalModules.push(selectedModule);\n\t\t\t// Remove the selected module from all lists\n\t\t\tfor (const { list, set } of modulesByChunkGroup) {\n\t\t\t\tconst lastModule = list[list.length - 1];\n\t\t\t\tif (lastModule === selectedModule) list.pop();\n\t\t\t\telse if (hasFailed && set.has(selectedModule)) {\n\t\t\t\t\tconst idx = list.indexOf(selectedModule);\n\t\t\t\t\tif (idx >= 0) list.splice(idx, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmodulesByChunkGroup.sort(compareModuleLists);\n\t\t}\n\t\treturn finalModules;\n\t}\n\n\t/**\n\t * @param {Chunk} chunk chunk\n\t * @param {ChunkGraph} chunkGraph chunk graph\n\t * @param {Compilation} compilation compilation\n\t * @returns {Module[]} ordered css modules\n\t */\n\tgetOrderedChunkCssModules(chunk, chunkGraph, compilation) {\n\t\treturn [\n\t\t\t...this.getModulesInOrder(\n\t\t\t\tchunk,\n\t\t\t\t/** @type {Iterable<Module>} */\n\t\t\t\t(\n\t\t\t\t\tchunkGraph.getOrderedChunkModulesIterableBySourceType(\n\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\"css-import\",\n\t\t\t\t\t\tcompareModulesByIdentifier\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tcompilation\n\t\t\t),\n\t\t\t...this.getModulesInOrder(\n\t\t\t\tchunk,\n\t\t\t\t/** @type {Iterable<Module>} */\n\t\t\t\t(\n\t\t\t\t\tchunkGraph.getOrderedChunkModulesIterableBySourceType(\n\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\"css\",\n\t\t\t\t\t\tcompareModulesByIdentifier\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tcompilation\n\t\t\t)\n\t\t];\n\t}\n\n\t/**\n\t * @param {Object} options options\n\t * @param {string | undefined} options.uniqueName unique name\n\t * @param {Chunk} options.chunk chunk\n\t * @param {ChunkGraph} options.chunkGraph chunk graph\n\t * @param {CodeGenerationResults} options.codeGenerationResults code generation results\n\t * @param {CssModule[]} options.modules ordered css modules\n\t * @returns {Source} generated source\n\t */\n\trenderChunk({\n\t\tuniqueName,\n\t\tchunk,\n\t\tchunkGraph,\n\t\tcodeGenerationResults,\n\t\tmodules\n\t}) {\n\t\tconst source = new ConcatSource();\n\t\t/** @type {string[]} */\n\t\tconst metaData = [];\n\t\tfor (const module of modules) {\n\t\t\ttry {\n\t\t\t\tconst codeGenResult = codeGenerationResults.get(module, chunk.runtime);\n\n\t\t\t\tlet moduleSource =\n\t\t\t\t\t/** @type {Source} */\n\t\t\t\t\t(\n\t\t\t\t\t\tcodeGenResult.sources.get(\"css\") ||\n\t\t\t\t\t\t\tcodeGenResult.sources.get(\"css-import\")\n\t\t\t\t\t);\n\n\t\t\t\tlet inheritance = [[module.cssLayer, module.supports, module.media]];\n\n\t\t\t\tif (module.inheritance) {\n\t\t\t\t\tinheritance.push(...module.inheritance);\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < inheritance.length; i++) {\n\t\t\t\t\tconst layer = inheritance[i][0];\n\t\t\t\t\tconst supports = inheritance[i][1];\n\t\t\t\t\tconst media = inheritance[i][2];\n\n\t\t\t\t\tif (media) {\n\t\t\t\t\t\tmoduleSource = new ConcatSource(\n\t\t\t\t\t\t\t`@media ${media} {\\n`,\n\t\t\t\t\t\t\tnew PrefixSource(\"\\t\", moduleSource),\n\t\t\t\t\t\t\t\"}\\n\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (supports) {\n\t\t\t\t\t\tmoduleSource = new ConcatSource(\n\t\t\t\t\t\t\t`@supports (${supports}) {\\n`,\n\t\t\t\t\t\t\tnew PrefixSource(\"\\t\", moduleSource),\n\t\t\t\t\t\t\t\"}\\n\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Layer can be anonymous\n\t\t\t\t\tif (layer !== undefined && layer !== null) {\n\t\t\t\t\t\tmoduleSource = new ConcatSource(\n\t\t\t\t\t\t\t`@layer${layer ? ` ${layer}` : \"\"} {\\n`,\n\t\t\t\t\t\t\tnew PrefixSource(\"\\t\", moduleSource),\n\t\t\t\t\t\t\t\"}\\n\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (moduleSource) {\n\t\t\t\t\tsource.add(moduleSource);\n\t\t\t\t\tsource.add(\"\\n\");\n\t\t\t\t}\n\t\t\t\t/** @type {Map<string, string> | undefined} */\n\t\t\t\tconst exports =\n\t\t\t\t\tcodeGenResult.data && codeGenResult.data.get(\"css-exports\");\n\t\t\t\tlet moduleId = chunkGraph.getModuleId(module) + \"\";\n\n\t\t\t\t// When `optimization.moduleIds` is `named` the module id is a path, so we need to normalize it between platforms\n\t\t\t\tif (typeof moduleId === \"string\") {\n\t\t\t\t\tmoduleId = moduleId.replace(/\\\\/g, \"/\");\n\t\t\t\t}\n\n\t\t\t\tmetaData.push(\n\t\t\t\t\t`${\n\t\t\t\t\t\texports\n\t\t\t\t\t\t\t? Array.from(exports, ([n, v]) => {\n\t\t\t\t\t\t\t\t\tconst shortcutValue = `${\n\t\t\t\t\t\t\t\t\t\tuniqueName ? uniqueName + \"-\" : \"\"\n\t\t\t\t\t\t\t\t\t}${moduleId}-${n}`;\n\t\t\t\t\t\t\t\t\treturn v === shortcutValue\n\t\t\t\t\t\t\t\t\t\t? `${escapeCss(n)}/`\n\t\t\t\t\t\t\t\t\t\t: v === \"--\" + shortcutValue\n\t\t\t\t\t\t\t\t\t\t? `${escapeCss(n)}%`\n\t\t\t\t\t\t\t\t\t\t: `${escapeCss(n)}(${escapeCss(v)})`;\n\t\t\t\t\t\t\t  }).join(\"\")\n\t\t\t\t\t\t\t: \"\"\n\t\t\t\t\t}${escapeCss(moduleId)}`\n\t\t\t\t);\n\t\t\t} catch (e) {\n\t\t\t\t/** @type {Error} */\n\t\t\t\t(e).message += `\\nduring rendering of css ${module.identifier()}`;\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t\tsource.add(\n\t\t\t`head{--webpack-${escapeCss(\n\t\t\t\t(uniqueName ? uniqueName + \"-\" : \"\") + chunk.id,\n\t\t\t\ttrue\n\t\t\t)}:${metaData.join(\",\")};}`\n\t\t);\n\t\treturn source;\n\t}\n\n\t/**\n\t * @param {Chunk} chunk chunk\n\t * @param {OutputOptions} outputOptions output options\n\t * @returns {Chunk[\"cssFilenameTemplate\"] | OutputOptions[\"cssFilename\"] | OutputOptions[\"cssChunkFilename\"]} used filename template\n\t */\n\tstatic getChunkFilenameTemplate(chunk, outputOptions) {\n\t\tif (chunk.cssFilenameTemplate) {\n\t\t\treturn chunk.cssFilenameTemplate;\n\t\t} else if (chunk.canBeInitial()) {\n\t\t\treturn outputOptions.cssFilename;\n\t\t} else {\n\t\t\treturn outputOptions.cssChunkFilename;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Chunk} chunk chunk\n\t * @param {ChunkGraph} chunkGraph chunk graph\n\t * @returns {boolean} true, when the chunk has css\n\t */\n\tstatic chunkHasCss(chunk, chunkGraph) {\n\t\treturn (\n\t\t\t!!chunkGraph.getChunkModulesIterableBySourceType(chunk, \"css\") ||\n\t\t\t!!chunkGraph.getChunkModulesIterableBySourceType(chunk, \"css-import\")\n\t\t);\n\t}\n}\n\nmodule.exports = CssModulesPlugin;\n"]},"metadata":{},"sourceType":"script"}