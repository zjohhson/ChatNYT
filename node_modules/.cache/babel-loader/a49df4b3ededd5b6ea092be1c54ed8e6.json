{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst basename = require(\"./getPaths\").basename;\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\n\nmodule.exports = class CloneBasenamePlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"CloneBasenamePlugin\", (request, resolveContext, callback) => {\n      const requestPath =\n      /** @type {string} */\n      request.path;\n      const filename =\n      /** @type {string} */\n      basename(requestPath);\n      const filePath = resolver.join(requestPath, filename);\n      /** @type {ResolveRequest} */\n\n      const obj = { ...request,\n        path: filePath,\n        relativePath: request.relativePath && resolver.join(request.relativePath, filename)\n      };\n      resolver.doResolve(target, obj, \"using path: \" + filePath, resolveContext, callback);\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/enhanced-resolve/lib/CloneBasenamePlugin.js"],"names":["basename","require","module","exports","CloneBasenamePlugin","constructor","source","target","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","requestPath","path","filename","filePath","join","obj","relativePath","doResolve"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBD,QAAvC;AAEA;;AACA;;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,mBAAN,CAA0B;AAC1C;AACD;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiB;AAC3B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAT,CAAoB,KAAKH,MAAzB,CAAf;AACAE,IAAAA,QAAQ,CACNE,OADF,CACU,KAAKL,MADf,EAEEM,QAFF,CAEW,qBAFX,EAEkC,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;AACvE,YAAMC,WAAW;AAAG;AAAuBH,MAAAA,OAAO,CAACI,IAAnD;AACA,YAAMC,QAAQ;AAAG;AAAuBlB,MAAAA,QAAQ,CAACgB,WAAD,CAAhD;AACA,YAAMG,QAAQ,GAAGV,QAAQ,CAACW,IAAT,CAAcJ,WAAd,EAA2BE,QAA3B,CAAjB;AACA;;AACA,YAAMG,GAAG,GAAG,EACX,GAAGR,OADQ;AAEXI,QAAAA,IAAI,EAAEE,QAFK;AAGXG,QAAAA,YAAY,EACXT,OAAO,CAACS,YAAR,IACAb,QAAQ,CAACW,IAAT,CAAcP,OAAO,CAACS,YAAtB,EAAoCJ,QAApC;AALU,OAAZ;AAOAT,MAAAA,QAAQ,CAACc,SAAT,CACChB,MADD,EAECc,GAFD,EAGC,iBAAiBF,QAHlB,EAICL,cAJD,EAKCC,QALD;AAOA,KArBF;AAsBA;;AAtCyC,CAA3C","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst basename = require(\"./getPaths\").basename;\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class CloneBasenamePlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"CloneBasenamePlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst requestPath = /** @type {string} */ (request.path);\n\t\t\t\tconst filename = /** @type {string} */ (basename(requestPath));\n\t\t\t\tconst filePath = resolver.join(requestPath, filename);\n\t\t\t\t/** @type {ResolveRequest} */\n\t\t\t\tconst obj = {\n\t\t\t\t\t...request,\n\t\t\t\t\tpath: filePath,\n\t\t\t\t\trelativePath:\n\t\t\t\t\t\trequest.relativePath &&\n\t\t\t\t\t\tresolver.join(request.relativePath, filename)\n\t\t\t\t};\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\tobj,\n\t\t\t\t\t\"using path: \" + filePath,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\tcallback\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}