{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst RuntimeModule = require(\"../RuntimeModule\");\n\nconst Template = require(\"../Template\");\n\nconst {\n  getChunkFilenameTemplate,\n  chunkHasJs\n} = require(\"../javascript/JavascriptModulesPlugin\");\n\nconst {\n  getInitialChunkIds\n} = require(\"../javascript/StartupHelpers\");\n\nconst compileBooleanMatcher = require(\"../util/compileBooleanMatcher\");\n\nconst {\n  getUndoPath\n} = require(\"../util/identifier\");\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n\n\nclass ImportScriptsChunkLoadingRuntimeModule extends RuntimeModule {\n  /**\n   * @param {Set<string>} runtimeRequirements runtime requirements\n   * @param {boolean} withCreateScriptUrl with createScriptUrl support\n   */\n  constructor(runtimeRequirements, withCreateScriptUrl) {\n    super(\"importScripts chunk loading\", RuntimeModule.STAGE_ATTACH);\n    this.runtimeRequirements = runtimeRequirements;\n    this._withCreateScriptUrl = withCreateScriptUrl;\n  }\n  /**\n   * @private\n   * @param {Chunk} chunk chunk\n   * @returns {string} generated code\n   */\n\n\n  _generateBaseUri(chunk) {\n    const options = chunk.getEntryOptions();\n\n    if (options && options.baseUri) {\n      return `${RuntimeGlobals.baseURI} = ${JSON.stringify(options.baseUri)};`;\n    }\n\n    const compilation =\n    /** @type {Compilation} */\n    this.compilation;\n    const outputName = compilation.getPath(getChunkFilenameTemplate(chunk, compilation.outputOptions), {\n      chunk,\n      contentHashType: \"javascript\"\n    });\n    const rootOutputDir = getUndoPath(outputName,\n    /** @type {string} */\n    compilation.outputOptions.path, false);\n    return `${RuntimeGlobals.baseURI} = self.location + ${JSON.stringify(rootOutputDir ? \"/../\" + rootOutputDir : \"\")};`;\n  }\n  /**\n   * @returns {string | null} runtime code\n   */\n\n\n  generate() {\n    const compilation =\n    /** @type {Compilation} */\n    this.compilation;\n    const fn = RuntimeGlobals.ensureChunkHandlers;\n    const withBaseURI = this.runtimeRequirements.has(RuntimeGlobals.baseURI);\n    const withLoading = this.runtimeRequirements.has(RuntimeGlobals.ensureChunkHandlers);\n    const withHmr = this.runtimeRequirements.has(RuntimeGlobals.hmrDownloadUpdateHandlers);\n    const withHmrManifest = this.runtimeRequirements.has(RuntimeGlobals.hmrDownloadManifest);\n    const globalObject = compilation.runtimeTemplate.globalObject;\n    const chunkLoadingGlobalExpr = `${globalObject}[${JSON.stringify(compilation.outputOptions.chunkLoadingGlobal)}]`;\n    const chunkGraph =\n    /** @type {ChunkGraph} */\n    this.chunkGraph;\n    const chunk =\n    /** @type {Chunk} */\n    this.chunk;\n    const hasJsMatcher = compileBooleanMatcher(chunkGraph.getChunkConditionMap(chunk, chunkHasJs));\n    const initialChunkIds = getInitialChunkIds(chunk, chunkGraph, chunkHasJs);\n    const stateExpression = withHmr ? `${RuntimeGlobals.hmrRuntimeStatePrefix}_importScripts` : undefined;\n    const runtimeTemplate = compilation.runtimeTemplate;\n    const {\n      _withCreateScriptUrl: withCreateScriptUrl\n    } = this;\n    return Template.asString([withBaseURI ? this._generateBaseUri(chunk) : \"// no baseURI\", \"\", \"// object to store loaded chunks\", '// \"1\" means \"already loaded\"', `var installedChunks = ${stateExpression ? `${stateExpression} = ${stateExpression} || ` : \"\"}{`, Template.indent(Array.from(initialChunkIds, id => `${JSON.stringify(id)}: 1`).join(\",\\n\")), \"};\", \"\", withLoading ? Template.asString([\"// importScripts chunk loading\", `var installChunk = ${runtimeTemplate.basicFunction(\"data\", [runtimeTemplate.destructureArray([\"chunkIds\", \"moreModules\", \"runtime\"], \"data\"), \"for(var moduleId in moreModules) {\", Template.indent([`if(${RuntimeGlobals.hasOwnProperty}(moreModules, moduleId)) {`, Template.indent(`${RuntimeGlobals.moduleFactories}[moduleId] = moreModules[moduleId];`), \"}\"]), \"}\", `if(runtime) runtime(${RuntimeGlobals.require});`, \"while(chunkIds.length)\", Template.indent(\"installedChunks[chunkIds.pop()] = 1;\"), \"parentChunkLoadingFunction(data);\"])};`]) : \"// no chunk install function needed\", withLoading ? Template.asString([`${fn}.i = ${runtimeTemplate.basicFunction(\"chunkId, promises\", hasJsMatcher !== false ? ['// \"1\" is the signal for \"already loaded\"', \"if(!installedChunks[chunkId]) {\", Template.indent([hasJsMatcher === true ? \"if(true) { // all chunks have JS\" : `if(${hasJsMatcher(\"chunkId\")}) {`, Template.indent(`importScripts(${withCreateScriptUrl ? `${RuntimeGlobals.createScriptUrl}(${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getChunkScriptFilename}(chunkId))` : `${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getChunkScriptFilename}(chunkId)`});`), \"}\"]), \"}\"] : \"installedChunks[chunkId] = 1;\")};`, \"\", `var chunkLoadingGlobal = ${chunkLoadingGlobalExpr} = ${chunkLoadingGlobalExpr} || [];`, \"var parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\", \"chunkLoadingGlobal.push = installChunk;\"]) : \"// no chunk loading\", \"\", withHmr ? Template.asString([\"function loadUpdateChunk(chunkId, updatedModulesList) {\", Template.indent([\"var success = false;\", `${globalObject}[${JSON.stringify(compilation.outputOptions.hotUpdateGlobal)}] = ${runtimeTemplate.basicFunction(\"_, moreModules, runtime\", [\"for(var moduleId in moreModules) {\", Template.indent([`if(${RuntimeGlobals.hasOwnProperty}(moreModules, moduleId)) {`, Template.indent([\"currentUpdate[moduleId] = moreModules[moduleId];\", \"if(updatedModulesList) updatedModulesList.push(moduleId);\"]), \"}\"]), \"}\", \"if(runtime) currentUpdateRuntime.push(runtime);\", \"success = true;\"])};`, \"// start update chunk loading\", `importScripts(${withCreateScriptUrl ? `${RuntimeGlobals.createScriptUrl}(${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getChunkUpdateScriptFilename}(chunkId))` : `${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getChunkUpdateScriptFilename}(chunkId)`});`, 'if(!success) throw new Error(\"Loading update chunk failed for unknown reason\");']), \"}\", \"\", Template.getFunctionContent(require(\"../hmr/JavascriptHotModuleReplacement.runtime.js\")).replace(/\\$key\\$/g, \"importScrips\").replace(/\\$installedChunks\\$/g, \"installedChunks\").replace(/\\$loadUpdateChunk\\$/g, \"loadUpdateChunk\").replace(/\\$moduleCache\\$/g, RuntimeGlobals.moduleCache).replace(/\\$moduleFactories\\$/g, RuntimeGlobals.moduleFactories).replace(/\\$ensureChunkHandlers\\$/g, RuntimeGlobals.ensureChunkHandlers).replace(/\\$hasOwnProperty\\$/g, RuntimeGlobals.hasOwnProperty).replace(/\\$hmrModuleData\\$/g, RuntimeGlobals.hmrModuleData).replace(/\\$hmrDownloadUpdateHandlers\\$/g, RuntimeGlobals.hmrDownloadUpdateHandlers).replace(/\\$hmrInvalidateModuleHandlers\\$/g, RuntimeGlobals.hmrInvalidateModuleHandlers)]) : \"// no HMR\", \"\", withHmrManifest ? Template.asString([`${RuntimeGlobals.hmrDownloadManifest} = ${runtimeTemplate.basicFunction(\"\", ['if (typeof fetch === \"undefined\") throw new Error(\"No browser support: need fetch API\");', `return fetch(${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getUpdateManifestFilename}()).then(${runtimeTemplate.basicFunction(\"response\", [\"if(response.status === 404) return; // no update available\", 'if(!response.ok) throw new Error(\"Failed to fetch update manifest \" + response.statusText);', \"return response.json();\"])});`])};`]) : \"// no HMR manifest\"]);\n  }\n\n}\n\nmodule.exports = ImportScriptsChunkLoadingRuntimeModule;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingRuntimeModule.js"],"names":["RuntimeGlobals","require","RuntimeModule","Template","getChunkFilenameTemplate","chunkHasJs","getInitialChunkIds","compileBooleanMatcher","getUndoPath","ImportScriptsChunkLoadingRuntimeModule","constructor","runtimeRequirements","withCreateScriptUrl","STAGE_ATTACH","_withCreateScriptUrl","_generateBaseUri","chunk","options","getEntryOptions","baseUri","baseURI","JSON","stringify","compilation","outputName","getPath","outputOptions","contentHashType","rootOutputDir","path","generate","fn","ensureChunkHandlers","withBaseURI","has","withLoading","withHmr","hmrDownloadUpdateHandlers","withHmrManifest","hmrDownloadManifest","globalObject","runtimeTemplate","chunkLoadingGlobalExpr","chunkLoadingGlobal","chunkGraph","hasJsMatcher","getChunkConditionMap","initialChunkIds","stateExpression","hmrRuntimeStatePrefix","undefined","asString","indent","Array","from","id","join","basicFunction","destructureArray","hasOwnProperty","moduleFactories","createScriptUrl","publicPath","getChunkScriptFilename","hotUpdateGlobal","getChunkUpdateScriptFilename","getFunctionContent","replace","moduleCache","hmrModuleData","hmrInvalidateModuleHandlers","getUpdateManifestFilename","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\nconst {\n\tgetChunkFilenameTemplate,\n\tchunkHasJs\n} = require(\"../javascript/JavascriptModulesPlugin\");\nconst { getInitialChunkIds } = require(\"../javascript/StartupHelpers\");\nconst compileBooleanMatcher = require(\"../util/compileBooleanMatcher\");\nconst { getUndoPath } = require(\"../util/identifier\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../Compilation\")} Compilation */\n\nclass ImportScriptsChunkLoadingRuntimeModule extends RuntimeModule {\n\t/**\n\t * @param {Set<string>} runtimeRequirements runtime requirements\n\t * @param {boolean} withCreateScriptUrl with createScriptUrl support\n\t */\n\tconstructor(runtimeRequirements, withCreateScriptUrl) {\n\t\tsuper(\"importScripts chunk loading\", RuntimeModule.STAGE_ATTACH);\n\t\tthis.runtimeRequirements = runtimeRequirements;\n\t\tthis._withCreateScriptUrl = withCreateScriptUrl;\n\t}\n\n\t/**\n\t * @private\n\t * @param {Chunk} chunk chunk\n\t * @returns {string} generated code\n\t */\n\t_generateBaseUri(chunk) {\n\t\tconst options = chunk.getEntryOptions();\n\t\tif (options && options.baseUri) {\n\t\t\treturn `${RuntimeGlobals.baseURI} = ${JSON.stringify(options.baseUri)};`;\n\t\t}\n\t\tconst compilation = /** @type {Compilation} */ (this.compilation);\n\t\tconst outputName = compilation.getPath(\n\t\t\tgetChunkFilenameTemplate(chunk, compilation.outputOptions),\n\t\t\t{\n\t\t\t\tchunk,\n\t\t\t\tcontentHashType: \"javascript\"\n\t\t\t}\n\t\t);\n\t\tconst rootOutputDir = getUndoPath(\n\t\t\toutputName,\n\t\t\t/** @type {string} */ (compilation.outputOptions.path),\n\t\t\tfalse\n\t\t);\n\t\treturn `${RuntimeGlobals.baseURI} = self.location + ${JSON.stringify(\n\t\t\trootOutputDir ? \"/../\" + rootOutputDir : \"\"\n\t\t)};`;\n\t}\n\n\t/**\n\t * @returns {string | null} runtime code\n\t */\n\tgenerate() {\n\t\tconst compilation = /** @type {Compilation} */ (this.compilation);\n\t\tconst fn = RuntimeGlobals.ensureChunkHandlers;\n\t\tconst withBaseURI = this.runtimeRequirements.has(RuntimeGlobals.baseURI);\n\t\tconst withLoading = this.runtimeRequirements.has(\n\t\t\tRuntimeGlobals.ensureChunkHandlers\n\t\t);\n\t\tconst withHmr = this.runtimeRequirements.has(\n\t\t\tRuntimeGlobals.hmrDownloadUpdateHandlers\n\t\t);\n\t\tconst withHmrManifest = this.runtimeRequirements.has(\n\t\t\tRuntimeGlobals.hmrDownloadManifest\n\t\t);\n\t\tconst globalObject = compilation.runtimeTemplate.globalObject;\n\t\tconst chunkLoadingGlobalExpr = `${globalObject}[${JSON.stringify(\n\t\t\tcompilation.outputOptions.chunkLoadingGlobal\n\t\t)}]`;\n\t\tconst chunkGraph = /** @type {ChunkGraph} */ (this.chunkGraph);\n\t\tconst chunk = /** @type {Chunk} */ (this.chunk);\n\t\tconst hasJsMatcher = compileBooleanMatcher(\n\t\t\tchunkGraph.getChunkConditionMap(chunk, chunkHasJs)\n\t\t);\n\t\tconst initialChunkIds = getInitialChunkIds(chunk, chunkGraph, chunkHasJs);\n\n\t\tconst stateExpression = withHmr\n\t\t\t? `${RuntimeGlobals.hmrRuntimeStatePrefix}_importScripts`\n\t\t\t: undefined;\n\t\tconst runtimeTemplate = compilation.runtimeTemplate;\n\t\tconst { _withCreateScriptUrl: withCreateScriptUrl } = this;\n\n\t\treturn Template.asString([\n\t\t\twithBaseURI ? this._generateBaseUri(chunk) : \"// no baseURI\",\n\t\t\t\"\",\n\t\t\t\"// object to store loaded chunks\",\n\t\t\t'// \"1\" means \"already loaded\"',\n\t\t\t`var installedChunks = ${\n\t\t\t\tstateExpression ? `${stateExpression} = ${stateExpression} || ` : \"\"\n\t\t\t}{`,\n\t\t\tTemplate.indent(\n\t\t\t\tArray.from(initialChunkIds, id => `${JSON.stringify(id)}: 1`).join(\n\t\t\t\t\t\",\\n\"\n\t\t\t\t)\n\t\t\t),\n\t\t\t\"};\",\n\t\t\t\"\",\n\t\t\twithLoading\n\t\t\t\t? Template.asString([\n\t\t\t\t\t\t\"// importScripts chunk loading\",\n\t\t\t\t\t\t`var installChunk = ${runtimeTemplate.basicFunction(\"data\", [\n\t\t\t\t\t\t\truntimeTemplate.destructureArray(\n\t\t\t\t\t\t\t\t[\"chunkIds\", \"moreModules\", \"runtime\"],\n\t\t\t\t\t\t\t\t\"data\"\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\"for(var moduleId in moreModules) {\",\n\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t`if(${RuntimeGlobals.hasOwnProperty}(moreModules, moduleId)) {`,\n\t\t\t\t\t\t\t\tTemplate.indent(\n\t\t\t\t\t\t\t\t\t`${RuntimeGlobals.moduleFactories}[moduleId] = moreModules[moduleId];`\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\"}\",\n\t\t\t\t\t\t\t`if(runtime) runtime(${RuntimeGlobals.require});`,\n\t\t\t\t\t\t\t\"while(chunkIds.length)\",\n\t\t\t\t\t\t\tTemplate.indent(\"installedChunks[chunkIds.pop()] = 1;\"),\n\t\t\t\t\t\t\t\"parentChunkLoadingFunction(data);\"\n\t\t\t\t\t\t])};`\n\t\t\t\t  ])\n\t\t\t\t: \"// no chunk install function needed\",\n\t\t\twithLoading\n\t\t\t\t? Template.asString([\n\t\t\t\t\t\t`${fn}.i = ${runtimeTemplate.basicFunction(\n\t\t\t\t\t\t\t\"chunkId, promises\",\n\t\t\t\t\t\t\thasJsMatcher !== false\n\t\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\t\t'// \"1\" is the signal for \"already loaded\"',\n\t\t\t\t\t\t\t\t\t\t\"if(!installedChunks[chunkId]) {\",\n\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\thasJsMatcher === true\n\t\t\t\t\t\t\t\t\t\t\t\t? \"if(true) { // all chunks have JS\"\n\t\t\t\t\t\t\t\t\t\t\t\t: `if(${hasJsMatcher(\"chunkId\")}) {`,\n\t\t\t\t\t\t\t\t\t\t\tTemplate.indent(\n\t\t\t\t\t\t\t\t\t\t\t\t`importScripts(${\n\t\t\t\t\t\t\t\t\t\t\t\t\twithCreateScriptUrl\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? `${RuntimeGlobals.createScriptUrl}(${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getChunkScriptFilename}(chunkId))`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: `${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getChunkScriptFilename}(chunkId)`\n\t\t\t\t\t\t\t\t\t\t\t\t});`\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t: \"installedChunks[chunkId] = 1;\"\n\t\t\t\t\t\t)};`,\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t`var chunkLoadingGlobal = ${chunkLoadingGlobalExpr} = ${chunkLoadingGlobalExpr} || [];`,\n\t\t\t\t\t\t\"var parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\",\n\t\t\t\t\t\t\"chunkLoadingGlobal.push = installChunk;\"\n\t\t\t\t  ])\n\t\t\t\t: \"// no chunk loading\",\n\t\t\t\"\",\n\t\t\twithHmr\n\t\t\t\t? Template.asString([\n\t\t\t\t\t\t\"function loadUpdateChunk(chunkId, updatedModulesList) {\",\n\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\"var success = false;\",\n\t\t\t\t\t\t\t`${globalObject}[${JSON.stringify(\n\t\t\t\t\t\t\t\tcompilation.outputOptions.hotUpdateGlobal\n\t\t\t\t\t\t\t)}] = ${runtimeTemplate.basicFunction(\"_, moreModules, runtime\", [\n\t\t\t\t\t\t\t\t\"for(var moduleId in moreModules) {\",\n\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t`if(${RuntimeGlobals.hasOwnProperty}(moreModules, moduleId)) {`,\n\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\"currentUpdate[moduleId] = moreModules[moduleId];\",\n\t\t\t\t\t\t\t\t\t\t\"if(updatedModulesList) updatedModulesList.push(moduleId);\"\n\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\"}\",\n\t\t\t\t\t\t\t\t\"if(runtime) currentUpdateRuntime.push(runtime);\",\n\t\t\t\t\t\t\t\t\"success = true;\"\n\t\t\t\t\t\t\t])};`,\n\t\t\t\t\t\t\t\"// start update chunk loading\",\n\t\t\t\t\t\t\t`importScripts(${\n\t\t\t\t\t\t\t\twithCreateScriptUrl\n\t\t\t\t\t\t\t\t\t? `${RuntimeGlobals.createScriptUrl}(${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getChunkUpdateScriptFilename}(chunkId))`\n\t\t\t\t\t\t\t\t\t: `${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getChunkUpdateScriptFilename}(chunkId)`\n\t\t\t\t\t\t\t});`,\n\t\t\t\t\t\t\t'if(!success) throw new Error(\"Loading update chunk failed for unknown reason\");'\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t\"}\",\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\tTemplate.getFunctionContent(\n\t\t\t\t\t\t\trequire(\"../hmr/JavascriptHotModuleReplacement.runtime.js\")\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.replace(/\\$key\\$/g, \"importScrips\")\n\t\t\t\t\t\t\t.replace(/\\$installedChunks\\$/g, \"installedChunks\")\n\t\t\t\t\t\t\t.replace(/\\$loadUpdateChunk\\$/g, \"loadUpdateChunk\")\n\t\t\t\t\t\t\t.replace(/\\$moduleCache\\$/g, RuntimeGlobals.moduleCache)\n\t\t\t\t\t\t\t.replace(/\\$moduleFactories\\$/g, RuntimeGlobals.moduleFactories)\n\t\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t\t/\\$ensureChunkHandlers\\$/g,\n\t\t\t\t\t\t\t\tRuntimeGlobals.ensureChunkHandlers\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.replace(/\\$hasOwnProperty\\$/g, RuntimeGlobals.hasOwnProperty)\n\t\t\t\t\t\t\t.replace(/\\$hmrModuleData\\$/g, RuntimeGlobals.hmrModuleData)\n\t\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t\t/\\$hmrDownloadUpdateHandlers\\$/g,\n\t\t\t\t\t\t\t\tRuntimeGlobals.hmrDownloadUpdateHandlers\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t\t/\\$hmrInvalidateModuleHandlers\\$/g,\n\t\t\t\t\t\t\t\tRuntimeGlobals.hmrInvalidateModuleHandlers\n\t\t\t\t\t\t\t)\n\t\t\t\t  ])\n\t\t\t\t: \"// no HMR\",\n\t\t\t\"\",\n\t\t\twithHmrManifest\n\t\t\t\t? Template.asString([\n\t\t\t\t\t\t`${\n\t\t\t\t\t\t\tRuntimeGlobals.hmrDownloadManifest\n\t\t\t\t\t\t} = ${runtimeTemplate.basicFunction(\"\", [\n\t\t\t\t\t\t\t'if (typeof fetch === \"undefined\") throw new Error(\"No browser support: need fetch API\");',\n\t\t\t\t\t\t\t`return fetch(${RuntimeGlobals.publicPath} + ${\n\t\t\t\t\t\t\t\tRuntimeGlobals.getUpdateManifestFilename\n\t\t\t\t\t\t\t}()).then(${runtimeTemplate.basicFunction(\"response\", [\n\t\t\t\t\t\t\t\t\"if(response.status === 404) return; // no update available\",\n\t\t\t\t\t\t\t\t'if(!response.ok) throw new Error(\"Failed to fetch update manifest \" + response.statusText);',\n\t\t\t\t\t\t\t\t\"return response.json();\"\n\t\t\t\t\t\t\t])});`\n\t\t\t\t\t\t])};`\n\t\t\t\t  ])\n\t\t\t\t: \"// no HMR manifest\"\n\t\t]);\n\t}\n}\n\nmodule.exports = ImportScriptsChunkLoadingRuntimeModule;\n"]},"metadata":{},"sourceType":"script"}