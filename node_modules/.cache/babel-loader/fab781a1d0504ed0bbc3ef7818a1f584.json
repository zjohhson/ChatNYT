{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.module = _module;\nexports.moduleMetadata = moduleMetadata;\nexports.moduleNameMetadata = moduleNameMetadata;\nexports.functionNameMetadata = functionNameMetadata;\nexports.localNameMetadata = localNameMetadata;\nexports.binaryModule = binaryModule;\nexports.quoteModule = quoteModule;\nexports.sectionMetadata = sectionMetadata;\nexports.producersSectionMetadata = producersSectionMetadata;\nexports.producerMetadata = producerMetadata;\nexports.producerMetadataVersionedName = producerMetadataVersionedName;\nexports.loopInstruction = loopInstruction;\nexports.instr = instr;\nexports.ifInstruction = ifInstruction;\nexports.stringLiteral = stringLiteral;\nexports.numberLiteral = numberLiteral;\nexports.longNumberLiteral = longNumberLiteral;\nexports.floatLiteral = floatLiteral;\nexports.elem = elem;\nexports.indexInFuncSection = indexInFuncSection;\nexports.valtypeLiteral = valtypeLiteral;\nexports.typeInstruction = typeInstruction;\nexports.start = start;\nexports.globalType = globalType;\nexports.leadingComment = leadingComment;\nexports.blockComment = blockComment;\nexports.data = data;\nexports.global = global;\nexports.table = table;\nexports.memory = memory;\nexports.funcImportDescr = funcImportDescr;\nexports.moduleImport = moduleImport;\nexports.moduleExportDescr = moduleExportDescr;\nexports.moduleExport = moduleExport;\nexports.limit = limit;\nexports.signature = signature;\nexports.program = program;\nexports.identifier = identifier;\nexports.blockInstruction = blockInstruction;\nexports.callInstruction = callInstruction;\nexports.callIndirectInstruction = callIndirectInstruction;\nexports.byteArray = byteArray;\nexports.func = func;\nexports.internalBrUnless = internalBrUnless;\nexports.internalGoto = internalGoto;\nexports.internalCallExtern = internalCallExtern;\nexports.internalEndAndReturn = internalEndAndReturn;\nexports.assertInternalCallExtern = exports.assertInternalGoto = exports.assertInternalBrUnless = exports.assertFunc = exports.assertByteArray = exports.assertCallIndirectInstruction = exports.assertCallInstruction = exports.assertBlockInstruction = exports.assertIdentifier = exports.assertProgram = exports.assertSignature = exports.assertLimit = exports.assertModuleExport = exports.assertModuleExportDescr = exports.assertModuleImport = exports.assertFuncImportDescr = exports.assertMemory = exports.assertTable = exports.assertGlobal = exports.assertData = exports.assertBlockComment = exports.assertLeadingComment = exports.assertGlobalType = exports.assertStart = exports.assertTypeInstruction = exports.assertValtypeLiteral = exports.assertIndexInFuncSection = exports.assertElem = exports.assertFloatLiteral = exports.assertLongNumberLiteral = exports.assertNumberLiteral = exports.assertStringLiteral = exports.assertIfInstruction = exports.assertInstr = exports.assertLoopInstruction = exports.assertProducerMetadataVersionedName = exports.assertProducerMetadata = exports.assertProducersSectionMetadata = exports.assertSectionMetadata = exports.assertQuoteModule = exports.assertBinaryModule = exports.assertLocalNameMetadata = exports.assertFunctionNameMetadata = exports.assertModuleNameMetadata = exports.assertModuleMetadata = exports.assertModule = exports.isIntrinsic = exports.isImportDescr = exports.isNumericLiteral = exports.isExpression = exports.isInstruction = exports.isBlock = exports.isNode = exports.isInternalEndAndReturn = exports.isInternalCallExtern = exports.isInternalGoto = exports.isInternalBrUnless = exports.isFunc = exports.isByteArray = exports.isCallIndirectInstruction = exports.isCallInstruction = exports.isBlockInstruction = exports.isIdentifier = exports.isProgram = exports.isSignature = exports.isLimit = exports.isModuleExport = exports.isModuleExportDescr = exports.isModuleImport = exports.isFuncImportDescr = exports.isMemory = exports.isTable = exports.isGlobal = exports.isData = exports.isBlockComment = exports.isLeadingComment = exports.isGlobalType = exports.isStart = exports.isTypeInstruction = exports.isValtypeLiteral = exports.isIndexInFuncSection = exports.isElem = exports.isFloatLiteral = exports.isLongNumberLiteral = exports.isNumberLiteral = exports.isStringLiteral = exports.isIfInstruction = exports.isInstr = exports.isLoopInstruction = exports.isProducerMetadataVersionedName = exports.isProducerMetadata = exports.isProducersSectionMetadata = exports.isSectionMetadata = exports.isQuoteModule = exports.isBinaryModule = exports.isLocalNameMetadata = exports.isFunctionNameMetadata = exports.isModuleNameMetadata = exports.isModuleMetadata = exports.isModule = void 0;\nexports.nodeAndUnionTypes = exports.unionTypesMap = exports.assertInternalEndAndReturn = void 0;\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n} // THIS FILE IS AUTOGENERATED\n// see scripts/generateNodeUtils.js\n\n\nfunction isTypeOf(t) {\n  return function (n) {\n    return n.type === t;\n  };\n}\n\nfunction assertTypeOf(t) {\n  return function (n) {\n    return function () {\n      if (!(n.type === t)) {\n        throw new Error('n.type === t' + \" error: \" + (undefined || \"unknown\"));\n      }\n    }();\n  };\n}\n\nfunction _module(id, fields, metadata) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(fields) === \"object\" && typeof fields.length !== \"undefined\")) {\n    throw new Error('typeof fields === \"object\" && typeof fields.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Module\",\n    id: id,\n    fields: fields\n  };\n\n  if (typeof metadata !== \"undefined\") {\n    node.metadata = metadata;\n  }\n\n  return node;\n}\n\nfunction moduleMetadata(sections, functionNames, localNames, producers) {\n  if (!(_typeof(sections) === \"object\" && typeof sections.length !== \"undefined\")) {\n    throw new Error('typeof sections === \"object\" && typeof sections.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (functionNames !== null && functionNames !== undefined) {\n    if (!(_typeof(functionNames) === \"object\" && typeof functionNames.length !== \"undefined\")) {\n      throw new Error('typeof functionNames === \"object\" && typeof functionNames.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  if (localNames !== null && localNames !== undefined) {\n    if (!(_typeof(localNames) === \"object\" && typeof localNames.length !== \"undefined\")) {\n      throw new Error('typeof localNames === \"object\" && typeof localNames.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  if (producers !== null && producers !== undefined) {\n    if (!(_typeof(producers) === \"object\" && typeof producers.length !== \"undefined\")) {\n      throw new Error('typeof producers === \"object\" && typeof producers.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"ModuleMetadata\",\n    sections: sections\n  };\n\n  if (typeof functionNames !== \"undefined\" && functionNames.length > 0) {\n    node.functionNames = functionNames;\n  }\n\n  if (typeof localNames !== \"undefined\" && localNames.length > 0) {\n    node.localNames = localNames;\n  }\n\n  if (typeof producers !== \"undefined\" && producers.length > 0) {\n    node.producers = producers;\n  }\n\n  return node;\n}\n\nfunction moduleNameMetadata(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleNameMetadata\",\n    value: value\n  };\n  return node;\n}\n\nfunction functionNameMetadata(value, index) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof index === \"number\")) {\n    throw new Error('typeof index === \"number\"' + \" error: \" + (\"Argument index must be of type number, given: \" + _typeof(index) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"FunctionNameMetadata\",\n    value: value,\n    index: index\n  };\n  return node;\n}\n\nfunction localNameMetadata(value, localIndex, functionIndex) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof localIndex === \"number\")) {\n    throw new Error('typeof localIndex === \"number\"' + \" error: \" + (\"Argument localIndex must be of type number, given: \" + _typeof(localIndex) || \"unknown\"));\n  }\n\n  if (!(typeof functionIndex === \"number\")) {\n    throw new Error('typeof functionIndex === \"number\"' + \" error: \" + (\"Argument functionIndex must be of type number, given: \" + _typeof(functionIndex) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LocalNameMetadata\",\n    value: value,\n    localIndex: localIndex,\n    functionIndex: functionIndex\n  };\n  return node;\n}\n\nfunction binaryModule(id, blob) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(blob) === \"object\" && typeof blob.length !== \"undefined\")) {\n    throw new Error('typeof blob === \"object\" && typeof blob.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BinaryModule\",\n    id: id,\n    blob: blob\n  };\n  return node;\n}\n\nfunction quoteModule(id, string) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(string) === \"object\" && typeof string.length !== \"undefined\")) {\n    throw new Error('typeof string === \"object\" && typeof string.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"QuoteModule\",\n    id: id,\n    string: string\n  };\n  return node;\n}\n\nfunction sectionMetadata(section, startOffset, size, vectorOfSize) {\n  if (!(typeof startOffset === \"number\")) {\n    throw new Error('typeof startOffset === \"number\"' + \" error: \" + (\"Argument startOffset must be of type number, given: \" + _typeof(startOffset) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"SectionMetadata\",\n    section: section,\n    startOffset: startOffset,\n    size: size,\n    vectorOfSize: vectorOfSize\n  };\n  return node;\n}\n\nfunction producersSectionMetadata(producers) {\n  if (!(_typeof(producers) === \"object\" && typeof producers.length !== \"undefined\")) {\n    throw new Error('typeof producers === \"object\" && typeof producers.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducersSectionMetadata\",\n    producers: producers\n  };\n  return node;\n}\n\nfunction producerMetadata(language, processedBy, sdk) {\n  if (!(_typeof(language) === \"object\" && typeof language.length !== \"undefined\")) {\n    throw new Error('typeof language === \"object\" && typeof language.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(processedBy) === \"object\" && typeof processedBy.length !== \"undefined\")) {\n    throw new Error('typeof processedBy === \"object\" && typeof processedBy.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(sdk) === \"object\" && typeof sdk.length !== \"undefined\")) {\n    throw new Error('typeof sdk === \"object\" && typeof sdk.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducerMetadata\",\n    language: language,\n    processedBy: processedBy,\n    sdk: sdk\n  };\n  return node;\n}\n\nfunction producerMetadataVersionedName(name, version) {\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  if (!(typeof version === \"string\")) {\n    throw new Error('typeof version === \"string\"' + \" error: \" + (\"Argument version must be of type string, given: \" + _typeof(version) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducerMetadataVersionedName\",\n    name: name,\n    version: version\n  };\n  return node;\n}\n\nfunction loopInstruction(label, resulttype, instr) {\n  if (!(_typeof(instr) === \"object\" && typeof instr.length !== \"undefined\")) {\n    throw new Error('typeof instr === \"object\" && typeof instr.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LoopInstruction\",\n    id: \"loop\",\n    label: label,\n    resulttype: resulttype,\n    instr: instr\n  };\n  return node;\n}\n\nfunction instr(id, object, args, namedArgs) {\n  if (!(typeof id === \"string\")) {\n    throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n  }\n\n  if (!(_typeof(args) === \"object\" && typeof args.length !== \"undefined\")) {\n    throw new Error('typeof args === \"object\" && typeof args.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Instr\",\n    id: id,\n    args: args\n  };\n\n  if (typeof object !== \"undefined\") {\n    node.object = object;\n  }\n\n  if (typeof namedArgs !== \"undefined\" && Object.keys(namedArgs).length !== 0) {\n    node.namedArgs = namedArgs;\n  }\n\n  return node;\n}\n\nfunction ifInstruction(testLabel, test, result, consequent, alternate) {\n  if (!(_typeof(test) === \"object\" && typeof test.length !== \"undefined\")) {\n    throw new Error('typeof test === \"object\" && typeof test.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(consequent) === \"object\" && typeof consequent.length !== \"undefined\")) {\n    throw new Error('typeof consequent === \"object\" && typeof consequent.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(alternate) === \"object\" && typeof alternate.length !== \"undefined\")) {\n    throw new Error('typeof alternate === \"object\" && typeof alternate.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"IfInstruction\",\n    id: \"if\",\n    testLabel: testLabel,\n    test: test,\n    result: result,\n    consequent: consequent,\n    alternate: alternate\n  };\n  return node;\n}\n\nfunction stringLiteral(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"StringLiteral\",\n    value: value\n  };\n  return node;\n}\n\nfunction numberLiteral(value, raw) {\n  if (!(typeof value === \"number\")) {\n    throw new Error('typeof value === \"number\"' + \" error: \" + (\"Argument value must be of type number, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"NumberLiteral\",\n    value: value,\n    raw: raw\n  };\n  return node;\n}\n\nfunction longNumberLiteral(value, raw) {\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LongNumberLiteral\",\n    value: value,\n    raw: raw\n  };\n  return node;\n}\n\nfunction floatLiteral(value, nan, inf, raw) {\n  if (!(typeof value === \"number\")) {\n    throw new Error('typeof value === \"number\"' + \" error: \" + (\"Argument value must be of type number, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (nan !== null && nan !== undefined) {\n    if (!(typeof nan === \"boolean\")) {\n      throw new Error('typeof nan === \"boolean\"' + \" error: \" + (\"Argument nan must be of type boolean, given: \" + _typeof(nan) || \"unknown\"));\n    }\n  }\n\n  if (inf !== null && inf !== undefined) {\n    if (!(typeof inf === \"boolean\")) {\n      throw new Error('typeof inf === \"boolean\"' + \" error: \" + (\"Argument inf must be of type boolean, given: \" + _typeof(inf) || \"unknown\"));\n    }\n  }\n\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"FloatLiteral\",\n    value: value,\n    raw: raw\n  };\n\n  if (nan === true) {\n    node.nan = true;\n  }\n\n  if (inf === true) {\n    node.inf = true;\n  }\n\n  return node;\n}\n\nfunction elem(table, offset, funcs) {\n  if (!(_typeof(offset) === \"object\" && typeof offset.length !== \"undefined\")) {\n    throw new Error('typeof offset === \"object\" && typeof offset.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(funcs) === \"object\" && typeof funcs.length !== \"undefined\")) {\n    throw new Error('typeof funcs === \"object\" && typeof funcs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Elem\",\n    table: table,\n    offset: offset,\n    funcs: funcs\n  };\n  return node;\n}\n\nfunction indexInFuncSection(index) {\n  var node = {\n    type: \"IndexInFuncSection\",\n    index: index\n  };\n  return node;\n}\n\nfunction valtypeLiteral(name) {\n  var node = {\n    type: \"ValtypeLiteral\",\n    name: name\n  };\n  return node;\n}\n\nfunction typeInstruction(id, functype) {\n  var node = {\n    type: \"TypeInstruction\",\n    id: id,\n    functype: functype\n  };\n  return node;\n}\n\nfunction start(index) {\n  var node = {\n    type: \"Start\",\n    index: index\n  };\n  return node;\n}\n\nfunction globalType(valtype, mutability) {\n  var node = {\n    type: \"GlobalType\",\n    valtype: valtype,\n    mutability: mutability\n  };\n  return node;\n}\n\nfunction leadingComment(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LeadingComment\",\n    value: value\n  };\n  return node;\n}\n\nfunction blockComment(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BlockComment\",\n    value: value\n  };\n  return node;\n}\n\nfunction data(memoryIndex, offset, init) {\n  var node = {\n    type: \"Data\",\n    memoryIndex: memoryIndex,\n    offset: offset,\n    init: init\n  };\n  return node;\n}\n\nfunction global(globalType, init, name) {\n  if (!(_typeof(init) === \"object\" && typeof init.length !== \"undefined\")) {\n    throw new Error('typeof init === \"object\" && typeof init.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Global\",\n    globalType: globalType,\n    init: init,\n    name: name\n  };\n  return node;\n}\n\nfunction table(elementType, limits, name, elements) {\n  if (!(limits.type === \"Limit\")) {\n    throw new Error('limits.type === \"Limit\"' + \" error: \" + (\"Argument limits must be of type Limit, given: \" + limits.type || \"unknown\"));\n  }\n\n  if (elements !== null && elements !== undefined) {\n    if (!(_typeof(elements) === \"object\" && typeof elements.length !== \"undefined\")) {\n      throw new Error('typeof elements === \"object\" && typeof elements.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Table\",\n    elementType: elementType,\n    limits: limits,\n    name: name\n  };\n\n  if (typeof elements !== \"undefined\" && elements.length > 0) {\n    node.elements = elements;\n  }\n\n  return node;\n}\n\nfunction memory(limits, id) {\n  var node = {\n    type: \"Memory\",\n    limits: limits,\n    id: id\n  };\n  return node;\n}\n\nfunction funcImportDescr(id, signature) {\n  var node = {\n    type: \"FuncImportDescr\",\n    id: id,\n    signature: signature\n  };\n  return node;\n}\n\nfunction moduleImport(module, name, descr) {\n  if (!(typeof module === \"string\")) {\n    throw new Error('typeof module === \"string\"' + \" error: \" + (\"Argument module must be of type string, given: \" + _typeof(module) || \"unknown\"));\n  }\n\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleImport\",\n    module: module,\n    name: name,\n    descr: descr\n  };\n  return node;\n}\n\nfunction moduleExportDescr(exportType, id) {\n  var node = {\n    type: \"ModuleExportDescr\",\n    exportType: exportType,\n    id: id\n  };\n  return node;\n}\n\nfunction moduleExport(name, descr) {\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleExport\",\n    name: name,\n    descr: descr\n  };\n  return node;\n}\n\nfunction limit(min, max, shared) {\n  if (!(typeof min === \"number\")) {\n    throw new Error('typeof min === \"number\"' + \" error: \" + (\"Argument min must be of type number, given: \" + _typeof(min) || \"unknown\"));\n  }\n\n  if (max !== null && max !== undefined) {\n    if (!(typeof max === \"number\")) {\n      throw new Error('typeof max === \"number\"' + \" error: \" + (\"Argument max must be of type number, given: \" + _typeof(max) || \"unknown\"));\n    }\n  }\n\n  if (shared !== null && shared !== undefined) {\n    if (!(typeof shared === \"boolean\")) {\n      throw new Error('typeof shared === \"boolean\"' + \" error: \" + (\"Argument shared must be of type boolean, given: \" + _typeof(shared) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Limit\",\n    min: min\n  };\n\n  if (typeof max !== \"undefined\") {\n    node.max = max;\n  }\n\n  if (shared === true) {\n    node.shared = true;\n  }\n\n  return node;\n}\n\nfunction signature(params, results) {\n  if (!(_typeof(params) === \"object\" && typeof params.length !== \"undefined\")) {\n    throw new Error('typeof params === \"object\" && typeof params.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(results) === \"object\" && typeof results.length !== \"undefined\")) {\n    throw new Error('typeof results === \"object\" && typeof results.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Signature\",\n    params: params,\n    results: results\n  };\n  return node;\n}\n\nfunction program(body) {\n  if (!(_typeof(body) === \"object\" && typeof body.length !== \"undefined\")) {\n    throw new Error('typeof body === \"object\" && typeof body.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Program\",\n    body: body\n  };\n  return node;\n}\n\nfunction identifier(value, raw) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (raw !== null && raw !== undefined) {\n    if (!(typeof raw === \"string\")) {\n      throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Identifier\",\n    value: value\n  };\n\n  if (typeof raw !== \"undefined\") {\n    node.raw = raw;\n  }\n\n  return node;\n}\n\nfunction blockInstruction(label, instr, result) {\n  if (!(_typeof(instr) === \"object\" && typeof instr.length !== \"undefined\")) {\n    throw new Error('typeof instr === \"object\" && typeof instr.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BlockInstruction\",\n    id: \"block\",\n    label: label,\n    instr: instr,\n    result: result\n  };\n  return node;\n}\n\nfunction callInstruction(index, instrArgs, numeric) {\n  if (instrArgs !== null && instrArgs !== undefined) {\n    if (!(_typeof(instrArgs) === \"object\" && typeof instrArgs.length !== \"undefined\")) {\n      throw new Error('typeof instrArgs === \"object\" && typeof instrArgs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"CallInstruction\",\n    id: \"call\",\n    index: index\n  };\n\n  if (typeof instrArgs !== \"undefined\" && instrArgs.length > 0) {\n    node.instrArgs = instrArgs;\n  }\n\n  if (typeof numeric !== \"undefined\") {\n    node.numeric = numeric;\n  }\n\n  return node;\n}\n\nfunction callIndirectInstruction(signature, intrs) {\n  if (intrs !== null && intrs !== undefined) {\n    if (!(_typeof(intrs) === \"object\" && typeof intrs.length !== \"undefined\")) {\n      throw new Error('typeof intrs === \"object\" && typeof intrs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"CallIndirectInstruction\",\n    id: \"call_indirect\",\n    signature: signature\n  };\n\n  if (typeof intrs !== \"undefined\" && intrs.length > 0) {\n    node.intrs = intrs;\n  }\n\n  return node;\n}\n\nfunction byteArray(values) {\n  if (!(_typeof(values) === \"object\" && typeof values.length !== \"undefined\")) {\n    throw new Error('typeof values === \"object\" && typeof values.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ByteArray\",\n    values: values\n  };\n  return node;\n}\n\nfunction func(name, signature, body, isExternal, metadata) {\n  if (!(_typeof(body) === \"object\" && typeof body.length !== \"undefined\")) {\n    throw new Error('typeof body === \"object\" && typeof body.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (isExternal !== null && isExternal !== undefined) {\n    if (!(typeof isExternal === \"boolean\")) {\n      throw new Error('typeof isExternal === \"boolean\"' + \" error: \" + (\"Argument isExternal must be of type boolean, given: \" + _typeof(isExternal) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Func\",\n    name: name,\n    signature: signature,\n    body: body\n  };\n\n  if (isExternal === true) {\n    node.isExternal = true;\n  }\n\n  if (typeof metadata !== \"undefined\") {\n    node.metadata = metadata;\n  }\n\n  return node;\n}\n\nfunction internalBrUnless(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalBrUnless\",\n    target: target\n  };\n  return node;\n}\n\nfunction internalGoto(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalGoto\",\n    target: target\n  };\n  return node;\n}\n\nfunction internalCallExtern(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalCallExtern\",\n    target: target\n  };\n  return node;\n}\n\nfunction internalEndAndReturn() {\n  var node = {\n    type: \"InternalEndAndReturn\"\n  };\n  return node;\n}\n\nvar isModule = isTypeOf(\"Module\");\nexports.isModule = isModule;\nvar isModuleMetadata = isTypeOf(\"ModuleMetadata\");\nexports.isModuleMetadata = isModuleMetadata;\nvar isModuleNameMetadata = isTypeOf(\"ModuleNameMetadata\");\nexports.isModuleNameMetadata = isModuleNameMetadata;\nvar isFunctionNameMetadata = isTypeOf(\"FunctionNameMetadata\");\nexports.isFunctionNameMetadata = isFunctionNameMetadata;\nvar isLocalNameMetadata = isTypeOf(\"LocalNameMetadata\");\nexports.isLocalNameMetadata = isLocalNameMetadata;\nvar isBinaryModule = isTypeOf(\"BinaryModule\");\nexports.isBinaryModule = isBinaryModule;\nvar isQuoteModule = isTypeOf(\"QuoteModule\");\nexports.isQuoteModule = isQuoteModule;\nvar isSectionMetadata = isTypeOf(\"SectionMetadata\");\nexports.isSectionMetadata = isSectionMetadata;\nvar isProducersSectionMetadata = isTypeOf(\"ProducersSectionMetadata\");\nexports.isProducersSectionMetadata = isProducersSectionMetadata;\nvar isProducerMetadata = isTypeOf(\"ProducerMetadata\");\nexports.isProducerMetadata = isProducerMetadata;\nvar isProducerMetadataVersionedName = isTypeOf(\"ProducerMetadataVersionedName\");\nexports.isProducerMetadataVersionedName = isProducerMetadataVersionedName;\nvar isLoopInstruction = isTypeOf(\"LoopInstruction\");\nexports.isLoopInstruction = isLoopInstruction;\nvar isInstr = isTypeOf(\"Instr\");\nexports.isInstr = isInstr;\nvar isIfInstruction = isTypeOf(\"IfInstruction\");\nexports.isIfInstruction = isIfInstruction;\nvar isStringLiteral = isTypeOf(\"StringLiteral\");\nexports.isStringLiteral = isStringLiteral;\nvar isNumberLiteral = isTypeOf(\"NumberLiteral\");\nexports.isNumberLiteral = isNumberLiteral;\nvar isLongNumberLiteral = isTypeOf(\"LongNumberLiteral\");\nexports.isLongNumberLiteral = isLongNumberLiteral;\nvar isFloatLiteral = isTypeOf(\"FloatLiteral\");\nexports.isFloatLiteral = isFloatLiteral;\nvar isElem = isTypeOf(\"Elem\");\nexports.isElem = isElem;\nvar isIndexInFuncSection = isTypeOf(\"IndexInFuncSection\");\nexports.isIndexInFuncSection = isIndexInFuncSection;\nvar isValtypeLiteral = isTypeOf(\"ValtypeLiteral\");\nexports.isValtypeLiteral = isValtypeLiteral;\nvar isTypeInstruction = isTypeOf(\"TypeInstruction\");\nexports.isTypeInstruction = isTypeInstruction;\nvar isStart = isTypeOf(\"Start\");\nexports.isStart = isStart;\nvar isGlobalType = isTypeOf(\"GlobalType\");\nexports.isGlobalType = isGlobalType;\nvar isLeadingComment = isTypeOf(\"LeadingComment\");\nexports.isLeadingComment = isLeadingComment;\nvar isBlockComment = isTypeOf(\"BlockComment\");\nexports.isBlockComment = isBlockComment;\nvar isData = isTypeOf(\"Data\");\nexports.isData = isData;\nvar isGlobal = isTypeOf(\"Global\");\nexports.isGlobal = isGlobal;\nvar isTable = isTypeOf(\"Table\");\nexports.isTable = isTable;\nvar isMemory = isTypeOf(\"Memory\");\nexports.isMemory = isMemory;\nvar isFuncImportDescr = isTypeOf(\"FuncImportDescr\");\nexports.isFuncImportDescr = isFuncImportDescr;\nvar isModuleImport = isTypeOf(\"ModuleImport\");\nexports.isModuleImport = isModuleImport;\nvar isModuleExportDescr = isTypeOf(\"ModuleExportDescr\");\nexports.isModuleExportDescr = isModuleExportDescr;\nvar isModuleExport = isTypeOf(\"ModuleExport\");\nexports.isModuleExport = isModuleExport;\nvar isLimit = isTypeOf(\"Limit\");\nexports.isLimit = isLimit;\nvar isSignature = isTypeOf(\"Signature\");\nexports.isSignature = isSignature;\nvar isProgram = isTypeOf(\"Program\");\nexports.isProgram = isProgram;\nvar isIdentifier = isTypeOf(\"Identifier\");\nexports.isIdentifier = isIdentifier;\nvar isBlockInstruction = isTypeOf(\"BlockInstruction\");\nexports.isBlockInstruction = isBlockInstruction;\nvar isCallInstruction = isTypeOf(\"CallInstruction\");\nexports.isCallInstruction = isCallInstruction;\nvar isCallIndirectInstruction = isTypeOf(\"CallIndirectInstruction\");\nexports.isCallIndirectInstruction = isCallIndirectInstruction;\nvar isByteArray = isTypeOf(\"ByteArray\");\nexports.isByteArray = isByteArray;\nvar isFunc = isTypeOf(\"Func\");\nexports.isFunc = isFunc;\nvar isInternalBrUnless = isTypeOf(\"InternalBrUnless\");\nexports.isInternalBrUnless = isInternalBrUnless;\nvar isInternalGoto = isTypeOf(\"InternalGoto\");\nexports.isInternalGoto = isInternalGoto;\nvar isInternalCallExtern = isTypeOf(\"InternalCallExtern\");\nexports.isInternalCallExtern = isInternalCallExtern;\nvar isInternalEndAndReturn = isTypeOf(\"InternalEndAndReturn\");\nexports.isInternalEndAndReturn = isInternalEndAndReturn;\n\nvar isNode = function isNode(node) {\n  return isModule(node) || isModuleMetadata(node) || isModuleNameMetadata(node) || isFunctionNameMetadata(node) || isLocalNameMetadata(node) || isBinaryModule(node) || isQuoteModule(node) || isSectionMetadata(node) || isProducersSectionMetadata(node) || isProducerMetadata(node) || isProducerMetadataVersionedName(node) || isLoopInstruction(node) || isInstr(node) || isIfInstruction(node) || isStringLiteral(node) || isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node) || isElem(node) || isIndexInFuncSection(node) || isValtypeLiteral(node) || isTypeInstruction(node) || isStart(node) || isGlobalType(node) || isLeadingComment(node) || isBlockComment(node) || isData(node) || isGlobal(node) || isTable(node) || isMemory(node) || isFuncImportDescr(node) || isModuleImport(node) || isModuleExportDescr(node) || isModuleExport(node) || isLimit(node) || isSignature(node) || isProgram(node) || isIdentifier(node) || isBlockInstruction(node) || isCallInstruction(node) || isCallIndirectInstruction(node) || isByteArray(node) || isFunc(node) || isInternalBrUnless(node) || isInternalGoto(node) || isInternalCallExtern(node) || isInternalEndAndReturn(node);\n};\n\nexports.isNode = isNode;\n\nvar isBlock = function isBlock(node) {\n  return isLoopInstruction(node) || isBlockInstruction(node) || isFunc(node);\n};\n\nexports.isBlock = isBlock;\n\nvar isInstruction = function isInstruction(node) {\n  return isLoopInstruction(node) || isInstr(node) || isIfInstruction(node) || isTypeInstruction(node) || isBlockInstruction(node) || isCallInstruction(node) || isCallIndirectInstruction(node);\n};\n\nexports.isInstruction = isInstruction;\n\nvar isExpression = function isExpression(node) {\n  return isInstr(node) || isStringLiteral(node) || isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node) || isValtypeLiteral(node) || isIdentifier(node);\n};\n\nexports.isExpression = isExpression;\n\nvar isNumericLiteral = function isNumericLiteral(node) {\n  return isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node);\n};\n\nexports.isNumericLiteral = isNumericLiteral;\n\nvar isImportDescr = function isImportDescr(node) {\n  return isGlobalType(node) || isTable(node) || isMemory(node) || isFuncImportDescr(node);\n};\n\nexports.isImportDescr = isImportDescr;\n\nvar isIntrinsic = function isIntrinsic(node) {\n  return isInternalBrUnless(node) || isInternalGoto(node) || isInternalCallExtern(node) || isInternalEndAndReturn(node);\n};\n\nexports.isIntrinsic = isIntrinsic;\nvar assertModule = assertTypeOf(\"Module\");\nexports.assertModule = assertModule;\nvar assertModuleMetadata = assertTypeOf(\"ModuleMetadata\");\nexports.assertModuleMetadata = assertModuleMetadata;\nvar assertModuleNameMetadata = assertTypeOf(\"ModuleNameMetadata\");\nexports.assertModuleNameMetadata = assertModuleNameMetadata;\nvar assertFunctionNameMetadata = assertTypeOf(\"FunctionNameMetadata\");\nexports.assertFunctionNameMetadata = assertFunctionNameMetadata;\nvar assertLocalNameMetadata = assertTypeOf(\"LocalNameMetadata\");\nexports.assertLocalNameMetadata = assertLocalNameMetadata;\nvar assertBinaryModule = assertTypeOf(\"BinaryModule\");\nexports.assertBinaryModule = assertBinaryModule;\nvar assertQuoteModule = assertTypeOf(\"QuoteModule\");\nexports.assertQuoteModule = assertQuoteModule;\nvar assertSectionMetadata = assertTypeOf(\"SectionMetadata\");\nexports.assertSectionMetadata = assertSectionMetadata;\nvar assertProducersSectionMetadata = assertTypeOf(\"ProducersSectionMetadata\");\nexports.assertProducersSectionMetadata = assertProducersSectionMetadata;\nvar assertProducerMetadata = assertTypeOf(\"ProducerMetadata\");\nexports.assertProducerMetadata = assertProducerMetadata;\nvar assertProducerMetadataVersionedName = assertTypeOf(\"ProducerMetadataVersionedName\");\nexports.assertProducerMetadataVersionedName = assertProducerMetadataVersionedName;\nvar assertLoopInstruction = assertTypeOf(\"LoopInstruction\");\nexports.assertLoopInstruction = assertLoopInstruction;\nvar assertInstr = assertTypeOf(\"Instr\");\nexports.assertInstr = assertInstr;\nvar assertIfInstruction = assertTypeOf(\"IfInstruction\");\nexports.assertIfInstruction = assertIfInstruction;\nvar assertStringLiteral = assertTypeOf(\"StringLiteral\");\nexports.assertStringLiteral = assertStringLiteral;\nvar assertNumberLiteral = assertTypeOf(\"NumberLiteral\");\nexports.assertNumberLiteral = assertNumberLiteral;\nvar assertLongNumberLiteral = assertTypeOf(\"LongNumberLiteral\");\nexports.assertLongNumberLiteral = assertLongNumberLiteral;\nvar assertFloatLiteral = assertTypeOf(\"FloatLiteral\");\nexports.assertFloatLiteral = assertFloatLiteral;\nvar assertElem = assertTypeOf(\"Elem\");\nexports.assertElem = assertElem;\nvar assertIndexInFuncSection = assertTypeOf(\"IndexInFuncSection\");\nexports.assertIndexInFuncSection = assertIndexInFuncSection;\nvar assertValtypeLiteral = assertTypeOf(\"ValtypeLiteral\");\nexports.assertValtypeLiteral = assertValtypeLiteral;\nvar assertTypeInstruction = assertTypeOf(\"TypeInstruction\");\nexports.assertTypeInstruction = assertTypeInstruction;\nvar assertStart = assertTypeOf(\"Start\");\nexports.assertStart = assertStart;\nvar assertGlobalType = assertTypeOf(\"GlobalType\");\nexports.assertGlobalType = assertGlobalType;\nvar assertLeadingComment = assertTypeOf(\"LeadingComment\");\nexports.assertLeadingComment = assertLeadingComment;\nvar assertBlockComment = assertTypeOf(\"BlockComment\");\nexports.assertBlockComment = assertBlockComment;\nvar assertData = assertTypeOf(\"Data\");\nexports.assertData = assertData;\nvar assertGlobal = assertTypeOf(\"Global\");\nexports.assertGlobal = assertGlobal;\nvar assertTable = assertTypeOf(\"Table\");\nexports.assertTable = assertTable;\nvar assertMemory = assertTypeOf(\"Memory\");\nexports.assertMemory = assertMemory;\nvar assertFuncImportDescr = assertTypeOf(\"FuncImportDescr\");\nexports.assertFuncImportDescr = assertFuncImportDescr;\nvar assertModuleImport = assertTypeOf(\"ModuleImport\");\nexports.assertModuleImport = assertModuleImport;\nvar assertModuleExportDescr = assertTypeOf(\"ModuleExportDescr\");\nexports.assertModuleExportDescr = assertModuleExportDescr;\nvar assertModuleExport = assertTypeOf(\"ModuleExport\");\nexports.assertModuleExport = assertModuleExport;\nvar assertLimit = assertTypeOf(\"Limit\");\nexports.assertLimit = assertLimit;\nvar assertSignature = assertTypeOf(\"Signature\");\nexports.assertSignature = assertSignature;\nvar assertProgram = assertTypeOf(\"Program\");\nexports.assertProgram = assertProgram;\nvar assertIdentifier = assertTypeOf(\"Identifier\");\nexports.assertIdentifier = assertIdentifier;\nvar assertBlockInstruction = assertTypeOf(\"BlockInstruction\");\nexports.assertBlockInstruction = assertBlockInstruction;\nvar assertCallInstruction = assertTypeOf(\"CallInstruction\");\nexports.assertCallInstruction = assertCallInstruction;\nvar assertCallIndirectInstruction = assertTypeOf(\"CallIndirectInstruction\");\nexports.assertCallIndirectInstruction = assertCallIndirectInstruction;\nvar assertByteArray = assertTypeOf(\"ByteArray\");\nexports.assertByteArray = assertByteArray;\nvar assertFunc = assertTypeOf(\"Func\");\nexports.assertFunc = assertFunc;\nvar assertInternalBrUnless = assertTypeOf(\"InternalBrUnless\");\nexports.assertInternalBrUnless = assertInternalBrUnless;\nvar assertInternalGoto = assertTypeOf(\"InternalGoto\");\nexports.assertInternalGoto = assertInternalGoto;\nvar assertInternalCallExtern = assertTypeOf(\"InternalCallExtern\");\nexports.assertInternalCallExtern = assertInternalCallExtern;\nvar assertInternalEndAndReturn = assertTypeOf(\"InternalEndAndReturn\");\nexports.assertInternalEndAndReturn = assertInternalEndAndReturn;\nvar unionTypesMap = {\n  Module: [\"Node\"],\n  ModuleMetadata: [\"Node\"],\n  ModuleNameMetadata: [\"Node\"],\n  FunctionNameMetadata: [\"Node\"],\n  LocalNameMetadata: [\"Node\"],\n  BinaryModule: [\"Node\"],\n  QuoteModule: [\"Node\"],\n  SectionMetadata: [\"Node\"],\n  ProducersSectionMetadata: [\"Node\"],\n  ProducerMetadata: [\"Node\"],\n  ProducerMetadataVersionedName: [\"Node\"],\n  LoopInstruction: [\"Node\", \"Block\", \"Instruction\"],\n  Instr: [\"Node\", \"Expression\", \"Instruction\"],\n  IfInstruction: [\"Node\", \"Instruction\"],\n  StringLiteral: [\"Node\", \"Expression\"],\n  NumberLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  LongNumberLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  FloatLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  Elem: [\"Node\"],\n  IndexInFuncSection: [\"Node\"],\n  ValtypeLiteral: [\"Node\", \"Expression\"],\n  TypeInstruction: [\"Node\", \"Instruction\"],\n  Start: [\"Node\"],\n  GlobalType: [\"Node\", \"ImportDescr\"],\n  LeadingComment: [\"Node\"],\n  BlockComment: [\"Node\"],\n  Data: [\"Node\"],\n  Global: [\"Node\"],\n  Table: [\"Node\", \"ImportDescr\"],\n  Memory: [\"Node\", \"ImportDescr\"],\n  FuncImportDescr: [\"Node\", \"ImportDescr\"],\n  ModuleImport: [\"Node\"],\n  ModuleExportDescr: [\"Node\"],\n  ModuleExport: [\"Node\"],\n  Limit: [\"Node\"],\n  Signature: [\"Node\"],\n  Program: [\"Node\"],\n  Identifier: [\"Node\", \"Expression\"],\n  BlockInstruction: [\"Node\", \"Block\", \"Instruction\"],\n  CallInstruction: [\"Node\", \"Instruction\"],\n  CallIndirectInstruction: [\"Node\", \"Instruction\"],\n  ByteArray: [\"Node\"],\n  Func: [\"Node\", \"Block\"],\n  InternalBrUnless: [\"Node\", \"Intrinsic\"],\n  InternalGoto: [\"Node\", \"Intrinsic\"],\n  InternalCallExtern: [\"Node\", \"Intrinsic\"],\n  InternalEndAndReturn: [\"Node\", \"Intrinsic\"]\n};\nexports.unionTypesMap = unionTypesMap;\nvar nodeAndUnionTypes = [\"Module\", \"ModuleMetadata\", \"ModuleNameMetadata\", \"FunctionNameMetadata\", \"LocalNameMetadata\", \"BinaryModule\", \"QuoteModule\", \"SectionMetadata\", \"ProducersSectionMetadata\", \"ProducerMetadata\", \"ProducerMetadataVersionedName\", \"LoopInstruction\", \"Instr\", \"IfInstruction\", \"StringLiteral\", \"NumberLiteral\", \"LongNumberLiteral\", \"FloatLiteral\", \"Elem\", \"IndexInFuncSection\", \"ValtypeLiteral\", \"TypeInstruction\", \"Start\", \"GlobalType\", \"LeadingComment\", \"BlockComment\", \"Data\", \"Global\", \"Table\", \"Memory\", \"FuncImportDescr\", \"ModuleImport\", \"ModuleExportDescr\", \"ModuleExport\", \"Limit\", \"Signature\", \"Program\", \"Identifier\", \"BlockInstruction\", \"CallInstruction\", \"CallIndirectInstruction\", \"ByteArray\", \"Func\", \"InternalBrUnless\", \"InternalGoto\", \"InternalCallExtern\", \"InternalEndAndReturn\", \"Node\", \"Block\", \"Instruction\", \"Expression\", \"NumericLiteral\", \"ImportDescr\", \"Intrinsic\"];\nexports.nodeAndUnionTypes = nodeAndUnionTypes;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/@webassemblyjs/ast/lib/nodes.js"],"names":["Object","defineProperty","exports","value","module","_module","moduleMetadata","moduleNameMetadata","functionNameMetadata","localNameMetadata","binaryModule","quoteModule","sectionMetadata","producersSectionMetadata","producerMetadata","producerMetadataVersionedName","loopInstruction","instr","ifInstruction","stringLiteral","numberLiteral","longNumberLiteral","floatLiteral","elem","indexInFuncSection","valtypeLiteral","typeInstruction","start","globalType","leadingComment","blockComment","data","global","table","memory","funcImportDescr","moduleImport","moduleExportDescr","moduleExport","limit","signature","program","identifier","blockInstruction","callInstruction","callIndirectInstruction","byteArray","func","internalBrUnless","internalGoto","internalCallExtern","internalEndAndReturn","assertInternalCallExtern","assertInternalGoto","assertInternalBrUnless","assertFunc","assertByteArray","assertCallIndirectInstruction","assertCallInstruction","assertBlockInstruction","assertIdentifier","assertProgram","assertSignature","assertLimit","assertModuleExport","assertModuleExportDescr","assertModuleImport","assertFuncImportDescr","assertMemory","assertTable","assertGlobal","assertData","assertBlockComment","assertLeadingComment","assertGlobalType","assertStart","assertTypeInstruction","assertValtypeLiteral","assertIndexInFuncSection","assertElem","assertFloatLiteral","assertLongNumberLiteral","assertNumberLiteral","assertStringLiteral","assertIfInstruction","assertInstr","assertLoopInstruction","assertProducerMetadataVersionedName","assertProducerMetadata","assertProducersSectionMetadata","assertSectionMetadata","assertQuoteModule","assertBinaryModule","assertLocalNameMetadata","assertFunctionNameMetadata","assertModuleNameMetadata","assertModuleMetadata","assertModule","isIntrinsic","isImportDescr","isNumericLiteral","isExpression","isInstruction","isBlock","isNode","isInternalEndAndReturn","isInternalCallExtern","isInternalGoto","isInternalBrUnless","isFunc","isByteArray","isCallIndirectInstruction","isCallInstruction","isBlockInstruction","isIdentifier","isProgram","isSignature","isLimit","isModuleExport","isModuleExportDescr","isModuleImport","isFuncImportDescr","isMemory","isTable","isGlobal","isData","isBlockComment","isLeadingComment","isGlobalType","isStart","isTypeInstruction","isValtypeLiteral","isIndexInFuncSection","isElem","isFloatLiteral","isLongNumberLiteral","isNumberLiteral","isStringLiteral","isIfInstruction","isInstr","isLoopInstruction","isProducerMetadataVersionedName","isProducerMetadata","isProducersSectionMetadata","isSectionMetadata","isQuoteModule","isBinaryModule","isLocalNameMetadata","isFunctionNameMetadata","isModuleNameMetadata","isModuleMetadata","isModule","nodeAndUnionTypes","unionTypesMap","assertInternalEndAndReturn","_typeof","obj","Symbol","iterator","constructor","prototype","isTypeOf","t","n","type","assertTypeOf","Error","undefined","id","fields","metadata","length","node","sections","functionNames","localNames","producers","index","localIndex","functionIndex","blob","string","section","startOffset","size","vectorOfSize","language","processedBy","sdk","name","version","label","resulttype","object","args","namedArgs","keys","testLabel","test","result","consequent","alternate","raw","nan","inf","offset","funcs","functype","valtype","mutability","memoryIndex","init","elementType","limits","elements","descr","exportType","min","max","shared","params","results","body","instrArgs","numeric","intrs","values","isExternal","target","Module","ModuleMetadata","ModuleNameMetadata","FunctionNameMetadata","LocalNameMetadata","BinaryModule","QuoteModule","SectionMetadata","ProducersSectionMetadata","ProducerMetadata","ProducerMetadataVersionedName","LoopInstruction","Instr","IfInstruction","StringLiteral","NumberLiteral","LongNumberLiteral","FloatLiteral","Elem","IndexInFuncSection","ValtypeLiteral","TypeInstruction","Start","GlobalType","LeadingComment","BlockComment","Data","Global","Table","Memory","FuncImportDescr","ModuleImport","ModuleExportDescr","ModuleExport","Limit","Signature","Program","Identifier","BlockInstruction","CallInstruction","CallIndirectInstruction","ByteArray","Func","InternalBrUnless","InternalGoto","InternalCallExtern","InternalEndAndReturn"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.module = _module;\nexports.moduleMetadata = moduleMetadata;\nexports.moduleNameMetadata = moduleNameMetadata;\nexports.functionNameMetadata = functionNameMetadata;\nexports.localNameMetadata = localNameMetadata;\nexports.binaryModule = binaryModule;\nexports.quoteModule = quoteModule;\nexports.sectionMetadata = sectionMetadata;\nexports.producersSectionMetadata = producersSectionMetadata;\nexports.producerMetadata = producerMetadata;\nexports.producerMetadataVersionedName = producerMetadataVersionedName;\nexports.loopInstruction = loopInstruction;\nexports.instr = instr;\nexports.ifInstruction = ifInstruction;\nexports.stringLiteral = stringLiteral;\nexports.numberLiteral = numberLiteral;\nexports.longNumberLiteral = longNumberLiteral;\nexports.floatLiteral = floatLiteral;\nexports.elem = elem;\nexports.indexInFuncSection = indexInFuncSection;\nexports.valtypeLiteral = valtypeLiteral;\nexports.typeInstruction = typeInstruction;\nexports.start = start;\nexports.globalType = globalType;\nexports.leadingComment = leadingComment;\nexports.blockComment = blockComment;\nexports.data = data;\nexports.global = global;\nexports.table = table;\nexports.memory = memory;\nexports.funcImportDescr = funcImportDescr;\nexports.moduleImport = moduleImport;\nexports.moduleExportDescr = moduleExportDescr;\nexports.moduleExport = moduleExport;\nexports.limit = limit;\nexports.signature = signature;\nexports.program = program;\nexports.identifier = identifier;\nexports.blockInstruction = blockInstruction;\nexports.callInstruction = callInstruction;\nexports.callIndirectInstruction = callIndirectInstruction;\nexports.byteArray = byteArray;\nexports.func = func;\nexports.internalBrUnless = internalBrUnless;\nexports.internalGoto = internalGoto;\nexports.internalCallExtern = internalCallExtern;\nexports.internalEndAndReturn = internalEndAndReturn;\nexports.assertInternalCallExtern = exports.assertInternalGoto = exports.assertInternalBrUnless = exports.assertFunc = exports.assertByteArray = exports.assertCallIndirectInstruction = exports.assertCallInstruction = exports.assertBlockInstruction = exports.assertIdentifier = exports.assertProgram = exports.assertSignature = exports.assertLimit = exports.assertModuleExport = exports.assertModuleExportDescr = exports.assertModuleImport = exports.assertFuncImportDescr = exports.assertMemory = exports.assertTable = exports.assertGlobal = exports.assertData = exports.assertBlockComment = exports.assertLeadingComment = exports.assertGlobalType = exports.assertStart = exports.assertTypeInstruction = exports.assertValtypeLiteral = exports.assertIndexInFuncSection = exports.assertElem = exports.assertFloatLiteral = exports.assertLongNumberLiteral = exports.assertNumberLiteral = exports.assertStringLiteral = exports.assertIfInstruction = exports.assertInstr = exports.assertLoopInstruction = exports.assertProducerMetadataVersionedName = exports.assertProducerMetadata = exports.assertProducersSectionMetadata = exports.assertSectionMetadata = exports.assertQuoteModule = exports.assertBinaryModule = exports.assertLocalNameMetadata = exports.assertFunctionNameMetadata = exports.assertModuleNameMetadata = exports.assertModuleMetadata = exports.assertModule = exports.isIntrinsic = exports.isImportDescr = exports.isNumericLiteral = exports.isExpression = exports.isInstruction = exports.isBlock = exports.isNode = exports.isInternalEndAndReturn = exports.isInternalCallExtern = exports.isInternalGoto = exports.isInternalBrUnless = exports.isFunc = exports.isByteArray = exports.isCallIndirectInstruction = exports.isCallInstruction = exports.isBlockInstruction = exports.isIdentifier = exports.isProgram = exports.isSignature = exports.isLimit = exports.isModuleExport = exports.isModuleExportDescr = exports.isModuleImport = exports.isFuncImportDescr = exports.isMemory = exports.isTable = exports.isGlobal = exports.isData = exports.isBlockComment = exports.isLeadingComment = exports.isGlobalType = exports.isStart = exports.isTypeInstruction = exports.isValtypeLiteral = exports.isIndexInFuncSection = exports.isElem = exports.isFloatLiteral = exports.isLongNumberLiteral = exports.isNumberLiteral = exports.isStringLiteral = exports.isIfInstruction = exports.isInstr = exports.isLoopInstruction = exports.isProducerMetadataVersionedName = exports.isProducerMetadata = exports.isProducersSectionMetadata = exports.isSectionMetadata = exports.isQuoteModule = exports.isBinaryModule = exports.isLocalNameMetadata = exports.isFunctionNameMetadata = exports.isModuleNameMetadata = exports.isModuleMetadata = exports.isModule = void 0;\nexports.nodeAndUnionTypes = exports.unionTypesMap = exports.assertInternalEndAndReturn = void 0;\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// THIS FILE IS AUTOGENERATED\n// see scripts/generateNodeUtils.js\nfunction isTypeOf(t) {\n  return function (n) {\n    return n.type === t;\n  };\n}\n\nfunction assertTypeOf(t) {\n  return function (n) {\n    return function () {\n      if (!(n.type === t)) {\n        throw new Error('n.type === t' + \" error: \" + (undefined || \"unknown\"));\n      }\n    }();\n  };\n}\n\nfunction _module(id, fields, metadata) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(fields) === \"object\" && typeof fields.length !== \"undefined\")) {\n    throw new Error('typeof fields === \"object\" && typeof fields.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Module\",\n    id: id,\n    fields: fields\n  };\n\n  if (typeof metadata !== \"undefined\") {\n    node.metadata = metadata;\n  }\n\n  return node;\n}\n\nfunction moduleMetadata(sections, functionNames, localNames, producers) {\n  if (!(_typeof(sections) === \"object\" && typeof sections.length !== \"undefined\")) {\n    throw new Error('typeof sections === \"object\" && typeof sections.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (functionNames !== null && functionNames !== undefined) {\n    if (!(_typeof(functionNames) === \"object\" && typeof functionNames.length !== \"undefined\")) {\n      throw new Error('typeof functionNames === \"object\" && typeof functionNames.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  if (localNames !== null && localNames !== undefined) {\n    if (!(_typeof(localNames) === \"object\" && typeof localNames.length !== \"undefined\")) {\n      throw new Error('typeof localNames === \"object\" && typeof localNames.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  if (producers !== null && producers !== undefined) {\n    if (!(_typeof(producers) === \"object\" && typeof producers.length !== \"undefined\")) {\n      throw new Error('typeof producers === \"object\" && typeof producers.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"ModuleMetadata\",\n    sections: sections\n  };\n\n  if (typeof functionNames !== \"undefined\" && functionNames.length > 0) {\n    node.functionNames = functionNames;\n  }\n\n  if (typeof localNames !== \"undefined\" && localNames.length > 0) {\n    node.localNames = localNames;\n  }\n\n  if (typeof producers !== \"undefined\" && producers.length > 0) {\n    node.producers = producers;\n  }\n\n  return node;\n}\n\nfunction moduleNameMetadata(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleNameMetadata\",\n    value: value\n  };\n  return node;\n}\n\nfunction functionNameMetadata(value, index) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof index === \"number\")) {\n    throw new Error('typeof index === \"number\"' + \" error: \" + (\"Argument index must be of type number, given: \" + _typeof(index) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"FunctionNameMetadata\",\n    value: value,\n    index: index\n  };\n  return node;\n}\n\nfunction localNameMetadata(value, localIndex, functionIndex) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof localIndex === \"number\")) {\n    throw new Error('typeof localIndex === \"number\"' + \" error: \" + (\"Argument localIndex must be of type number, given: \" + _typeof(localIndex) || \"unknown\"));\n  }\n\n  if (!(typeof functionIndex === \"number\")) {\n    throw new Error('typeof functionIndex === \"number\"' + \" error: \" + (\"Argument functionIndex must be of type number, given: \" + _typeof(functionIndex) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LocalNameMetadata\",\n    value: value,\n    localIndex: localIndex,\n    functionIndex: functionIndex\n  };\n  return node;\n}\n\nfunction binaryModule(id, blob) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(blob) === \"object\" && typeof blob.length !== \"undefined\")) {\n    throw new Error('typeof blob === \"object\" && typeof blob.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BinaryModule\",\n    id: id,\n    blob: blob\n  };\n  return node;\n}\n\nfunction quoteModule(id, string) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(string) === \"object\" && typeof string.length !== \"undefined\")) {\n    throw new Error('typeof string === \"object\" && typeof string.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"QuoteModule\",\n    id: id,\n    string: string\n  };\n  return node;\n}\n\nfunction sectionMetadata(section, startOffset, size, vectorOfSize) {\n  if (!(typeof startOffset === \"number\")) {\n    throw new Error('typeof startOffset === \"number\"' + \" error: \" + (\"Argument startOffset must be of type number, given: \" + _typeof(startOffset) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"SectionMetadata\",\n    section: section,\n    startOffset: startOffset,\n    size: size,\n    vectorOfSize: vectorOfSize\n  };\n  return node;\n}\n\nfunction producersSectionMetadata(producers) {\n  if (!(_typeof(producers) === \"object\" && typeof producers.length !== \"undefined\")) {\n    throw new Error('typeof producers === \"object\" && typeof producers.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducersSectionMetadata\",\n    producers: producers\n  };\n  return node;\n}\n\nfunction producerMetadata(language, processedBy, sdk) {\n  if (!(_typeof(language) === \"object\" && typeof language.length !== \"undefined\")) {\n    throw new Error('typeof language === \"object\" && typeof language.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(processedBy) === \"object\" && typeof processedBy.length !== \"undefined\")) {\n    throw new Error('typeof processedBy === \"object\" && typeof processedBy.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(sdk) === \"object\" && typeof sdk.length !== \"undefined\")) {\n    throw new Error('typeof sdk === \"object\" && typeof sdk.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducerMetadata\",\n    language: language,\n    processedBy: processedBy,\n    sdk: sdk\n  };\n  return node;\n}\n\nfunction producerMetadataVersionedName(name, version) {\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  if (!(typeof version === \"string\")) {\n    throw new Error('typeof version === \"string\"' + \" error: \" + (\"Argument version must be of type string, given: \" + _typeof(version) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducerMetadataVersionedName\",\n    name: name,\n    version: version\n  };\n  return node;\n}\n\nfunction loopInstruction(label, resulttype, instr) {\n  if (!(_typeof(instr) === \"object\" && typeof instr.length !== \"undefined\")) {\n    throw new Error('typeof instr === \"object\" && typeof instr.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LoopInstruction\",\n    id: \"loop\",\n    label: label,\n    resulttype: resulttype,\n    instr: instr\n  };\n  return node;\n}\n\nfunction instr(id, object, args, namedArgs) {\n  if (!(typeof id === \"string\")) {\n    throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n  }\n\n  if (!(_typeof(args) === \"object\" && typeof args.length !== \"undefined\")) {\n    throw new Error('typeof args === \"object\" && typeof args.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Instr\",\n    id: id,\n    args: args\n  };\n\n  if (typeof object !== \"undefined\") {\n    node.object = object;\n  }\n\n  if (typeof namedArgs !== \"undefined\" && Object.keys(namedArgs).length !== 0) {\n    node.namedArgs = namedArgs;\n  }\n\n  return node;\n}\n\nfunction ifInstruction(testLabel, test, result, consequent, alternate) {\n  if (!(_typeof(test) === \"object\" && typeof test.length !== \"undefined\")) {\n    throw new Error('typeof test === \"object\" && typeof test.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(consequent) === \"object\" && typeof consequent.length !== \"undefined\")) {\n    throw new Error('typeof consequent === \"object\" && typeof consequent.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(alternate) === \"object\" && typeof alternate.length !== \"undefined\")) {\n    throw new Error('typeof alternate === \"object\" && typeof alternate.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"IfInstruction\",\n    id: \"if\",\n    testLabel: testLabel,\n    test: test,\n    result: result,\n    consequent: consequent,\n    alternate: alternate\n  };\n  return node;\n}\n\nfunction stringLiteral(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"StringLiteral\",\n    value: value\n  };\n  return node;\n}\n\nfunction numberLiteral(value, raw) {\n  if (!(typeof value === \"number\")) {\n    throw new Error('typeof value === \"number\"' + \" error: \" + (\"Argument value must be of type number, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"NumberLiteral\",\n    value: value,\n    raw: raw\n  };\n  return node;\n}\n\nfunction longNumberLiteral(value, raw) {\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LongNumberLiteral\",\n    value: value,\n    raw: raw\n  };\n  return node;\n}\n\nfunction floatLiteral(value, nan, inf, raw) {\n  if (!(typeof value === \"number\")) {\n    throw new Error('typeof value === \"number\"' + \" error: \" + (\"Argument value must be of type number, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (nan !== null && nan !== undefined) {\n    if (!(typeof nan === \"boolean\")) {\n      throw new Error('typeof nan === \"boolean\"' + \" error: \" + (\"Argument nan must be of type boolean, given: \" + _typeof(nan) || \"unknown\"));\n    }\n  }\n\n  if (inf !== null && inf !== undefined) {\n    if (!(typeof inf === \"boolean\")) {\n      throw new Error('typeof inf === \"boolean\"' + \" error: \" + (\"Argument inf must be of type boolean, given: \" + _typeof(inf) || \"unknown\"));\n    }\n  }\n\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"FloatLiteral\",\n    value: value,\n    raw: raw\n  };\n\n  if (nan === true) {\n    node.nan = true;\n  }\n\n  if (inf === true) {\n    node.inf = true;\n  }\n\n  return node;\n}\n\nfunction elem(table, offset, funcs) {\n  if (!(_typeof(offset) === \"object\" && typeof offset.length !== \"undefined\")) {\n    throw new Error('typeof offset === \"object\" && typeof offset.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(funcs) === \"object\" && typeof funcs.length !== \"undefined\")) {\n    throw new Error('typeof funcs === \"object\" && typeof funcs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Elem\",\n    table: table,\n    offset: offset,\n    funcs: funcs\n  };\n  return node;\n}\n\nfunction indexInFuncSection(index) {\n  var node = {\n    type: \"IndexInFuncSection\",\n    index: index\n  };\n  return node;\n}\n\nfunction valtypeLiteral(name) {\n  var node = {\n    type: \"ValtypeLiteral\",\n    name: name\n  };\n  return node;\n}\n\nfunction typeInstruction(id, functype) {\n  var node = {\n    type: \"TypeInstruction\",\n    id: id,\n    functype: functype\n  };\n  return node;\n}\n\nfunction start(index) {\n  var node = {\n    type: \"Start\",\n    index: index\n  };\n  return node;\n}\n\nfunction globalType(valtype, mutability) {\n  var node = {\n    type: \"GlobalType\",\n    valtype: valtype,\n    mutability: mutability\n  };\n  return node;\n}\n\nfunction leadingComment(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LeadingComment\",\n    value: value\n  };\n  return node;\n}\n\nfunction blockComment(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BlockComment\",\n    value: value\n  };\n  return node;\n}\n\nfunction data(memoryIndex, offset, init) {\n  var node = {\n    type: \"Data\",\n    memoryIndex: memoryIndex,\n    offset: offset,\n    init: init\n  };\n  return node;\n}\n\nfunction global(globalType, init, name) {\n  if (!(_typeof(init) === \"object\" && typeof init.length !== \"undefined\")) {\n    throw new Error('typeof init === \"object\" && typeof init.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Global\",\n    globalType: globalType,\n    init: init,\n    name: name\n  };\n  return node;\n}\n\nfunction table(elementType, limits, name, elements) {\n  if (!(limits.type === \"Limit\")) {\n    throw new Error('limits.type === \"Limit\"' + \" error: \" + (\"Argument limits must be of type Limit, given: \" + limits.type || \"unknown\"));\n  }\n\n  if (elements !== null && elements !== undefined) {\n    if (!(_typeof(elements) === \"object\" && typeof elements.length !== \"undefined\")) {\n      throw new Error('typeof elements === \"object\" && typeof elements.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Table\",\n    elementType: elementType,\n    limits: limits,\n    name: name\n  };\n\n  if (typeof elements !== \"undefined\" && elements.length > 0) {\n    node.elements = elements;\n  }\n\n  return node;\n}\n\nfunction memory(limits, id) {\n  var node = {\n    type: \"Memory\",\n    limits: limits,\n    id: id\n  };\n  return node;\n}\n\nfunction funcImportDescr(id, signature) {\n  var node = {\n    type: \"FuncImportDescr\",\n    id: id,\n    signature: signature\n  };\n  return node;\n}\n\nfunction moduleImport(module, name, descr) {\n  if (!(typeof module === \"string\")) {\n    throw new Error('typeof module === \"string\"' + \" error: \" + (\"Argument module must be of type string, given: \" + _typeof(module) || \"unknown\"));\n  }\n\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleImport\",\n    module: module,\n    name: name,\n    descr: descr\n  };\n  return node;\n}\n\nfunction moduleExportDescr(exportType, id) {\n  var node = {\n    type: \"ModuleExportDescr\",\n    exportType: exportType,\n    id: id\n  };\n  return node;\n}\n\nfunction moduleExport(name, descr) {\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleExport\",\n    name: name,\n    descr: descr\n  };\n  return node;\n}\n\nfunction limit(min, max, shared) {\n  if (!(typeof min === \"number\")) {\n    throw new Error('typeof min === \"number\"' + \" error: \" + (\"Argument min must be of type number, given: \" + _typeof(min) || \"unknown\"));\n  }\n\n  if (max !== null && max !== undefined) {\n    if (!(typeof max === \"number\")) {\n      throw new Error('typeof max === \"number\"' + \" error: \" + (\"Argument max must be of type number, given: \" + _typeof(max) || \"unknown\"));\n    }\n  }\n\n  if (shared !== null && shared !== undefined) {\n    if (!(typeof shared === \"boolean\")) {\n      throw new Error('typeof shared === \"boolean\"' + \" error: \" + (\"Argument shared must be of type boolean, given: \" + _typeof(shared) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Limit\",\n    min: min\n  };\n\n  if (typeof max !== \"undefined\") {\n    node.max = max;\n  }\n\n  if (shared === true) {\n    node.shared = true;\n  }\n\n  return node;\n}\n\nfunction signature(params, results) {\n  if (!(_typeof(params) === \"object\" && typeof params.length !== \"undefined\")) {\n    throw new Error('typeof params === \"object\" && typeof params.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(results) === \"object\" && typeof results.length !== \"undefined\")) {\n    throw new Error('typeof results === \"object\" && typeof results.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Signature\",\n    params: params,\n    results: results\n  };\n  return node;\n}\n\nfunction program(body) {\n  if (!(_typeof(body) === \"object\" && typeof body.length !== \"undefined\")) {\n    throw new Error('typeof body === \"object\" && typeof body.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Program\",\n    body: body\n  };\n  return node;\n}\n\nfunction identifier(value, raw) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (raw !== null && raw !== undefined) {\n    if (!(typeof raw === \"string\")) {\n      throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Identifier\",\n    value: value\n  };\n\n  if (typeof raw !== \"undefined\") {\n    node.raw = raw;\n  }\n\n  return node;\n}\n\nfunction blockInstruction(label, instr, result) {\n  if (!(_typeof(instr) === \"object\" && typeof instr.length !== \"undefined\")) {\n    throw new Error('typeof instr === \"object\" && typeof instr.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BlockInstruction\",\n    id: \"block\",\n    label: label,\n    instr: instr,\n    result: result\n  };\n  return node;\n}\n\nfunction callInstruction(index, instrArgs, numeric) {\n  if (instrArgs !== null && instrArgs !== undefined) {\n    if (!(_typeof(instrArgs) === \"object\" && typeof instrArgs.length !== \"undefined\")) {\n      throw new Error('typeof instrArgs === \"object\" && typeof instrArgs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"CallInstruction\",\n    id: \"call\",\n    index: index\n  };\n\n  if (typeof instrArgs !== \"undefined\" && instrArgs.length > 0) {\n    node.instrArgs = instrArgs;\n  }\n\n  if (typeof numeric !== \"undefined\") {\n    node.numeric = numeric;\n  }\n\n  return node;\n}\n\nfunction callIndirectInstruction(signature, intrs) {\n  if (intrs !== null && intrs !== undefined) {\n    if (!(_typeof(intrs) === \"object\" && typeof intrs.length !== \"undefined\")) {\n      throw new Error('typeof intrs === \"object\" && typeof intrs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"CallIndirectInstruction\",\n    id: \"call_indirect\",\n    signature: signature\n  };\n\n  if (typeof intrs !== \"undefined\" && intrs.length > 0) {\n    node.intrs = intrs;\n  }\n\n  return node;\n}\n\nfunction byteArray(values) {\n  if (!(_typeof(values) === \"object\" && typeof values.length !== \"undefined\")) {\n    throw new Error('typeof values === \"object\" && typeof values.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ByteArray\",\n    values: values\n  };\n  return node;\n}\n\nfunction func(name, signature, body, isExternal, metadata) {\n  if (!(_typeof(body) === \"object\" && typeof body.length !== \"undefined\")) {\n    throw new Error('typeof body === \"object\" && typeof body.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (isExternal !== null && isExternal !== undefined) {\n    if (!(typeof isExternal === \"boolean\")) {\n      throw new Error('typeof isExternal === \"boolean\"' + \" error: \" + (\"Argument isExternal must be of type boolean, given: \" + _typeof(isExternal) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Func\",\n    name: name,\n    signature: signature,\n    body: body\n  };\n\n  if (isExternal === true) {\n    node.isExternal = true;\n  }\n\n  if (typeof metadata !== \"undefined\") {\n    node.metadata = metadata;\n  }\n\n  return node;\n}\n\nfunction internalBrUnless(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalBrUnless\",\n    target: target\n  };\n  return node;\n}\n\nfunction internalGoto(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalGoto\",\n    target: target\n  };\n  return node;\n}\n\nfunction internalCallExtern(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalCallExtern\",\n    target: target\n  };\n  return node;\n}\n\nfunction internalEndAndReturn() {\n  var node = {\n    type: \"InternalEndAndReturn\"\n  };\n  return node;\n}\n\nvar isModule = isTypeOf(\"Module\");\nexports.isModule = isModule;\nvar isModuleMetadata = isTypeOf(\"ModuleMetadata\");\nexports.isModuleMetadata = isModuleMetadata;\nvar isModuleNameMetadata = isTypeOf(\"ModuleNameMetadata\");\nexports.isModuleNameMetadata = isModuleNameMetadata;\nvar isFunctionNameMetadata = isTypeOf(\"FunctionNameMetadata\");\nexports.isFunctionNameMetadata = isFunctionNameMetadata;\nvar isLocalNameMetadata = isTypeOf(\"LocalNameMetadata\");\nexports.isLocalNameMetadata = isLocalNameMetadata;\nvar isBinaryModule = isTypeOf(\"BinaryModule\");\nexports.isBinaryModule = isBinaryModule;\nvar isQuoteModule = isTypeOf(\"QuoteModule\");\nexports.isQuoteModule = isQuoteModule;\nvar isSectionMetadata = isTypeOf(\"SectionMetadata\");\nexports.isSectionMetadata = isSectionMetadata;\nvar isProducersSectionMetadata = isTypeOf(\"ProducersSectionMetadata\");\nexports.isProducersSectionMetadata = isProducersSectionMetadata;\nvar isProducerMetadata = isTypeOf(\"ProducerMetadata\");\nexports.isProducerMetadata = isProducerMetadata;\nvar isProducerMetadataVersionedName = isTypeOf(\"ProducerMetadataVersionedName\");\nexports.isProducerMetadataVersionedName = isProducerMetadataVersionedName;\nvar isLoopInstruction = isTypeOf(\"LoopInstruction\");\nexports.isLoopInstruction = isLoopInstruction;\nvar isInstr = isTypeOf(\"Instr\");\nexports.isInstr = isInstr;\nvar isIfInstruction = isTypeOf(\"IfInstruction\");\nexports.isIfInstruction = isIfInstruction;\nvar isStringLiteral = isTypeOf(\"StringLiteral\");\nexports.isStringLiteral = isStringLiteral;\nvar isNumberLiteral = isTypeOf(\"NumberLiteral\");\nexports.isNumberLiteral = isNumberLiteral;\nvar isLongNumberLiteral = isTypeOf(\"LongNumberLiteral\");\nexports.isLongNumberLiteral = isLongNumberLiteral;\nvar isFloatLiteral = isTypeOf(\"FloatLiteral\");\nexports.isFloatLiteral = isFloatLiteral;\nvar isElem = isTypeOf(\"Elem\");\nexports.isElem = isElem;\nvar isIndexInFuncSection = isTypeOf(\"IndexInFuncSection\");\nexports.isIndexInFuncSection = isIndexInFuncSection;\nvar isValtypeLiteral = isTypeOf(\"ValtypeLiteral\");\nexports.isValtypeLiteral = isValtypeLiteral;\nvar isTypeInstruction = isTypeOf(\"TypeInstruction\");\nexports.isTypeInstruction = isTypeInstruction;\nvar isStart = isTypeOf(\"Start\");\nexports.isStart = isStart;\nvar isGlobalType = isTypeOf(\"GlobalType\");\nexports.isGlobalType = isGlobalType;\nvar isLeadingComment = isTypeOf(\"LeadingComment\");\nexports.isLeadingComment = isLeadingComment;\nvar isBlockComment = isTypeOf(\"BlockComment\");\nexports.isBlockComment = isBlockComment;\nvar isData = isTypeOf(\"Data\");\nexports.isData = isData;\nvar isGlobal = isTypeOf(\"Global\");\nexports.isGlobal = isGlobal;\nvar isTable = isTypeOf(\"Table\");\nexports.isTable = isTable;\nvar isMemory = isTypeOf(\"Memory\");\nexports.isMemory = isMemory;\nvar isFuncImportDescr = isTypeOf(\"FuncImportDescr\");\nexports.isFuncImportDescr = isFuncImportDescr;\nvar isModuleImport = isTypeOf(\"ModuleImport\");\nexports.isModuleImport = isModuleImport;\nvar isModuleExportDescr = isTypeOf(\"ModuleExportDescr\");\nexports.isModuleExportDescr = isModuleExportDescr;\nvar isModuleExport = isTypeOf(\"ModuleExport\");\nexports.isModuleExport = isModuleExport;\nvar isLimit = isTypeOf(\"Limit\");\nexports.isLimit = isLimit;\nvar isSignature = isTypeOf(\"Signature\");\nexports.isSignature = isSignature;\nvar isProgram = isTypeOf(\"Program\");\nexports.isProgram = isProgram;\nvar isIdentifier = isTypeOf(\"Identifier\");\nexports.isIdentifier = isIdentifier;\nvar isBlockInstruction = isTypeOf(\"BlockInstruction\");\nexports.isBlockInstruction = isBlockInstruction;\nvar isCallInstruction = isTypeOf(\"CallInstruction\");\nexports.isCallInstruction = isCallInstruction;\nvar isCallIndirectInstruction = isTypeOf(\"CallIndirectInstruction\");\nexports.isCallIndirectInstruction = isCallIndirectInstruction;\nvar isByteArray = isTypeOf(\"ByteArray\");\nexports.isByteArray = isByteArray;\nvar isFunc = isTypeOf(\"Func\");\nexports.isFunc = isFunc;\nvar isInternalBrUnless = isTypeOf(\"InternalBrUnless\");\nexports.isInternalBrUnless = isInternalBrUnless;\nvar isInternalGoto = isTypeOf(\"InternalGoto\");\nexports.isInternalGoto = isInternalGoto;\nvar isInternalCallExtern = isTypeOf(\"InternalCallExtern\");\nexports.isInternalCallExtern = isInternalCallExtern;\nvar isInternalEndAndReturn = isTypeOf(\"InternalEndAndReturn\");\nexports.isInternalEndAndReturn = isInternalEndAndReturn;\n\nvar isNode = function isNode(node) {\n  return isModule(node) || isModuleMetadata(node) || isModuleNameMetadata(node) || isFunctionNameMetadata(node) || isLocalNameMetadata(node) || isBinaryModule(node) || isQuoteModule(node) || isSectionMetadata(node) || isProducersSectionMetadata(node) || isProducerMetadata(node) || isProducerMetadataVersionedName(node) || isLoopInstruction(node) || isInstr(node) || isIfInstruction(node) || isStringLiteral(node) || isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node) || isElem(node) || isIndexInFuncSection(node) || isValtypeLiteral(node) || isTypeInstruction(node) || isStart(node) || isGlobalType(node) || isLeadingComment(node) || isBlockComment(node) || isData(node) || isGlobal(node) || isTable(node) || isMemory(node) || isFuncImportDescr(node) || isModuleImport(node) || isModuleExportDescr(node) || isModuleExport(node) || isLimit(node) || isSignature(node) || isProgram(node) || isIdentifier(node) || isBlockInstruction(node) || isCallInstruction(node) || isCallIndirectInstruction(node) || isByteArray(node) || isFunc(node) || isInternalBrUnless(node) || isInternalGoto(node) || isInternalCallExtern(node) || isInternalEndAndReturn(node);\n};\n\nexports.isNode = isNode;\n\nvar isBlock = function isBlock(node) {\n  return isLoopInstruction(node) || isBlockInstruction(node) || isFunc(node);\n};\n\nexports.isBlock = isBlock;\n\nvar isInstruction = function isInstruction(node) {\n  return isLoopInstruction(node) || isInstr(node) || isIfInstruction(node) || isTypeInstruction(node) || isBlockInstruction(node) || isCallInstruction(node) || isCallIndirectInstruction(node);\n};\n\nexports.isInstruction = isInstruction;\n\nvar isExpression = function isExpression(node) {\n  return isInstr(node) || isStringLiteral(node) || isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node) || isValtypeLiteral(node) || isIdentifier(node);\n};\n\nexports.isExpression = isExpression;\n\nvar isNumericLiteral = function isNumericLiteral(node) {\n  return isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node);\n};\n\nexports.isNumericLiteral = isNumericLiteral;\n\nvar isImportDescr = function isImportDescr(node) {\n  return isGlobalType(node) || isTable(node) || isMemory(node) || isFuncImportDescr(node);\n};\n\nexports.isImportDescr = isImportDescr;\n\nvar isIntrinsic = function isIntrinsic(node) {\n  return isInternalBrUnless(node) || isInternalGoto(node) || isInternalCallExtern(node) || isInternalEndAndReturn(node);\n};\n\nexports.isIntrinsic = isIntrinsic;\nvar assertModule = assertTypeOf(\"Module\");\nexports.assertModule = assertModule;\nvar assertModuleMetadata = assertTypeOf(\"ModuleMetadata\");\nexports.assertModuleMetadata = assertModuleMetadata;\nvar assertModuleNameMetadata = assertTypeOf(\"ModuleNameMetadata\");\nexports.assertModuleNameMetadata = assertModuleNameMetadata;\nvar assertFunctionNameMetadata = assertTypeOf(\"FunctionNameMetadata\");\nexports.assertFunctionNameMetadata = assertFunctionNameMetadata;\nvar assertLocalNameMetadata = assertTypeOf(\"LocalNameMetadata\");\nexports.assertLocalNameMetadata = assertLocalNameMetadata;\nvar assertBinaryModule = assertTypeOf(\"BinaryModule\");\nexports.assertBinaryModule = assertBinaryModule;\nvar assertQuoteModule = assertTypeOf(\"QuoteModule\");\nexports.assertQuoteModule = assertQuoteModule;\nvar assertSectionMetadata = assertTypeOf(\"SectionMetadata\");\nexports.assertSectionMetadata = assertSectionMetadata;\nvar assertProducersSectionMetadata = assertTypeOf(\"ProducersSectionMetadata\");\nexports.assertProducersSectionMetadata = assertProducersSectionMetadata;\nvar assertProducerMetadata = assertTypeOf(\"ProducerMetadata\");\nexports.assertProducerMetadata = assertProducerMetadata;\nvar assertProducerMetadataVersionedName = assertTypeOf(\"ProducerMetadataVersionedName\");\nexports.assertProducerMetadataVersionedName = assertProducerMetadataVersionedName;\nvar assertLoopInstruction = assertTypeOf(\"LoopInstruction\");\nexports.assertLoopInstruction = assertLoopInstruction;\nvar assertInstr = assertTypeOf(\"Instr\");\nexports.assertInstr = assertInstr;\nvar assertIfInstruction = assertTypeOf(\"IfInstruction\");\nexports.assertIfInstruction = assertIfInstruction;\nvar assertStringLiteral = assertTypeOf(\"StringLiteral\");\nexports.assertStringLiteral = assertStringLiteral;\nvar assertNumberLiteral = assertTypeOf(\"NumberLiteral\");\nexports.assertNumberLiteral = assertNumberLiteral;\nvar assertLongNumberLiteral = assertTypeOf(\"LongNumberLiteral\");\nexports.assertLongNumberLiteral = assertLongNumberLiteral;\nvar assertFloatLiteral = assertTypeOf(\"FloatLiteral\");\nexports.assertFloatLiteral = assertFloatLiteral;\nvar assertElem = assertTypeOf(\"Elem\");\nexports.assertElem = assertElem;\nvar assertIndexInFuncSection = assertTypeOf(\"IndexInFuncSection\");\nexports.assertIndexInFuncSection = assertIndexInFuncSection;\nvar assertValtypeLiteral = assertTypeOf(\"ValtypeLiteral\");\nexports.assertValtypeLiteral = assertValtypeLiteral;\nvar assertTypeInstruction = assertTypeOf(\"TypeInstruction\");\nexports.assertTypeInstruction = assertTypeInstruction;\nvar assertStart = assertTypeOf(\"Start\");\nexports.assertStart = assertStart;\nvar assertGlobalType = assertTypeOf(\"GlobalType\");\nexports.assertGlobalType = assertGlobalType;\nvar assertLeadingComment = assertTypeOf(\"LeadingComment\");\nexports.assertLeadingComment = assertLeadingComment;\nvar assertBlockComment = assertTypeOf(\"BlockComment\");\nexports.assertBlockComment = assertBlockComment;\nvar assertData = assertTypeOf(\"Data\");\nexports.assertData = assertData;\nvar assertGlobal = assertTypeOf(\"Global\");\nexports.assertGlobal = assertGlobal;\nvar assertTable = assertTypeOf(\"Table\");\nexports.assertTable = assertTable;\nvar assertMemory = assertTypeOf(\"Memory\");\nexports.assertMemory = assertMemory;\nvar assertFuncImportDescr = assertTypeOf(\"FuncImportDescr\");\nexports.assertFuncImportDescr = assertFuncImportDescr;\nvar assertModuleImport = assertTypeOf(\"ModuleImport\");\nexports.assertModuleImport = assertModuleImport;\nvar assertModuleExportDescr = assertTypeOf(\"ModuleExportDescr\");\nexports.assertModuleExportDescr = assertModuleExportDescr;\nvar assertModuleExport = assertTypeOf(\"ModuleExport\");\nexports.assertModuleExport = assertModuleExport;\nvar assertLimit = assertTypeOf(\"Limit\");\nexports.assertLimit = assertLimit;\nvar assertSignature = assertTypeOf(\"Signature\");\nexports.assertSignature = assertSignature;\nvar assertProgram = assertTypeOf(\"Program\");\nexports.assertProgram = assertProgram;\nvar assertIdentifier = assertTypeOf(\"Identifier\");\nexports.assertIdentifier = assertIdentifier;\nvar assertBlockInstruction = assertTypeOf(\"BlockInstruction\");\nexports.assertBlockInstruction = assertBlockInstruction;\nvar assertCallInstruction = assertTypeOf(\"CallInstruction\");\nexports.assertCallInstruction = assertCallInstruction;\nvar assertCallIndirectInstruction = assertTypeOf(\"CallIndirectInstruction\");\nexports.assertCallIndirectInstruction = assertCallIndirectInstruction;\nvar assertByteArray = assertTypeOf(\"ByteArray\");\nexports.assertByteArray = assertByteArray;\nvar assertFunc = assertTypeOf(\"Func\");\nexports.assertFunc = assertFunc;\nvar assertInternalBrUnless = assertTypeOf(\"InternalBrUnless\");\nexports.assertInternalBrUnless = assertInternalBrUnless;\nvar assertInternalGoto = assertTypeOf(\"InternalGoto\");\nexports.assertInternalGoto = assertInternalGoto;\nvar assertInternalCallExtern = assertTypeOf(\"InternalCallExtern\");\nexports.assertInternalCallExtern = assertInternalCallExtern;\nvar assertInternalEndAndReturn = assertTypeOf(\"InternalEndAndReturn\");\nexports.assertInternalEndAndReturn = assertInternalEndAndReturn;\nvar unionTypesMap = {\n  Module: [\"Node\"],\n  ModuleMetadata: [\"Node\"],\n  ModuleNameMetadata: [\"Node\"],\n  FunctionNameMetadata: [\"Node\"],\n  LocalNameMetadata: [\"Node\"],\n  BinaryModule: [\"Node\"],\n  QuoteModule: [\"Node\"],\n  SectionMetadata: [\"Node\"],\n  ProducersSectionMetadata: [\"Node\"],\n  ProducerMetadata: [\"Node\"],\n  ProducerMetadataVersionedName: [\"Node\"],\n  LoopInstruction: [\"Node\", \"Block\", \"Instruction\"],\n  Instr: [\"Node\", \"Expression\", \"Instruction\"],\n  IfInstruction: [\"Node\", \"Instruction\"],\n  StringLiteral: [\"Node\", \"Expression\"],\n  NumberLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  LongNumberLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  FloatLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  Elem: [\"Node\"],\n  IndexInFuncSection: [\"Node\"],\n  ValtypeLiteral: [\"Node\", \"Expression\"],\n  TypeInstruction: [\"Node\", \"Instruction\"],\n  Start: [\"Node\"],\n  GlobalType: [\"Node\", \"ImportDescr\"],\n  LeadingComment: [\"Node\"],\n  BlockComment: [\"Node\"],\n  Data: [\"Node\"],\n  Global: [\"Node\"],\n  Table: [\"Node\", \"ImportDescr\"],\n  Memory: [\"Node\", \"ImportDescr\"],\n  FuncImportDescr: [\"Node\", \"ImportDescr\"],\n  ModuleImport: [\"Node\"],\n  ModuleExportDescr: [\"Node\"],\n  ModuleExport: [\"Node\"],\n  Limit: [\"Node\"],\n  Signature: [\"Node\"],\n  Program: [\"Node\"],\n  Identifier: [\"Node\", \"Expression\"],\n  BlockInstruction: [\"Node\", \"Block\", \"Instruction\"],\n  CallInstruction: [\"Node\", \"Instruction\"],\n  CallIndirectInstruction: [\"Node\", \"Instruction\"],\n  ByteArray: [\"Node\"],\n  Func: [\"Node\", \"Block\"],\n  InternalBrUnless: [\"Node\", \"Intrinsic\"],\n  InternalGoto: [\"Node\", \"Intrinsic\"],\n  InternalCallExtern: [\"Node\", \"Intrinsic\"],\n  InternalEndAndReturn: [\"Node\", \"Intrinsic\"]\n};\nexports.unionTypesMap = unionTypesMap;\nvar nodeAndUnionTypes = [\"Module\", \"ModuleMetadata\", \"ModuleNameMetadata\", \"FunctionNameMetadata\", \"LocalNameMetadata\", \"BinaryModule\", \"QuoteModule\", \"SectionMetadata\", \"ProducersSectionMetadata\", \"ProducerMetadata\", \"ProducerMetadataVersionedName\", \"LoopInstruction\", \"Instr\", \"IfInstruction\", \"StringLiteral\", \"NumberLiteral\", \"LongNumberLiteral\", \"FloatLiteral\", \"Elem\", \"IndexInFuncSection\", \"ValtypeLiteral\", \"TypeInstruction\", \"Start\", \"GlobalType\", \"LeadingComment\", \"BlockComment\", \"Data\", \"Global\", \"Table\", \"Memory\", \"FuncImportDescr\", \"ModuleImport\", \"ModuleExportDescr\", \"ModuleExport\", \"Limit\", \"Signature\", \"Program\", \"Identifier\", \"BlockInstruction\", \"CallInstruction\", \"CallIndirectInstruction\", \"ByteArray\", \"Func\", \"InternalBrUnless\", \"InternalGoto\", \"InternalCallExtern\", \"InternalEndAndReturn\", \"Node\", \"Block\", \"Instruction\", \"Expression\", \"NumericLiteral\", \"ImportDescr\", \"Intrinsic\"];\nexports.nodeAndUnionTypes = nodeAndUnionTypes;"]},"metadata":{},"sourceType":"script"}