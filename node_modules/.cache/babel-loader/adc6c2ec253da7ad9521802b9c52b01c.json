{"ast":null,"code":"var _jsxFileName = \"/Users/zachjohnson/Desktop/React-Wordle-lesson-16/src/components/AIAssistance.js\";\nimport React from 'react'; // import Stack from '@mui/material/Stack';\n\nimport Button from '@mui/material/Button';\nimport OpenAI from 'openai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst openai = new OpenAI({\n  apiKey: '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',\n  dangerouslyAllowBrowser: true // This is also the default, can be omitted\n\n});\nexport default function AIAssistance(_ref) {\n  let {\n    solution,\n    guesses,\n    turn\n  } = _ref;\n  let show = false;\n  let res = '';\n  let mostRecent = guesses[turn - 1].map((l, i) => {\n    return l.key;\n  }).join('');\n\n  const chatCompletion = async () => {\n    let response = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [{\n        \"role\": \"user\",\n        \"content\": `we are playing a game where I have to guess a 5 letter secret word. You know the word, but I do not. I need your help in giving me hints about the secret word without actually revealing the word itself. You will help me by relating the most previous word that I just guessed with the secret word. Again, you will not reveal the word. For example, if my most recent guess was spoon, and the word is pasta, you would give a hint such as \\\"your guess spoon relates to the hidden word in that they both pertain to food. the difference is that spoon is a possible vessel in which you can eat the secret word with.\\\" for this scenario, my most recent guess was ${mostRecent}, and the secret word is ${solution}. please give me a hint, using the instructions I just gave, without revealing the secret word ${solution}. It is incredibly important that you response does not include the word ${solution}!`\n      }],\n      temperature: 0.2,\n      max_tokens: 1000,\n      frequency_penalty: 0.0\n    });\n    console.log();\n    return response['choices'][0]['message']['content'];\n  };\n\n  const getResponse = async () => {\n    res = await chatCompletion();\n    show = true;\n    console.log(res);\n    console.log(show);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: getResponse,\n      children: \"Click me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), show && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: res\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_c = AIAssistance;\n\nvar _c;\n\n$RefreshReg$(_c, \"AIAssistance\");","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/React-Wordle-lesson-16/src/components/AIAssistance.js"],"names":["React","Button","OpenAI","openai","apiKey","dangerouslyAllowBrowser","AIAssistance","solution","guesses","turn","show","res","mostRecent","map","l","i","key","join","chatCompletion","response","chat","completions","create","model","messages","temperature","max_tokens","frequency_penalty","console","log","getResponse"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,MAAM,GAAG,IAAID,MAAJ,CAAW;AACxBE,EAAAA,MAAM,EAAE,qDADgB;AAExBC,EAAAA,uBAAuB,EAAE,IAFD,CAEM;;AAFN,CAAX,CAAf;AAKA,eAAe,SAASC,YAAT,OAAiD;AAAA,MAA3B;AAACC,IAAAA,QAAD;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,GAA2B;AAC5D,MAAIC,IAAI,GAAG,KAAX;AACA,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,UAAU,GAAGJ,OAAO,CAACC,IAAI,GAAC,CAAN,CAAP,CAAgBI,GAAhB,CAAoB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC3C,WAAOD,CAAC,CAACE,GAAT;AACH,GAFgB,EAEdC,IAFc,CAET,EAFS,CAAjB;;AAGA,QAAMC,cAAc,GAAG,YAAW;AAC9B,QAAIC,QAAQ,GAAG,MAAMhB,MAAM,CAACiB,IAAP,CAAYC,WAAZ,CAAwBC,MAAxB,CAA+B;AAChDC,MAAAA,KAAK,EAAE,eADyC;AAEhDC,MAAAA,QAAQ,EAAE,CAAC;AAAC,gBAAQ,MAAT;AAAiB,mBAAY,kpBAAipBZ,UAAW,4BAA2BL,QAAS,kGAAiGA,QAAS,4EAA2EA,QAAS;AAA35B,OAAD,CAFsC;AAGhDkB,MAAAA,WAAW,EAAE,GAHmC;AAIhDC,MAAAA,UAAU,EAAE,IAJoC;AAKhDC,MAAAA,iBAAiB,EAAE;AAL6B,KAA/B,CAArB;AAOAC,IAAAA,OAAO,CAACC,GAAR;AACA,WAAOV,QAAQ,CAAC,SAAD,CAAR,CAAoB,CAApB,EAAuB,SAAvB,EAAkC,SAAlC,CAAP;AACH,GAVD;;AAWA,QAAMW,WAAW,GAAG,YAAW;AAC3BnB,IAAAA,GAAG,GAAG,MAAMO,cAAc,EAA1B;AACAR,IAAAA,IAAI,GAAG,IAAP;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAYlB,GAAZ;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAYnB,IAAZ;AACH,GALD;;AAMF,sBACE;AAAA,4BACI,QAAC,MAAD;AACI,MAAA,OAAO,EAAEoB,WADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAMKpB,IAAI,iBAAI;AAAA,gBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,YANb;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;KAjCuBL,Y","sourcesContent":["import React from 'react'\n// import Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: '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',\n  dangerouslyAllowBrowser: true // This is also the default, can be omitted\n});\n\nexport default function AIAssistance({solution, guesses, turn}) {\n    let show = false;\n    let res = '';\n    let mostRecent = guesses[turn-1].map((l, i) => {\n        return l.key\n    }).join('')\n    const chatCompletion = async() => {\n        let response = await openai.chat.completions.create({\n            model: \"gpt-3.5-turbo\",\n            messages: [{\"role\": \"user\", \"content\": `we are playing a game where I have to guess a 5 letter secret word. You know the word, but I do not. I need your help in giving me hints about the secret word without actually revealing the word itself. You will help me by relating the most previous word that I just guessed with the secret word. Again, you will not reveal the word. For example, if my most recent guess was spoon, and the word is pasta, you would give a hint such as \\\"your guess spoon relates to the hidden word in that they both pertain to food. the difference is that spoon is a possible vessel in which you can eat the secret word with.\\\" for this scenario, my most recent guess was ${mostRecent}, and the secret word is ${solution}. please give me a hint, using the instructions I just gave, without revealing the secret word ${solution}. It is incredibly important that you response does not include the word ${solution}!`}],\n            temperature: 0.2,\n            max_tokens: 1000,\n            frequency_penalty: 0.0\n        });\n        console.log()\n        return response['choices'][0]['message']['content']\n    }\n    const getResponse = async() => {\n        res = await chatCompletion();\n        show = true;\n        console.log(res)\n        console.log(show)\n    }\n  return (\n    <div>\n        <Button\n            onClick={getResponse}\n            >\n            Click me\n        </Button>\n        {show && <p>{res}</p>}\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}