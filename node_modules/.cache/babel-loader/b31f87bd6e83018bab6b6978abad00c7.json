{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { multipartFormRequestOptions } from 'openai/core';\nexport class Translations extends APIResource {\n  /**\n   * Translates audio into English.\n   */\n  create(body, options) {\n    return this.post('/audio/translations', multipartFormRequestOptions({\n      body,\n      ...options\n    }));\n  }\n\n}\n\n(function (Translations) {})(Translations || (Translations = {}));","map":{"version":3,"mappings":"AAAA;SAGSA,mBAAmB;SAEFC,mCAAmC;AAE7D,OAAM,MAAOC,YAAP,SAA4BF,WAA5B,CAAuC;AAC3C;;;AAGAG,QAAM,CAACC,IAAD,EAAgCC,OAAhC,EAA6D;AACjE,WAAO,KAAKC,IAAL,CAAU,qBAAV,EAAiCL,2BAA2B,CAAC;AAAEG,UAAF;AAAQ,SAAGC;AAAX,KAAD,CAA5D,CAAP;AACD;;AAN0C;;AAiD7C,WAAiBH,YAAjB,EAA6B,CAG5B,CAHD,EAAiBA,YAAY,KAAZA,YAAY,MAA7B","names":["APIResource","multipartFormRequestOptions","Translations","create","body","options","post"],"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/openai/src/resources/audio/translations.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../core\";\nimport { APIResource } from \"../../resource\";\nimport * as TranslationsAPI from \"./translations\";\nimport { type Uploadable, multipartFormRequestOptions } from \"../../core\";\n\nexport class Translations extends APIResource {\n  /**\n   * Translates audio into English.\n   */\n  create(body: TranslationCreateParams, options?: Core.RequestOptions): Core.APIPromise<Translation> {\n    return this.post('/audio/translations', multipartFormRequestOptions({ body, ...options }));\n  }\n}\n\nexport interface Translation {\n  text: string;\n}\n\nexport interface TranslationCreateParams {\n  /**\n   * The audio file object (not file name) translate, in one of these formats: flac,\n   * mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n   */\n  file: Uploadable;\n\n  /**\n   * ID of the model to use. Only `whisper-1` is currently available.\n   */\n  model: (string & {}) | 'whisper-1';\n\n  /**\n   * An optional text to guide the model's style or continue a previous audio\n   * segment. The\n   * [prompt](https://platform.openai.com/docs/guides/speech-to-text/prompting)\n   * should be in English.\n   */\n  prompt?: string;\n\n  /**\n   * The format of the transcript output, in one of these options: `json`, `text`,\n   * `srt`, `verbose_json`, or `vtt`.\n   */\n  response_format?: string;\n\n  /**\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n   * output more random, while lower values like 0.2 will make it more focused and\n   * deterministic. If set to 0, the model will use\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n   * automatically increase the temperature until certain thresholds are hit.\n   */\n  temperature?: number;\n}\n\nexport namespace Translations {\n  export import Translation = TranslationsAPI.Translation;\n  export import TranslationCreateParams = TranslationsAPI.TranslationCreateParams;\n}\n"]},"metadata":{},"sourceType":"module"}