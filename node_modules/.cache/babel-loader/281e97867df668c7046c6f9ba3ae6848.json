{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\"use strict\";\n\nconst {\n  JAVASCRIPT_MODULE_TYPE_AUTO,\n  JAVASCRIPT_MODULE_TYPE_DYNAMIC,\n  JAVASCRIPT_MODULE_TYPE_ESM\n} = require(\"./ModuleTypeConstants\");\n\nconst InnerGraph = require(\"./optimize/InnerGraph\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/** @typedef {import(\"./Module\").BuildInfo} BuildInfo */\n\n/** @typedef {import(\"./javascript/JavascriptParser\")} JavascriptParser */\n\n\nconst PLUGIN_NAME = \"JavascriptMetaInfoPlugin\";\n\nclass JavascriptMetaInfoPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n\n      /**\n       * @param {JavascriptParser} parser the parser\n       * @returns {void}\n       */\n      const handler = parser => {\n        parser.hooks.call.for(\"eval\").tap(PLUGIN_NAME, () => {\n          const buildInfo =\n          /** @type {BuildInfo} */\n          parser.state.module.buildInfo;\n          buildInfo.moduleConcatenationBailout = \"eval()\";\n          buildInfo.usingEval = true;\n          const currentSymbol = InnerGraph.getTopLevelSymbol(parser.state);\n\n          if (currentSymbol) {\n            InnerGraph.addUsage(parser.state, null, currentSymbol);\n          } else {\n            InnerGraph.bailout(parser.state);\n          }\n        });\n        parser.hooks.finish.tap(PLUGIN_NAME, () => {\n          const buildInfo =\n          /** @type {BuildInfo} */\n          parser.state.module.buildInfo;\n          let topLevelDeclarations = buildInfo.topLevelDeclarations;\n\n          if (topLevelDeclarations === undefined) {\n            topLevelDeclarations = buildInfo.topLevelDeclarations = new Set();\n          }\n\n          for (const name of parser.scope.definitions.asSet()) {\n            const freeInfo = parser.getFreeInfoFromVariable(name);\n\n            if (freeInfo === undefined) {\n              topLevelDeclarations.add(name);\n            }\n          }\n        });\n      };\n\n      normalModuleFactory.hooks.parser.for(JAVASCRIPT_MODULE_TYPE_AUTO).tap(PLUGIN_NAME, handler);\n      normalModuleFactory.hooks.parser.for(JAVASCRIPT_MODULE_TYPE_DYNAMIC).tap(PLUGIN_NAME, handler);\n      normalModuleFactory.hooks.parser.for(JAVASCRIPT_MODULE_TYPE_ESM).tap(PLUGIN_NAME, handler);\n    });\n  }\n\n}\n\nmodule.exports = JavascriptMetaInfoPlugin;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/JavascriptMetaInfoPlugin.js"],"names":["JAVASCRIPT_MODULE_TYPE_AUTO","JAVASCRIPT_MODULE_TYPE_DYNAMIC","JAVASCRIPT_MODULE_TYPE_ESM","require","InnerGraph","PLUGIN_NAME","JavascriptMetaInfoPlugin","apply","compiler","hooks","compilation","tap","normalModuleFactory","handler","parser","call","for","buildInfo","state","module","moduleConcatenationBailout","usingEval","currentSymbol","getTopLevelSymbol","addUsage","bailout","finish","topLevelDeclarations","undefined","Set","name","scope","definitions","asSet","freeInfo","getFreeInfoFromVariable","add","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AACLA,EAAAA,2BADK;AAELC,EAAAA,8BAFK;AAGLC,EAAAA;AAHK,IAIFC,OAAO,CAAC,uBAAD,CAJX;;AAKA,MAAMC,UAAU,GAAGD,OAAO,CAAC,uBAAD,CAA1B;AAEA;;AACA;;AACA;;;AAEA,MAAME,WAAW,GAAG,0BAApB;;AAEA,MAAMC,wBAAN,CAA+B;AAC9B;AACD;AACA;AACA;AACA;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACCN,WADD,EAEC,CAACK,WAAD,WAA0C;AAAA,UAA5B;AAAEE,QAAAA;AAAF,OAA4B;;AACzC;AACJ;AACA;AACA;AACI,YAAMC,OAAO,GAAGC,MAAM,IAAI;AACzBA,QAAAA,MAAM,CAACL,KAAP,CAAaM,IAAb,CAAkBC,GAAlB,CAAsB,MAAtB,EAA8BL,GAA9B,CAAkCN,WAAlC,EAA+C,MAAM;AACpD,gBAAMY,SAAS;AACd;AACCH,UAAAA,MAAM,CAACI,KAAP,CAAaC,MAAb,CAAoBF,SAFtB;AAGAA,UAAAA,SAAS,CAACG,0BAAV,GAAuC,QAAvC;AACAH,UAAAA,SAAS,CAACI,SAAV,GAAsB,IAAtB;AACA,gBAAMC,aAAa,GAAGlB,UAAU,CAACmB,iBAAX,CAA6BT,MAAM,CAACI,KAApC,CAAtB;;AACA,cAAII,aAAJ,EAAmB;AAClBlB,YAAAA,UAAU,CAACoB,QAAX,CAAoBV,MAAM,CAACI,KAA3B,EAAkC,IAAlC,EAAwCI,aAAxC;AACA,WAFD,MAEO;AACNlB,YAAAA,UAAU,CAACqB,OAAX,CAAmBX,MAAM,CAACI,KAA1B;AACA;AACD,SAZD;AAaAJ,QAAAA,MAAM,CAACL,KAAP,CAAaiB,MAAb,CAAoBf,GAApB,CAAwBN,WAAxB,EAAqC,MAAM;AAC1C,gBAAMY,SAAS;AACd;AACCH,UAAAA,MAAM,CAACI,KAAP,CAAaC,MAAb,CAAoBF,SAFtB;AAGA,cAAIU,oBAAoB,GAAGV,SAAS,CAACU,oBAArC;;AACA,cAAIA,oBAAoB,KAAKC,SAA7B,EAAwC;AACvCD,YAAAA,oBAAoB,GAAGV,SAAS,CAACU,oBAAV,GAAiC,IAAIE,GAAJ,EAAxD;AACA;;AACD,eAAK,MAAMC,IAAX,IAAmBhB,MAAM,CAACiB,KAAP,CAAaC,WAAb,CAAyBC,KAAzB,EAAnB,EAAqD;AACpD,kBAAMC,QAAQ,GAAGpB,MAAM,CAACqB,uBAAP,CAA+BL,IAA/B,CAAjB;;AACA,gBAAII,QAAQ,KAAKN,SAAjB,EAA4B;AAC3BD,cAAAA,oBAAoB,CAACS,GAArB,CAAyBN,IAAzB;AACA;AACD;AACD,SAdD;AAeA,OA7BD;;AA+BAlB,MAAAA,mBAAmB,CAACH,KAApB,CAA0BK,MAA1B,CACEE,GADF,CACMhB,2BADN,EAEEW,GAFF,CAEMN,WAFN,EAEmBQ,OAFnB;AAGAD,MAAAA,mBAAmB,CAACH,KAApB,CAA0BK,MAA1B,CACEE,GADF,CACMf,8BADN,EAEEU,GAFF,CAEMN,WAFN,EAEmBQ,OAFnB;AAGAD,MAAAA,mBAAmB,CAACH,KAApB,CAA0BK,MAA1B,CACEE,GADF,CACMd,0BADN,EAEES,GAFF,CAEMN,WAFN,EAEmBQ,OAFnB;AAGA,KA/CF;AAiDA;;AAxD6B;;AA2D/BM,MAAM,CAACkB,OAAP,GAAiB/B,wBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst {\n\tJAVASCRIPT_MODULE_TYPE_AUTO,\n\tJAVASCRIPT_MODULE_TYPE_DYNAMIC,\n\tJAVASCRIPT_MODULE_TYPE_ESM\n} = require(\"./ModuleTypeConstants\");\nconst InnerGraph = require(\"./optimize/InnerGraph\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./Module\").BuildInfo} BuildInfo */\n/** @typedef {import(\"./javascript/JavascriptParser\")} JavascriptParser */\n\nconst PLUGIN_NAME = \"JavascriptMetaInfoPlugin\";\n\nclass JavascriptMetaInfoPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\tPLUGIN_NAME,\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\t/**\n\t\t\t\t * @param {JavascriptParser} parser the parser\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\tconst handler = parser => {\n\t\t\t\t\tparser.hooks.call.for(\"eval\").tap(PLUGIN_NAME, () => {\n\t\t\t\t\t\tconst buildInfo =\n\t\t\t\t\t\t\t/** @type {BuildInfo} */\n\t\t\t\t\t\t\t(parser.state.module.buildInfo);\n\t\t\t\t\t\tbuildInfo.moduleConcatenationBailout = \"eval()\";\n\t\t\t\t\t\tbuildInfo.usingEval = true;\n\t\t\t\t\t\tconst currentSymbol = InnerGraph.getTopLevelSymbol(parser.state);\n\t\t\t\t\t\tif (currentSymbol) {\n\t\t\t\t\t\t\tInnerGraph.addUsage(parser.state, null, currentSymbol);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tInnerGraph.bailout(parser.state);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.finish.tap(PLUGIN_NAME, () => {\n\t\t\t\t\t\tconst buildInfo =\n\t\t\t\t\t\t\t/** @type {BuildInfo} */\n\t\t\t\t\t\t\t(parser.state.module.buildInfo);\n\t\t\t\t\t\tlet topLevelDeclarations = buildInfo.topLevelDeclarations;\n\t\t\t\t\t\tif (topLevelDeclarations === undefined) {\n\t\t\t\t\t\t\ttopLevelDeclarations = buildInfo.topLevelDeclarations = new Set();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (const name of parser.scope.definitions.asSet()) {\n\t\t\t\t\t\t\tconst freeInfo = parser.getFreeInfoFromVariable(name);\n\t\t\t\t\t\t\tif (freeInfo === undefined) {\n\t\t\t\t\t\t\t\ttopLevelDeclarations.add(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(JAVASCRIPT_MODULE_TYPE_AUTO)\n\t\t\t\t\t.tap(PLUGIN_NAME, handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(JAVASCRIPT_MODULE_TYPE_DYNAMIC)\n\t\t\t\t\t.tap(PLUGIN_NAME, handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(JAVASCRIPT_MODULE_TYPE_ESM)\n\t\t\t\t\t.tap(PLUGIN_NAME, handler);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = JavascriptMetaInfoPlugin;\n"]},"metadata":{},"sourceType":"script"}