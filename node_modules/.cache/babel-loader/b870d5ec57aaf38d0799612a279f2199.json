{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.overrideBytesInBuffer = overrideBytesInBuffer;\nexports.makeBuffer = makeBuffer;\nexports.fromHexdump = fromHexdump;\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction concatUint8Arrays() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n\n  var totalLength = arrays.reduce(function (a, b) {\n    return a + b.length;\n  }, 0);\n  var result = new Uint8Array(totalLength);\n  var offset = 0;\n\n  for (var _i = 0, _arrays = arrays; _i < _arrays.length; _i++) {\n    var arr = _arrays[_i];\n\n    if (arr instanceof Uint8Array === false) {\n      throw new Error(\"arr must be of type Uint8Array\");\n    }\n\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n\n  return result;\n}\n\nfunction overrideBytesInBuffer(buffer, startLoc, endLoc, newBytes) {\n  var beforeBytes = buffer.slice(0, startLoc);\n  var afterBytes = buffer.slice(endLoc, buffer.length); // replacement is empty, we can omit it\n\n  if (newBytes.length === 0) {\n    return concatUint8Arrays(beforeBytes, afterBytes);\n  }\n\n  var replacement = Uint8Array.from(newBytes);\n  return concatUint8Arrays(beforeBytes, replacement, afterBytes);\n}\n\nfunction makeBuffer() {\n  for (var _len2 = arguments.length, splitedBytes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    splitedBytes[_key2] = arguments[_key2];\n  } // $FlowIgnore\n\n\n  var bytes = [].concat.apply([], splitedBytes);\n  return new Uint8Array(bytes).buffer;\n}\n\nfunction fromHexdump(str) {\n  var lines = str.split(\"\\n\"); // remove any leading left whitespace\n\n  lines = lines.map(function (line) {\n    return line.trim();\n  });\n  var bytes = lines.reduce(function (acc, line) {\n    var cols = line.split(\" \"); // remove the offset, left column\n\n    cols.shift();\n    cols = cols.filter(function (x) {\n      return x !== \"\";\n    });\n    var bytes = cols.map(function (x) {\n      return parseInt(x, 16);\n    });\n    acc.push.apply(acc, _toConsumableArray(bytes));\n    return acc;\n  }, []);\n  return Buffer.from(bytes);\n}","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/@webassemblyjs/helper-buffer/lib/index.js"],"names":["Object","defineProperty","exports","value","overrideBytesInBuffer","makeBuffer","fromHexdump","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","concatUint8Arrays","_len","arguments","arrays","_key","totalLength","reduce","a","b","result","Uint8Array","offset","_i","_arrays","Error","set","buffer","startLoc","endLoc","newBytes","beforeBytes","afterBytes","replacement","_len2","splitedBytes","_key2","bytes","concat","apply","str","lines","split","map","line","trim","acc","cols","shift","filter","x","parseInt","push","Buffer"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC;AACAF,OAAO,CAACG,UAAR,GAAqBA,UAArB;AACAH,OAAO,CAACI,WAAR,GAAsBA,WAAtB;;AAEA,SAASC,kBAAT,CAA4BC,GAA5B,EAAiC;AAAE,SAAOC,kBAAkB,CAACD,GAAD,CAAlB,IAA2BE,gBAAgB,CAACF,GAAD,CAA3C,IAAoDG,2BAA2B,CAACH,GAAD,CAA/E,IAAwFI,kBAAkB,EAAjH;AAAsH;;AAEzJ,SAASA,kBAAT,GAA8B;AAAE,QAAM,IAAIC,SAAJ,CAAc,sIAAd,CAAN;AAA8J;;AAE9L,SAASF,2BAAT,CAAqCG,CAArC,EAAwCC,MAAxC,EAAgD;AAAE,MAAI,CAACD,CAAL,EAAQ;AAAQ,MAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B,OAAOE,iBAAiB,CAACF,CAAD,EAAIC,MAAJ,CAAxB;AAAqC,MAAIE,CAAC,GAAGjB,MAAM,CAACkB,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,CAA/B,EAAkCO,KAAlC,CAAwC,CAAxC,EAA2C,CAAC,CAA5C,CAAR;AAAwD,MAAIJ,CAAC,KAAK,QAAN,IAAkBH,CAAC,CAACQ,WAAxB,EAAqCL,CAAC,GAAGH,CAAC,CAACQ,WAAF,CAAcC,IAAlB;AAAwB,MAAIN,CAAC,KAAK,KAAN,IAAeA,CAAC,KAAK,KAAzB,EAAgC,OAAOO,KAAK,CAACC,IAAN,CAAWX,CAAX,CAAP;AAAsB,MAAIG,CAAC,KAAK,WAAN,IAAqB,2CAA2CS,IAA3C,CAAgDT,CAAhD,CAAzB,EAA6E,OAAOD,iBAAiB,CAACF,CAAD,EAAIC,MAAJ,CAAxB;AAAsC;;AAEha,SAASL,gBAAT,CAA0BiB,IAA1B,EAAgC;AAAE,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCD,IAAI,CAACC,MAAM,CAACC,QAAR,CAAJ,IAAyB,IAA1D,IAAkEF,IAAI,CAAC,YAAD,CAAJ,IAAsB,IAA5F,EAAkG,OAAOH,KAAK,CAACC,IAAN,CAAWE,IAAX,CAAP;AAA0B;;AAE9J,SAASlB,kBAAT,CAA4BD,GAA5B,EAAiC;AAAE,MAAIgB,KAAK,CAACM,OAAN,CAActB,GAAd,CAAJ,EAAwB,OAAOQ,iBAAiB,CAACR,GAAD,CAAxB;AAAgC;;AAE3F,SAASQ,iBAAT,CAA2BR,GAA3B,EAAgCuB,GAAhC,EAAqC;AAAE,MAAIA,GAAG,IAAI,IAAP,IAAeA,GAAG,GAAGvB,GAAG,CAACwB,MAA7B,EAAqCD,GAAG,GAAGvB,GAAG,CAACwB,MAAV;;AAAkB,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAG,IAAIV,KAAJ,CAAUO,GAAV,CAAvB,EAAuCE,CAAC,GAAGF,GAA3C,EAAgDE,CAAC,EAAjD,EAAqD;AAAEC,IAAAA,IAAI,CAACD,CAAD,CAAJ,GAAUzB,GAAG,CAACyB,CAAD,CAAb;AAAmB;;AAAC,SAAOC,IAAP;AAAc;;AAEvL,SAASC,iBAAT,GAA6B;AAC3B,OAAK,IAAIC,IAAI,GAAGC,SAAS,CAACL,MAArB,EAA6BM,MAAM,GAAG,IAAId,KAAJ,CAAUY,IAAV,CAAtC,EAAuDG,IAAI,GAAG,CAAnE,EAAsEA,IAAI,GAAGH,IAA7E,EAAmFG,IAAI,EAAvF,EAA2F;AACzFD,IAAAA,MAAM,CAACC,IAAD,CAAN,GAAeF,SAAS,CAACE,IAAD,CAAxB;AACD;;AAED,MAAIC,WAAW,GAAGF,MAAM,CAACG,MAAP,CAAc,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC9C,WAAOD,CAAC,GAAGC,CAAC,CAACX,MAAb;AACD,GAFiB,EAEf,CAFe,CAAlB;AAGA,MAAIY,MAAM,GAAG,IAAIC,UAAJ,CAAeL,WAAf,CAAb;AACA,MAAIM,MAAM,GAAG,CAAb;;AAEA,OAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,OAAO,GAAGV,MAA3B,EAAmCS,EAAE,GAAGC,OAAO,CAAChB,MAAhD,EAAwDe,EAAE,EAA1D,EAA8D;AAC5D,QAAIvC,GAAG,GAAGwC,OAAO,CAACD,EAAD,CAAjB;;AAEA,QAAIvC,GAAG,YAAYqC,UAAf,KAA8B,KAAlC,EAAyC;AACvC,YAAM,IAAII,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAEDL,IAAAA,MAAM,CAACM,GAAP,CAAW1C,GAAX,EAAgBsC,MAAhB;AACAA,IAAAA,MAAM,IAAItC,GAAG,CAACwB,MAAd;AACD;;AAED,SAAOY,MAAP;AACD;;AAED,SAASxC,qBAAT,CAA+B+C,MAA/B,EAAuCC,QAAvC,EAAiDC,MAAjD,EAAyDC,QAAzD,EAAmE;AACjE,MAAIC,WAAW,GAAGJ,MAAM,CAAC9B,KAAP,CAAa,CAAb,EAAgB+B,QAAhB,CAAlB;AACA,MAAII,UAAU,GAAGL,MAAM,CAAC9B,KAAP,CAAagC,MAAb,EAAqBF,MAAM,CAACnB,MAA5B,CAAjB,CAFiE,CAEX;;AAEtD,MAAIsB,QAAQ,CAACtB,MAAT,KAAoB,CAAxB,EAA2B;AACzB,WAAOG,iBAAiB,CAACoB,WAAD,EAAcC,UAAd,CAAxB;AACD;;AAED,MAAIC,WAAW,GAAGZ,UAAU,CAACpB,IAAX,CAAgB6B,QAAhB,CAAlB;AACA,SAAOnB,iBAAiB,CAACoB,WAAD,EAAcE,WAAd,EAA2BD,UAA3B,CAAxB;AACD;;AAED,SAASnD,UAAT,GAAsB;AACpB,OAAK,IAAIqD,KAAK,GAAGrB,SAAS,CAACL,MAAtB,EAA8B2B,YAAY,GAAG,IAAInC,KAAJ,CAAUkC,KAAV,CAA7C,EAA+DE,KAAK,GAAG,CAA5E,EAA+EA,KAAK,GAAGF,KAAvF,EAA8FE,KAAK,EAAnG,EAAuG;AACrGD,IAAAA,YAAY,CAACC,KAAD,CAAZ,GAAsBvB,SAAS,CAACuB,KAAD,CAA/B;AACD,GAHmB,CAKpB;;;AACA,MAAIC,KAAK,GAAG,GAAGC,MAAH,CAAUC,KAAV,CAAgB,EAAhB,EAAoBJ,YAApB,CAAZ;AACA,SAAO,IAAId,UAAJ,CAAegB,KAAf,EAAsBV,MAA7B;AACD;;AAED,SAAS7C,WAAT,CAAqB0D,GAArB,EAA0B;AACxB,MAAIC,KAAK,GAAGD,GAAG,CAACE,KAAJ,CAAU,IAAV,CAAZ,CADwB,CACK;;AAE7BD,EAAAA,KAAK,GAAGA,KAAK,CAACE,GAAN,CAAU,UAAUC,IAAV,EAAgB;AAChC,WAAOA,IAAI,CAACC,IAAL,EAAP;AACD,GAFO,CAAR;AAGA,MAAIR,KAAK,GAAGI,KAAK,CAACxB,MAAN,CAAa,UAAU6B,GAAV,EAAeF,IAAf,EAAqB;AAC5C,QAAIG,IAAI,GAAGH,IAAI,CAACF,KAAL,CAAW,GAAX,CAAX,CAD4C,CAChB;;AAE5BK,IAAAA,IAAI,CAACC,KAAL;AACAD,IAAAA,IAAI,GAAGA,IAAI,CAACE,MAAL,CAAY,UAAUC,CAAV,EAAa;AAC9B,aAAOA,CAAC,KAAK,EAAb;AACD,KAFM,CAAP;AAGA,QAAIb,KAAK,GAAGU,IAAI,CAACJ,GAAL,CAAS,UAAUO,CAAV,EAAa;AAChC,aAAOC,QAAQ,CAACD,CAAD,EAAI,EAAJ,CAAf;AACD,KAFW,CAAZ;AAGAJ,IAAAA,GAAG,CAACM,IAAJ,CAASb,KAAT,CAAeO,GAAf,EAAoB/D,kBAAkB,CAACsD,KAAD,CAAtC;AACA,WAAOS,GAAP;AACD,GAZW,EAYT,EAZS,CAAZ;AAaA,SAAOO,MAAM,CAACpD,IAAP,CAAYoC,KAAZ,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.overrideBytesInBuffer = overrideBytesInBuffer;\nexports.makeBuffer = makeBuffer;\nexports.fromHexdump = fromHexdump;\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction concatUint8Arrays() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n\n  var totalLength = arrays.reduce(function (a, b) {\n    return a + b.length;\n  }, 0);\n  var result = new Uint8Array(totalLength);\n  var offset = 0;\n\n  for (var _i = 0, _arrays = arrays; _i < _arrays.length; _i++) {\n    var arr = _arrays[_i];\n\n    if (arr instanceof Uint8Array === false) {\n      throw new Error(\"arr must be of type Uint8Array\");\n    }\n\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n\n  return result;\n}\n\nfunction overrideBytesInBuffer(buffer, startLoc, endLoc, newBytes) {\n  var beforeBytes = buffer.slice(0, startLoc);\n  var afterBytes = buffer.slice(endLoc, buffer.length); // replacement is empty, we can omit it\n\n  if (newBytes.length === 0) {\n    return concatUint8Arrays(beforeBytes, afterBytes);\n  }\n\n  var replacement = Uint8Array.from(newBytes);\n  return concatUint8Arrays(beforeBytes, replacement, afterBytes);\n}\n\nfunction makeBuffer() {\n  for (var _len2 = arguments.length, splitedBytes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    splitedBytes[_key2] = arguments[_key2];\n  }\n\n  // $FlowIgnore\n  var bytes = [].concat.apply([], splitedBytes);\n  return new Uint8Array(bytes).buffer;\n}\n\nfunction fromHexdump(str) {\n  var lines = str.split(\"\\n\"); // remove any leading left whitespace\n\n  lines = lines.map(function (line) {\n    return line.trim();\n  });\n  var bytes = lines.reduce(function (acc, line) {\n    var cols = line.split(\" \"); // remove the offset, left column\n\n    cols.shift();\n    cols = cols.filter(function (x) {\n      return x !== \"\";\n    });\n    var bytes = cols.map(function (x) {\n      return parseInt(x, 16);\n    });\n    acc.push.apply(acc, _toConsumableArray(bytes));\n    return acc;\n  }, []);\n  return Buffer.from(bytes);\n}"]},"metadata":{},"sourceType":"script"}