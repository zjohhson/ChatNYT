{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Parser = require(\"../Parser\");\n\nconst JsonExportsDependency = require(\"../dependencies/JsonExportsDependency\");\n\nconst memoize = require(\"../util/memoize\");\n\nconst JsonData = require(\"./JsonData\");\n/** @typedef {import(\"../../declarations/plugins/JsonModulesPluginParser\").JsonModulesPluginParserOptions} JsonModulesPluginParserOptions */\n\n/** @typedef {import(\"../Module\").BuildInfo} BuildInfo */\n\n/** @typedef {import(\"../Module\").BuildMeta} BuildMeta */\n\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n\n/** @typedef {import(\"./JsonModulesPlugin\").RawJsonData} RawJsonData */\n\n\nconst getParseJson = memoize(() => require(\"json-parse-even-better-errors\"));\n\nclass JsonParser extends Parser {\n  /**\n   * @param {JsonModulesPluginParserOptions} options parser options\n   */\n  constructor(options) {\n    super();\n    this.options = options || {};\n  }\n  /**\n   * @param {string | Buffer | PreparsedAst} source the source to parse\n   * @param {ParserState} state the parser state\n   * @returns {ParserState} the parser state\n   */\n\n\n  parse(source, state) {\n    if (Buffer.isBuffer(source)) {\n      source = source.toString(\"utf-8\");\n    }\n    /** @type {NonNullable<JsonModulesPluginParserOptions[\"parse\"]>} */\n\n\n    const parseFn = typeof this.options.parse === \"function\" ? this.options.parse : getParseJson();\n    /** @type {Buffer | RawJsonData | undefined} */\n\n    let data;\n\n    try {\n      data = typeof source === \"object\" ? source : parseFn(source[0] === \"\\ufeff\" ? source.slice(1) : source);\n    } catch (e) {\n      throw new Error(`Cannot parse JSON: ${\n      /** @type {Error} */\n      e.message}`);\n    }\n\n    const jsonData = new JsonData(\n    /** @type {Buffer | RawJsonData} */\n    data);\n    const buildInfo =\n    /** @type {BuildInfo} */\n    state.module.buildInfo;\n    buildInfo.jsonData = jsonData;\n    buildInfo.strict = true;\n    const buildMeta =\n    /** @type {BuildMeta} */\n    state.module.buildMeta;\n    buildMeta.exportsType = \"default\";\n    buildMeta.defaultObject = typeof data === \"object\" ? \"redirect-warn\" : false;\n    state.module.addDependency(new JsonExportsDependency(jsonData));\n    return state;\n  }\n\n}\n\nmodule.exports = JsonParser;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/json/JsonParser.js"],"names":["Parser","require","JsonExportsDependency","memoize","JsonData","getParseJson","JsonParser","constructor","options","parse","source","state","Buffer","isBuffer","toString","parseFn","data","slice","e","Error","message","jsonData","buildInfo","module","strict","buildMeta","exportsType","defaultObject","addDependency","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,uCAAD,CAArC;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAxB;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;AAEA,MAAMI,YAAY,GAAGF,OAAO,CAAC,MAAMF,OAAO,CAAC,+BAAD,CAAd,CAA5B;;AAEA,MAAMK,UAAN,SAAyBN,MAAzB,CAAgC;AAC/B;AACD;AACA;AACCO,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpB;AACA,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,MAAD,EAASC,KAAT,EAAgB;AACpB,QAAIC,MAAM,CAACC,QAAP,CAAgBH,MAAhB,CAAJ,EAA6B;AAC5BA,MAAAA,MAAM,GAAGA,MAAM,CAACI,QAAP,CAAgB,OAAhB,CAAT;AACA;AAED;;;AACA,UAAMC,OAAO,GACZ,OAAO,KAAKP,OAAL,CAAaC,KAApB,KAA8B,UAA9B,GACG,KAAKD,OAAL,CAAaC,KADhB,GAEGJ,YAAY,EAHhB;AAIA;;AACA,QAAIW,IAAJ;;AACA,QAAI;AACHA,MAAAA,IAAI,GACH,OAAON,MAAP,KAAkB,QAAlB,GACGA,MADH,GAEGK,OAAO,CAACL,MAAM,CAAC,CAAD,CAAN,KAAc,QAAd,GAAyBA,MAAM,CAACO,KAAP,CAAa,CAAb,CAAzB,GAA2CP,MAA5C,CAHX;AAIA,KALD,CAKE,OAAOQ,CAAP,EAAU;AACX,YAAM,IAAIC,KAAJ,CAAW;AAAqB;AAAsBD,MAAAA,CAAD,CAAIE,OAAQ,EAAjE,CAAN;AACA;;AACD,UAAMC,QAAQ,GAAG,IAAIjB,QAAJ;AAAa;AAAqCY,IAAAA,IAAlD,CAAjB;AACA,UAAMM,SAAS;AAAG;AAA0BX,IAAAA,KAAK,CAACY,MAAN,CAAaD,SAAzD;AACAA,IAAAA,SAAS,CAACD,QAAV,GAAqBA,QAArB;AACAC,IAAAA,SAAS,CAACE,MAAV,GAAmB,IAAnB;AACA,UAAMC,SAAS;AAAG;AAA0Bd,IAAAA,KAAK,CAACY,MAAN,CAAaE,SAAzD;AACAA,IAAAA,SAAS,CAACC,WAAV,GAAwB,SAAxB;AACAD,IAAAA,SAAS,CAACE,aAAV,GACC,OAAOX,IAAP,KAAgB,QAAhB,GAA2B,eAA3B,GAA6C,KAD9C;AAEAL,IAAAA,KAAK,CAACY,MAAN,CAAaK,aAAb,CAA2B,IAAI1B,qBAAJ,CAA0BmB,QAA1B,CAA3B;AACA,WAAOV,KAAP;AACA;;AA5C8B;;AA+ChCY,MAAM,CAACM,OAAP,GAAiBvB,UAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Parser = require(\"../Parser\");\nconst JsonExportsDependency = require(\"../dependencies/JsonExportsDependency\");\nconst memoize = require(\"../util/memoize\");\nconst JsonData = require(\"./JsonData\");\n\n/** @typedef {import(\"../../declarations/plugins/JsonModulesPluginParser\").JsonModulesPluginParserOptions} JsonModulesPluginParserOptions */\n/** @typedef {import(\"../Module\").BuildInfo} BuildInfo */\n/** @typedef {import(\"../Module\").BuildMeta} BuildMeta */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n/** @typedef {import(\"./JsonModulesPlugin\").RawJsonData} RawJsonData */\n\nconst getParseJson = memoize(() => require(\"json-parse-even-better-errors\"));\n\nclass JsonParser extends Parser {\n\t/**\n\t * @param {JsonModulesPluginParserOptions} options parser options\n\t */\n\tconstructor(options) {\n\t\tsuper();\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * @param {string | Buffer | PreparsedAst} source the source to parse\n\t * @param {ParserState} state the parser state\n\t * @returns {ParserState} the parser state\n\t */\n\tparse(source, state) {\n\t\tif (Buffer.isBuffer(source)) {\n\t\t\tsource = source.toString(\"utf-8\");\n\t\t}\n\n\t\t/** @type {NonNullable<JsonModulesPluginParserOptions[\"parse\"]>} */\n\t\tconst parseFn =\n\t\t\ttypeof this.options.parse === \"function\"\n\t\t\t\t? this.options.parse\n\t\t\t\t: getParseJson();\n\t\t/** @type {Buffer | RawJsonData | undefined} */\n\t\tlet data;\n\t\ttry {\n\t\t\tdata =\n\t\t\t\ttypeof source === \"object\"\n\t\t\t\t\t? source\n\t\t\t\t\t: parseFn(source[0] === \"\\ufeff\" ? source.slice(1) : source);\n\t\t} catch (e) {\n\t\t\tthrow new Error(`Cannot parse JSON: ${/** @type {Error} */ (e).message}`);\n\t\t}\n\t\tconst jsonData = new JsonData(/** @type {Buffer | RawJsonData} */ (data));\n\t\tconst buildInfo = /** @type {BuildInfo} */ (state.module.buildInfo);\n\t\tbuildInfo.jsonData = jsonData;\n\t\tbuildInfo.strict = true;\n\t\tconst buildMeta = /** @type {BuildMeta} */ (state.module.buildMeta);\n\t\tbuildMeta.exportsType = \"default\";\n\t\tbuildMeta.defaultObject =\n\t\t\ttypeof data === \"object\" ? \"redirect-warn\" : false;\n\t\tstate.module.addDependency(new JsonExportsDependency(jsonData));\n\t\treturn state;\n\t}\n}\n\nmodule.exports = JsonParser;\n"]},"metadata":{},"sourceType":"script"}