{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nconst namespaceStartCharCode = \"@\".charCodeAt(0);\nmodule.exports = class JoinRequestPartPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"JoinRequestPartPlugin\", (request, resolveContext, callback) => {\n      const req = request.request || \"\";\n      let i = req.indexOf(\"/\", 3);\n\n      if (i >= 0 && req.charCodeAt(2) === namespaceStartCharCode) {\n        i = req.indexOf(\"/\", i + 1);\n      }\n      /** @type {string} */\n\n\n      let moduleName;\n      /** @type {string} */\n\n      let remainingRequest;\n      /** @type {boolean} */\n\n      let fullySpecified;\n\n      if (i < 0) {\n        moduleName = req;\n        remainingRequest = \".\";\n        fullySpecified = false;\n      } else {\n        moduleName = req.slice(0, i);\n        remainingRequest = \".\" + req.slice(i);\n        fullySpecified =\n        /** @type {boolean} */\n        request.fullySpecified;\n      }\n      /** @type {ResolveRequest} */\n\n\n      const obj = { ...request,\n        path: resolver.join(\n        /** @type {string} */\n        request.path, moduleName),\n        relativePath: request.relativePath && resolver.join(request.relativePath, moduleName),\n        request: remainingRequest,\n        fullySpecified\n      };\n      resolver.doResolve(target, obj, null, resolveContext, callback);\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/enhanced-resolve/lib/JoinRequestPartPlugin.js"],"names":["namespaceStartCharCode","charCodeAt","module","exports","JoinRequestPartPlugin","constructor","source","target","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","req","i","indexOf","moduleName","remainingRequest","fullySpecified","slice","obj","path","join","relativePath","doResolve"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AACA;;AAEA,MAAMA,sBAAsB,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAA/B;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,qBAAN,CAA4B;AAC5C;AACD;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiB;AAC3B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAT,CAAoB,KAAKH,MAAzB,CAAf;AACAE,IAAAA,QAAQ,CACNE,OADF,CACU,KAAKL,MADf,EAEEM,QAFF,CAGE,uBAHF,EAIE,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;AACtC,YAAMC,GAAG,GAAGH,OAAO,CAACA,OAAR,IAAmB,EAA/B;AACA,UAAII,CAAC,GAAGD,GAAG,CAACE,OAAJ,CAAY,GAAZ,EAAiB,CAAjB,CAAR;;AAEA,UAAID,CAAC,IAAI,CAAL,IAAUD,GAAG,CAACf,UAAJ,CAAe,CAAf,MAAsBD,sBAApC,EAA4D;AAC3DiB,QAAAA,CAAC,GAAGD,GAAG,CAACE,OAAJ,CAAY,GAAZ,EAAiBD,CAAC,GAAG,CAArB,CAAJ;AACA;AAED;;;AACA,UAAIE,UAAJ;AACA;;AACA,UAAIC,gBAAJ;AACA;;AACA,UAAIC,cAAJ;;AACA,UAAIJ,CAAC,GAAG,CAAR,EAAW;AACVE,QAAAA,UAAU,GAAGH,GAAb;AACAI,QAAAA,gBAAgB,GAAG,GAAnB;AACAC,QAAAA,cAAc,GAAG,KAAjB;AACA,OAJD,MAIO;AACNF,QAAAA,UAAU,GAAGH,GAAG,CAACM,KAAJ,CAAU,CAAV,EAAaL,CAAb,CAAb;AACAG,QAAAA,gBAAgB,GAAG,MAAMJ,GAAG,CAACM,KAAJ,CAAUL,CAAV,CAAzB;AACAI,QAAAA,cAAc;AAAG;AAAwBR,QAAAA,OAAO,CAACQ,cAAjD;AACA;AACD;;;AACA,YAAME,GAAG,GAAG,EACX,GAAGV,OADQ;AAEXW,QAAAA,IAAI,EAAEf,QAAQ,CAACgB,IAAT;AACL;AACCZ,QAAAA,OAAO,CAACW,IAFJ,EAGLL,UAHK,CAFK;AAOXO,QAAAA,YAAY,EACXb,OAAO,CAACa,YAAR,IACAjB,QAAQ,CAACgB,IAAT,CAAcZ,OAAO,CAACa,YAAtB,EAAoCP,UAApC,CATU;AAUXN,QAAAA,OAAO,EAAEO,gBAVE;AAWXC,QAAAA;AAXW,OAAZ;AAaAZ,MAAAA,QAAQ,CAACkB,SAAT,CAAmBpB,MAAnB,EAA2BgB,GAA3B,EAAgC,IAAhC,EAAsCT,cAAtC,EAAsDC,QAAtD;AACA,KA1CH;AA4CA;;AA5D2C,CAA7C","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nconst namespaceStartCharCode = \"@\".charCodeAt(0);\n\nmodule.exports = class JoinRequestPartPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\n\t\t\t\t\"JoinRequestPartPlugin\",\n\t\t\t\t(request, resolveContext, callback) => {\n\t\t\t\t\tconst req = request.request || \"\";\n\t\t\t\t\tlet i = req.indexOf(\"/\", 3);\n\n\t\t\t\t\tif (i >= 0 && req.charCodeAt(2) === namespaceStartCharCode) {\n\t\t\t\t\t\ti = req.indexOf(\"/\", i + 1);\n\t\t\t\t\t}\n\n\t\t\t\t\t/** @type {string} */\n\t\t\t\t\tlet moduleName;\n\t\t\t\t\t/** @type {string} */\n\t\t\t\t\tlet remainingRequest;\n\t\t\t\t\t/** @type {boolean} */\n\t\t\t\t\tlet fullySpecified;\n\t\t\t\t\tif (i < 0) {\n\t\t\t\t\t\tmoduleName = req;\n\t\t\t\t\t\tremainingRequest = \".\";\n\t\t\t\t\t\tfullySpecified = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmoduleName = req.slice(0, i);\n\t\t\t\t\t\tremainingRequest = \".\" + req.slice(i);\n\t\t\t\t\t\tfullySpecified = /** @type {boolean} */ (request.fullySpecified);\n\t\t\t\t\t}\n\t\t\t\t\t/** @type {ResolveRequest} */\n\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t...request,\n\t\t\t\t\t\tpath: resolver.join(\n\t\t\t\t\t\t\t/** @type {string} */\n\t\t\t\t\t\t\t(request.path),\n\t\t\t\t\t\t\tmoduleName\n\t\t\t\t\t\t),\n\t\t\t\t\t\trelativePath:\n\t\t\t\t\t\t\trequest.relativePath &&\n\t\t\t\t\t\t\tresolver.join(request.relativePath, moduleName),\n\t\t\t\t\t\trequest: remainingRequest,\n\t\t\t\t\t\tfullySpecified\n\t\t\t\t\t};\n\t\t\t\t\tresolver.doResolve(target, obj, null, resolveContext, callback);\n\t\t\t\t}\n\t\t\t);\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}