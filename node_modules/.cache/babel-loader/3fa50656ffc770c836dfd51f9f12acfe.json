{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst RuntimeModule = require(\"../RuntimeModule\");\n\nconst Template = require(\"../Template\");\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\n\nclass ChunkPrefetchStartupRuntimeModule extends RuntimeModule {\n  /**\n   * @param {{ onChunks: Chunk[], chunks: Set<Chunk> }[]} startupChunks chunk ids to trigger when chunks are loaded\n   */\n  constructor(startupChunks) {\n    super(\"startup prefetch\", RuntimeModule.STAGE_TRIGGER);\n    this.startupChunks = startupChunks;\n  }\n  /**\n   * @returns {string | null} runtime code\n   */\n\n\n  generate() {\n    const {\n      startupChunks\n    } = this;\n    const compilation =\n    /** @type {Compilation} */\n    this.compilation;\n    const chunk =\n    /** @type {Chunk} */\n    this.chunk;\n    const {\n      runtimeTemplate\n    } = compilation;\n    return Template.asString(startupChunks.map(_ref => {\n      let {\n        onChunks,\n        chunks\n      } = _ref;\n      return `${RuntimeGlobals.onChunksLoaded}(0, ${JSON.stringify( // This need to include itself to delay execution after this chunk has been fully loaded\n      onChunks.filter(c => c === chunk).map(c => c.id))}, ${runtimeTemplate.basicFunction(\"\", chunks.size < 3 ? Array.from(chunks, c => `${RuntimeGlobals.prefetchChunk}(${JSON.stringify(c.id)});`) : `${JSON.stringify(Array.from(chunks, c => c.id))}.map(${RuntimeGlobals.prefetchChunk});`)}, 5);`;\n    }));\n  }\n\n}\n\nmodule.exports = ChunkPrefetchStartupRuntimeModule;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/prefetch/ChunkPrefetchStartupRuntimeModule.js"],"names":["RuntimeGlobals","require","RuntimeModule","Template","ChunkPrefetchStartupRuntimeModule","constructor","startupChunks","STAGE_TRIGGER","generate","compilation","chunk","runtimeTemplate","asString","map","onChunks","chunks","onChunksLoaded","JSON","stringify","filter","c","id","basicFunction","size","Array","from","prefetchChunk","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAAxB;AAEA;;AACA;;AACA;;;AAEA,MAAMG,iCAAN,SAAgDF,aAAhD,CAA8D;AAC7D;AACD;AACA;AACCG,EAAAA,WAAW,CAACC,aAAD,EAAgB;AAC1B,UAAM,kBAAN,EAA0BJ,aAAa,CAACK,aAAxC;AACA,SAAKD,aAAL,GAAqBA,aAArB;AACA;AAED;AACD;AACA;;;AACCE,EAAAA,QAAQ,GAAG;AACV,UAAM;AAAEF,MAAAA;AAAF,QAAoB,IAA1B;AACA,UAAMG,WAAW;AAAG;AAA4B,SAAKA,WAArD;AACA,UAAMC,KAAK;AAAG;AAAsB,SAAKA,KAAzC;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAsBF,WAA5B;AACA,WAAON,QAAQ,CAACS,QAAT,CACNN,aAAa,CAACO,GAAd,CACC;AAAA,UAAC;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAD;AAAA,aACE,GAAEf,cAAc,CAACgB,cAAe,OAAMC,IAAI,CAACC,SAAL,EACtC;AACAJ,MAAAA,QAAQ,CAACK,MAAT,CAAgBC,CAAC,IAAIA,CAAC,KAAKV,KAA3B,EAAkCG,GAAlC,CAAsCO,CAAC,IAAIA,CAAC,CAACC,EAA7C,CAFsC,CAGrC,KAAIV,eAAe,CAACW,aAAhB,CACL,EADK,EAELP,MAAM,CAACQ,IAAP,GAAc,CAAd,GACGC,KAAK,CAACC,IAAN,CACAV,MADA,EAEAK,CAAC,IACC,GAAEpB,cAAc,CAAC0B,aAAc,IAAGT,IAAI,CAACC,SAAL,CAAeE,CAAC,CAACC,EAAjB,CAAqB,IAHzD,CADH,GAMI,GAAEJ,IAAI,CAACC,SAAL,CAAeM,KAAK,CAACC,IAAN,CAAWV,MAAX,EAAmBK,CAAC,IAAIA,CAAC,CAACC,EAA1B,CAAf,CAA8C,QACjDrB,cAAc,CAAC0B,aACd,IAVC,CAWJ,OAfH;AAAA,KADD,CADM,CAAP;AAoBA;;AArC4D;;AAwC9DC,MAAM,CAACC,OAAP,GAAiBxB,iCAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\nclass ChunkPrefetchStartupRuntimeModule extends RuntimeModule {\n\t/**\n\t * @param {{ onChunks: Chunk[], chunks: Set<Chunk> }[]} startupChunks chunk ids to trigger when chunks are loaded\n\t */\n\tconstructor(startupChunks) {\n\t\tsuper(\"startup prefetch\", RuntimeModule.STAGE_TRIGGER);\n\t\tthis.startupChunks = startupChunks;\n\t}\n\n\t/**\n\t * @returns {string | null} runtime code\n\t */\n\tgenerate() {\n\t\tconst { startupChunks } = this;\n\t\tconst compilation = /** @type {Compilation} */ (this.compilation);\n\t\tconst chunk = /** @type {Chunk} */ (this.chunk);\n\t\tconst { runtimeTemplate } = compilation;\n\t\treturn Template.asString(\n\t\t\tstartupChunks.map(\n\t\t\t\t({ onChunks, chunks }) =>\n\t\t\t\t\t`${RuntimeGlobals.onChunksLoaded}(0, ${JSON.stringify(\n\t\t\t\t\t\t// This need to include itself to delay execution after this chunk has been fully loaded\n\t\t\t\t\t\tonChunks.filter(c => c === chunk).map(c => c.id)\n\t\t\t\t\t)}, ${runtimeTemplate.basicFunction(\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\tchunks.size < 3\n\t\t\t\t\t\t\t? Array.from(\n\t\t\t\t\t\t\t\t\tchunks,\n\t\t\t\t\t\t\t\t\tc =>\n\t\t\t\t\t\t\t\t\t\t`${RuntimeGlobals.prefetchChunk}(${JSON.stringify(c.id)});`\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t: `${JSON.stringify(Array.from(chunks, c => c.id))}.map(${\n\t\t\t\t\t\t\t\t\tRuntimeGlobals.prefetchChunk\n\t\t\t\t\t\t\t  });`\n\t\t\t\t\t)}, 5);`\n\t\t\t)\n\t\t);\n\t}\n}\n\nmodule.exports = ChunkPrefetchStartupRuntimeModule;\n"]},"metadata":{},"sourceType":"script"}