{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useTabsContext } from '../Tabs';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { useCompoundItem } from '../useCompound';\nimport { useListItem } from '../useList';\nimport { useButton } from '../useButton';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\n\nfunction tabValueGenerator(otherTabValues) {\n  return otherTabValues.size;\n}\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/#hooks)\n *\n * API:\n *\n * - [useTab API](https://mui.com/base-ui/react-tabs/hooks-api/#use-tab)\n */\n\n\nfunction useTab(parameters) {\n  const {\n    value: valueParam,\n    rootRef: externalRef,\n    disabled = false,\n    id: idParam\n  } = parameters;\n  const tabRef = React.useRef(null);\n  const id = useId(idParam);\n  const {\n    value: selectedValue,\n    selectionFollowsFocus,\n    getTabPanelId\n  } = useTabsContext();\n  const tabMetadata = React.useMemo(() => ({\n    disabled,\n    ref: tabRef,\n    id\n  }), [disabled, tabRef, id]);\n  const {\n    id: value,\n    index,\n    totalItemCount: totalTabsCount\n  } = useCompoundItem(valueParam != null ? valueParam : tabValueGenerator, tabMetadata);\n  const {\n    getRootProps: getTabProps,\n    highlighted,\n    selected\n  } = useListItem({\n    item: value\n  });\n  const {\n    getRootProps: getButtonProps,\n    rootRef: buttonRefHandler,\n    active,\n    focusVisible,\n    setFocusVisible\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: !selectionFollowsFocus,\n    type: 'button'\n  });\n  const handleRef = useForkRef(tabRef, externalRef, buttonRefHandler);\n  const tabPanelId = value !== undefined ? getTabPanelId(value) : undefined;\n\n  const getRootProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getTabProps, getButtonProps);\n    return _extends({}, externalProps, getCombinedRootProps(externalEventHandlers), {\n      role: 'tab',\n      'aria-controls': tabPanelId,\n      'aria-selected': selected,\n      id,\n      ref: handleRef\n    });\n  };\n\n  return {\n    getRootProps,\n    active,\n    focusVisible,\n    highlighted,\n    index,\n    rootRef: handleRef,\n    // the `selected` state isn't set on the server (it relies on effects to be calculated),\n    // so we fall back to checking the `value` prop with the selectedValue from the TabsContext\n    selected: selected || value === selectedValue,\n    setFocusVisible,\n    totalTabsCount\n  };\n}\n\nexport { useTab };","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/@mui/base/useTab/useTab.js"],"names":["_extends","React","unstable_useId","useId","unstable_useForkRef","useForkRef","useTabsContext","extractEventHandlers","useCompoundItem","useListItem","useButton","combineHooksSlotProps","tabValueGenerator","otherTabValues","size","useTab","parameters","value","valueParam","rootRef","externalRef","disabled","id","idParam","tabRef","useRef","selectedValue","selectionFollowsFocus","getTabPanelId","tabMetadata","useMemo","ref","index","totalItemCount","totalTabsCount","getRootProps","getTabProps","highlighted","selected","item","getButtonProps","buttonRefHandler","active","focusVisible","setFocusVisible","focusableWhenDisabled","type","handleRef","tabPanelId","undefined","externalProps","externalEventHandlers","getCombinedRootProps","role"],"mappings":"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","sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useTabsContext } from '../Tabs';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { useCompoundItem } from '../useCompound';\nimport { useListItem } from '../useList';\nimport { useButton } from '../useButton';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nfunction tabValueGenerator(otherTabValues) {\n  return otherTabValues.size;\n}\n\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/#hooks)\n *\n * API:\n *\n * - [useTab API](https://mui.com/base-ui/react-tabs/hooks-api/#use-tab)\n */\nfunction useTab(parameters) {\n  const {\n    value: valueParam,\n    rootRef: externalRef,\n    disabled = false,\n    id: idParam\n  } = parameters;\n  const tabRef = React.useRef(null);\n  const id = useId(idParam);\n  const {\n    value: selectedValue,\n    selectionFollowsFocus,\n    getTabPanelId\n  } = useTabsContext();\n  const tabMetadata = React.useMemo(() => ({\n    disabled,\n    ref: tabRef,\n    id\n  }), [disabled, tabRef, id]);\n  const {\n    id: value,\n    index,\n    totalItemCount: totalTabsCount\n  } = useCompoundItem(valueParam != null ? valueParam : tabValueGenerator, tabMetadata);\n  const {\n    getRootProps: getTabProps,\n    highlighted,\n    selected\n  } = useListItem({\n    item: value\n  });\n  const {\n    getRootProps: getButtonProps,\n    rootRef: buttonRefHandler,\n    active,\n    focusVisible,\n    setFocusVisible\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: !selectionFollowsFocus,\n    type: 'button'\n  });\n  const handleRef = useForkRef(tabRef, externalRef, buttonRefHandler);\n  const tabPanelId = value !== undefined ? getTabPanelId(value) : undefined;\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getTabProps, getButtonProps);\n    return _extends({}, externalProps, getCombinedRootProps(externalEventHandlers), {\n      role: 'tab',\n      'aria-controls': tabPanelId,\n      'aria-selected': selected,\n      id,\n      ref: handleRef\n    });\n  };\n  return {\n    getRootProps,\n    active,\n    focusVisible,\n    highlighted,\n    index,\n    rootRef: handleRef,\n    // the `selected` state isn't set on the server (it relies on effects to be calculated),\n    // so we fall back to checking the `value` prop with the selectedValue from the TabsContext\n    selected: selected || value === selectedValue,\n    setFocusVisible,\n    totalTabsCount\n  };\n}\nexport { useTab };"]},"metadata":{},"sourceType":"module"}