{"ast":null,"code":"\"use strict\";\n\nconst path = require(\"path\");\n\nconst os = require(\"os\");\n\nconst {\n  validate\n} = require(\"schema-utils\");\n\nconst {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n} = require(\"./utils\");\n\nconst schema = require(\"./options.json\");\n\nconst {\n  minify\n} = require(\"./minify\");\n/** @typedef {import(\"schema-utils/declarations/validate\").Schema} Schema */\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").Compilation} Compilation */\n\n/** @typedef {import(\"webpack\").WebpackError} WebpackError */\n\n/** @typedef {import(\"webpack\").Asset} Asset */\n\n/** @typedef {import(\"./utils.js\").TerserECMA} TerserECMA */\n\n/** @typedef {import(\"./utils.js\").TerserOptions} TerserOptions */\n\n/** @typedef {import(\"jest-worker\").Worker} JestWorker */\n\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n\n/** @typedef {import(\"@jridgewell/trace-mapping\").TraceMap} TraceMap */\n\n/** @typedef {RegExp | string} Rule */\n\n/** @typedef {Rule[] | Rule} Rules */\n\n/**\n * @callback ExtractCommentsFunction\n * @param {any} astNode\n * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number }} comment\n * @returns {boolean}\n */\n\n/**\n * @typedef {boolean | 'all' | 'some' | RegExp | ExtractCommentsFunction} ExtractCommentsCondition\n */\n\n/**\n * @typedef {string | ((fileData: any) => string)} ExtractCommentsFilename\n */\n\n/**\n * @typedef {boolean | string | ((commentsFile: string) => string)} ExtractCommentsBanner\n */\n\n/**\n * @typedef {Object} ExtractCommentsObject\n * @property {ExtractCommentsCondition} [condition]\n * @property {ExtractCommentsFilename} [filename]\n * @property {ExtractCommentsBanner} [banner]\n */\n\n/**\n * @typedef {ExtractCommentsCondition | ExtractCommentsObject} ExtractCommentsOptions\n */\n\n/**\n * @typedef {Object} MinimizedResult\n * @property {string} code\n * @property {SourceMapInput} [map]\n * @property {Array<Error | string>} [errors]\n * @property {Array<Error | string>} [warnings]\n * @property {Array<string>} [extractedComments]\n */\n\n/**\n * @typedef {{ [file: string]: string }} Input\n */\n\n/**\n * @typedef {{ [key: string]: any }} CustomOptions\n */\n\n/**\n * @template T\n * @typedef {T extends infer U ? U : CustomOptions} InferDefaultType\n */\n\n/**\n * @typedef {Object} PredefinedOptions\n * @property {boolean} [module]\n * @property {TerserECMA} [ecma]\n */\n\n/**\n * @template T\n * @typedef {PredefinedOptions & InferDefaultType<T>} MinimizerOptions\n */\n\n/**\n * @template T\n * @callback BasicMinimizerImplementation\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {MinimizerOptions<T>} minifyOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @returns {Promise<MinimizedResult>}\n */\n\n/**\n * @typedef {object} MinimizeFunctionHelpers\n * @property {() => string | undefined} [getMinimizerVersion]\n */\n\n/**\n * @template T\n * @typedef {BasicMinimizerImplementation<T> & MinimizeFunctionHelpers} MinimizerImplementation\n */\n\n/**\n * @template T\n * @typedef {Object} InternalOptions\n * @property {string} name\n * @property {string} input\n * @property {SourceMapInput | undefined} inputSourceMap\n * @property {ExtractCommentsOptions | undefined} extractComments\n * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> }} minimizer\n */\n\n/**\n * @template T\n * @typedef {JestWorker & { transform: (options: string) => MinimizedResult, minify: (options: InternalOptions<T>) => MinimizedResult }} MinimizerWorker\n */\n\n/**\n * @typedef {undefined | boolean | number} Parallel\n */\n\n/**\n * @typedef {Object} BasePluginOptions\n * @property {Rules} [test]\n * @property {Rules} [include]\n * @property {Rules} [exclude]\n * @property {ExtractCommentsOptions} [extractComments]\n * @property {Parallel} [parallel]\n */\n\n/**\n * @template T\n * @typedef {T extends TerserOptions ? { minify?: MinimizerImplementation<T> | undefined, terserOptions?: MinimizerOptions<T> | undefined } : { minify: MinimizerImplementation<T>, terserOptions?: MinimizerOptions<T> | undefined }} DefinedDefaultMinimizerAndOptions\n */\n\n/**\n * @template T\n * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> } }} InternalPluginOptions\n */\n\n/**\n * @template T\n * @param fn {(function(): any) | undefined}\n * @returns {function(): T}\n */\n\n\nconst memoize = fn => {\n  let cache = false;\n  /** @type {T} */\n\n  let result;\n  return () => {\n    if (cache) {\n      return result;\n    }\n\n    result =\n    /** @type {function(): any} */\n    fn();\n    cache = true; // Allow to clean up memory for fn\n    // and all dependent resources\n    // eslint-disable-next-line no-undefined, no-param-reassign\n\n    fn = undefined;\n    return result;\n  };\n};\n\nconst getTraceMapping = memoize(() => // eslint-disable-next-line global-require\nrequire(\"@jridgewell/trace-mapping\"));\nconst getSerializeJavascript = memoize(() => // eslint-disable-next-line global-require\nrequire(\"serialize-javascript\"));\n/**\n * @template [T=TerserOptions]\n */\n\nclass TerserPlugin {\n  /**\n   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>} [options]\n   */\n  constructor(options) {\n    validate(\n    /** @type {Schema} */\n    schema, options || {}, {\n      name: \"Terser Plugin\",\n      baseDataPath: \"options\"\n    }); // TODO make `minimizer` option instead `minify` and `terserOptions` in the next major release, also rename `terserMinify` to `terserMinimize`\n\n    const {\n      minify =\n      /** @type {MinimizerImplementation<T>} */\n      terserMinify,\n      terserOptions =\n      /** @type {MinimizerOptions<T>} */\n      {},\n      test = /\\.[cm]?js(\\?.*)?$/i,\n      extractComments = true,\n      parallel = true,\n      include,\n      exclude\n    } = options || {};\n    /**\n     * @private\n     * @type {InternalPluginOptions<T>}\n     */\n\n    this.options = {\n      test,\n      extractComments,\n      parallel,\n      include,\n      exclude,\n      minimizer: {\n        implementation: minify,\n        options: terserOptions\n      }\n    };\n  }\n  /**\n   * @private\n   * @param {any} input\n   * @returns {boolean}\n   */\n\n\n  static isSourceMap(input) {\n    // All required options for `new TraceMap(...options)`\n    // https://github.com/jridgewell/trace-mapping#usage\n    return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === \"string\");\n  }\n  /**\n   * @private\n   * @param {unknown} warning\n   * @param {string} file\n   * @returns {Error}\n   */\n\n\n  static buildWarning(warning, file) {\n    /**\n     * @type {Error & { hideStack: true, file: string }}\n     */\n    // @ts-ignore\n    const builtWarning = new Error(warning.toString());\n    builtWarning.name = \"Warning\";\n    builtWarning.hideStack = true;\n    builtWarning.file = file;\n    return builtWarning;\n  }\n  /**\n   * @private\n   * @param {any} error\n   * @param {string} file\n   * @param {TraceMap} [sourceMap]\n   * @param {Compilation[\"requestShortener\"]} [requestShortener]\n   * @returns {Error}\n   */\n\n\n  static buildError(error, file, sourceMap, requestShortener) {\n    /**\n     * @type {Error & { file?: string }}\n     */\n    let builtError;\n\n    if (typeof error === \"string\") {\n      builtError = new Error(`${file} from Terser plugin\\n${error}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    if (error.line) {\n      const original = sourceMap && getTraceMapping().originalPositionFor(sourceMap, {\n        line: error.line,\n        column: error.col\n      });\n\n      if (original && original.source && requestShortener) {\n        builtError = new Error(`${file} from Terser plugin\\n${error.message} [${requestShortener.shorten(original.source)}:${original.line},${original.column}][${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n        builtError.file = file;\n        return builtError;\n      }\n\n      builtError = new Error(`${file} from Terser plugin\\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    if (error.stack) {\n      builtError = new Error(`${file} from Terser plugin\\n${typeof error.message !== \"undefined\" ? error.message : \"\"}\\n${error.stack}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    builtError = new Error(`${file} from Terser plugin\\n${error.message}`);\n    builtError.file = file;\n    return builtError;\n  }\n  /**\n   * @private\n   * @param {Parallel} parallel\n   * @returns {number}\n   */\n\n\n  static getAvailableNumberOfCores(parallel) {\n    // In some cases cpus() returns undefined\n    // https://github.com/nodejs/node/issues/19022\n    const cpus = os.cpus() || {\n      length: 1\n    };\n    return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);\n  }\n  /**\n   * @private\n   * @param {Compiler} compiler\n   * @param {Compilation} compilation\n   * @param {Record<string, import(\"webpack\").sources.Source>} assets\n   * @param {{availableNumberOfCores: number}} optimizeOptions\n   * @returns {Promise<void>}\n   */\n\n\n  async optimize(compiler, compilation, assets, optimizeOptions) {\n    const cache = compilation.getCache(\"TerserWebpackPlugin\");\n    let numberOfAssets = 0;\n    const assetsForMinify = await Promise.all(Object.keys(assets).filter(name => {\n      const {\n        info\n      } =\n      /** @type {Asset} */\n      compilation.getAsset(name);\n\n      if ( // Skip double minimize assets from child compilation\n      info.minimized || // Skip minimizing for extracted comments assets\n      info.extractedComments) {\n        return false;\n      }\n\n      if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind( // eslint-disable-next-line no-undefined\n      undefined, this.options)(name)) {\n        return false;\n      }\n\n      return true;\n    }).map(async name => {\n      const {\n        info,\n        source\n      } =\n      /** @type {Asset} */\n      compilation.getAsset(name);\n      const eTag = cache.getLazyHashedEtag(source);\n      const cacheItem = cache.getItemCache(name, eTag);\n      const output = await cacheItem.getPromise();\n\n      if (!output) {\n        numberOfAssets += 1;\n      }\n\n      return {\n        name,\n        info,\n        inputSource: source,\n        output,\n        cacheItem\n      };\n    }));\n\n    if (assetsForMinify.length === 0) {\n      return;\n    }\n    /** @type {undefined | (() => MinimizerWorker<T>)} */\n\n\n    let getWorker;\n    /** @type {undefined | MinimizerWorker<T>} */\n\n    let initializedWorker;\n    /** @type {undefined | number} */\n\n    let numberOfWorkers;\n\n    if (optimizeOptions.availableNumberOfCores > 0) {\n      // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory\n      numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores); // eslint-disable-next-line consistent-return\n\n      getWorker = () => {\n        if (initializedWorker) {\n          return initializedWorker;\n        } // eslint-disable-next-line global-require\n\n\n        const {\n          Worker\n        } = require(\"jest-worker\");\n\n        initializedWorker =\n        /** @type {MinimizerWorker<T>} */\n        new Worker(require.resolve(\"./minify\"), {\n          numWorkers: numberOfWorkers,\n          enableWorkerThreads: true\n        }); // https://github.com/facebook/jest/issues/8872#issuecomment-524822081\n\n        const workerStdout = initializedWorker.getStdout();\n\n        if (workerStdout) {\n          workerStdout.on(\"data\", chunk => process.stdout.write(chunk));\n        }\n\n        const workerStderr = initializedWorker.getStderr();\n\n        if (workerStderr) {\n          workerStderr.on(\"data\", chunk => process.stderr.write(chunk));\n        }\n\n        return initializedWorker;\n      };\n    }\n\n    const {\n      SourceMapSource,\n      ConcatSource,\n      RawSource\n    } = compiler.webpack.sources;\n    /** @typedef {{ extractedCommentsSource : import(\"webpack\").sources.RawSource, commentsFilename: string }} ExtractedCommentsInfo */\n\n    /** @type {Map<string, ExtractedCommentsInfo>} */\n\n    const allExtractedComments = new Map();\n    const scheduledTasks = [];\n\n    for (const asset of assetsForMinify) {\n      scheduledTasks.push(async () => {\n        const {\n          name,\n          inputSource,\n          info,\n          cacheItem\n        } = asset;\n        let {\n          output\n        } = asset;\n\n        if (!output) {\n          let input;\n          /** @type {SourceMapInput | undefined} */\n\n          let inputSourceMap;\n          const {\n            source: sourceFromInputSource,\n            map\n          } = inputSource.sourceAndMap();\n          input = sourceFromInputSource;\n\n          if (map) {\n            if (!TerserPlugin.isSourceMap(map)) {\n              compilation.warnings.push(\n              /** @type {WebpackError} */\n              new Error(`${name} contains invalid source map`));\n            } else {\n              inputSourceMap =\n              /** @type {SourceMapInput} */\n              map;\n            }\n          }\n\n          if (Buffer.isBuffer(input)) {\n            input = input.toString();\n          }\n          /**\n           * @type {InternalOptions<T>}\n           */\n\n\n          const options = {\n            name,\n            input,\n            inputSourceMap,\n            minimizer: {\n              implementation: this.options.minimizer.implementation,\n              // @ts-ignore https://github.com/Microsoft/TypeScript/issues/10727\n              options: { ...this.options.minimizer.options\n              }\n            },\n            extractComments: this.options.extractComments\n          };\n\n          if (typeof options.minimizer.options.module === \"undefined\") {\n            if (typeof info.javascriptModule !== \"undefined\") {\n              options.minimizer.options.module = info.javascriptModule;\n            } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = true;\n            } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = false;\n            }\n          }\n\n          if (typeof options.minimizer.options.ecma === \"undefined\") {\n            options.minimizer.options.ecma = TerserPlugin.getEcmaVersion(compiler.options.output.environment || {});\n          }\n\n          try {\n            output = await (getWorker ? getWorker().transform(getSerializeJavascript()(options)) : minify(options));\n          } catch (error) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            TerserPlugin.buildError(error, name, hasSourceMap ? new (getTraceMapping().TraceMap)(\n            /** @type {SourceMapInput} */\n            inputSourceMap) : // eslint-disable-next-line no-undefined\n            undefined, // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n            return;\n          }\n\n          if (typeof output.code === \"undefined\") {\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            new Error(`${name} from Terser plugin\\nMinimizer doesn't return result`));\n            return;\n          }\n\n          if (output.warnings && output.warnings.length > 0) {\n            output.warnings = output.warnings.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildWarning(item, name));\n          }\n\n          if (output.errors && output.errors.length > 0) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            output.errors = output.errors.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildError(item, name, hasSourceMap ? new (getTraceMapping().TraceMap)(\n            /** @type {SourceMapInput} */\n            inputSourceMap) : // eslint-disable-next-line no-undefined\n            undefined, // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n          }\n\n          let shebang;\n\n          if (\n          /** @type {ExtractCommentsObject} */\n          this.options.extractComments.banner !== false && output.extractedComments && output.extractedComments.length > 0 && output.code.startsWith(\"#!\")) {\n            const firstNewlinePosition = output.code.indexOf(\"\\n\");\n            shebang = output.code.substring(0, firstNewlinePosition);\n            output.code = output.code.substring(firstNewlinePosition + 1);\n          }\n\n          if (output.map) {\n            output.source = new SourceMapSource(output.code, name, output.map, input,\n            /** @type {SourceMapInput} */\n            inputSourceMap, true);\n          } else {\n            output.source = new RawSource(output.code);\n          }\n\n          if (output.extractedComments && output.extractedComments.length > 0) {\n            const commentsFilename =\n            /** @type {ExtractCommentsObject} */\n            this.options.extractComments.filename || \"[file].LICENSE.txt[query]\";\n            let query = \"\";\n            let filename = name;\n            const querySplit = filename.indexOf(\"?\");\n\n            if (querySplit >= 0) {\n              query = filename.slice(querySplit);\n              filename = filename.slice(0, querySplit);\n            }\n\n            const lastSlashIndex = filename.lastIndexOf(\"/\");\n            const basename = lastSlashIndex === -1 ? filename : filename.slice(lastSlashIndex + 1);\n            const data = {\n              filename,\n              basename,\n              query\n            };\n            output.commentsFilename = compilation.getPath(commentsFilename, data);\n            let banner; // Add a banner to the original file\n\n            if (\n            /** @type {ExtractCommentsObject} */\n            this.options.extractComments.banner !== false) {\n              banner =\n              /** @type {ExtractCommentsObject} */\n              this.options.extractComments.banner || `For license information please see ${path.relative(path.dirname(name), output.commentsFilename).replace(/\\\\/g, \"/\")}`;\n\n              if (typeof banner === \"function\") {\n                banner = banner(output.commentsFilename);\n              }\n\n              if (banner) {\n                output.source = new ConcatSource(shebang ? `${shebang}\\n` : \"\", `/*! ${banner} */\\n`, output.source);\n              }\n            }\n\n            const extractedCommentsString = output.extractedComments.sort().join(\"\\n\\n\");\n            output.extractedCommentsSource = new RawSource(`${extractedCommentsString}\\n`);\n          }\n\n          await cacheItem.storePromise({\n            source: output.source,\n            errors: output.errors,\n            warnings: output.warnings,\n            commentsFilename: output.commentsFilename,\n            extractedCommentsSource: output.extractedCommentsSource\n          });\n        }\n\n        if (output.warnings && output.warnings.length > 0) {\n          for (const warning of output.warnings) {\n            compilation.warnings.push(\n            /** @type {WebpackError} */\n            warning);\n          }\n        }\n\n        if (output.errors && output.errors.length > 0) {\n          for (const error of output.errors) {\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            error);\n          }\n        }\n        /** @type {Record<string, any>} */\n\n\n        const newInfo = {\n          minimized: true\n        };\n        const {\n          source,\n          extractedCommentsSource\n        } = output; // Write extracted comments to commentsFilename\n\n        if (extractedCommentsSource) {\n          const {\n            commentsFilename\n          } = output;\n          newInfo.related = {\n            license: commentsFilename\n          };\n          allExtractedComments.set(name, {\n            extractedCommentsSource,\n            commentsFilename\n          });\n        }\n\n        compilation.updateAsset(name, source, newInfo);\n      });\n    }\n\n    const limit = getWorker && numberOfAssets > 0 ?\n    /** @type {number} */\n    numberOfWorkers : scheduledTasks.length;\n    await throttleAll(limit, scheduledTasks);\n\n    if (initializedWorker) {\n      await initializedWorker.end();\n    }\n    /** @typedef {{ source: import(\"webpack\").sources.Source, commentsFilename: string, from: string }} ExtractedCommentsInfoWIthFrom */\n\n\n    await Array.from(allExtractedComments).sort().reduce(\n    /**\n     * @param {Promise<unknown>} previousPromise\n     * @param {[string, ExtractedCommentsInfo]} extractedComments\n     * @returns {Promise<ExtractedCommentsInfoWIthFrom>}\n     */\n    async (previousPromise, _ref) => {\n      let [from, value] = _ref;\n      const previous =\n      /** @type {ExtractedCommentsInfoWIthFrom | undefined} **/\n      await previousPromise;\n      const {\n        commentsFilename,\n        extractedCommentsSource\n      } = value;\n\n      if (previous && previous.commentsFilename === commentsFilename) {\n        const {\n          from: previousFrom,\n          source: prevSource\n        } = previous;\n        const mergedName = `${previousFrom}|${from}`;\n        const name = `${commentsFilename}|${mergedName}`;\n        const eTag = [prevSource, extractedCommentsSource].map(item => cache.getLazyHashedEtag(item)).reduce((previousValue, currentValue) => cache.mergeEtags(previousValue, currentValue));\n        let source = await cache.getPromise(name, eTag);\n\n        if (!source) {\n          source = new ConcatSource(Array.from(new Set([...\n          /** @type {string}*/\n          prevSource.source().split(\"\\n\\n\"), ...\n          /** @type {string}*/\n          extractedCommentsSource.source().split(\"\\n\\n\")])).join(\"\\n\\n\"));\n          await cache.storePromise(name, eTag, source);\n        }\n\n        compilation.updateAsset(commentsFilename, source);\n        return {\n          source,\n          commentsFilename,\n          from: mergedName\n        };\n      }\n\n      const existingAsset = compilation.getAsset(commentsFilename);\n\n      if (existingAsset) {\n        return {\n          source: existingAsset.source,\n          commentsFilename,\n          from: commentsFilename\n        };\n      }\n\n      compilation.emitAsset(commentsFilename, extractedCommentsSource, {\n        extractedComments: true\n      });\n      return {\n        source: extractedCommentsSource,\n        commentsFilename,\n        from\n      };\n    },\n    /** @type {Promise<unknown>} */\n    Promise.resolve());\n  }\n  /**\n   * @private\n   * @param {any} environment\n   * @returns {TerserECMA}\n   */\n\n\n  static getEcmaVersion(environment) {\n    // ES 6th\n    if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\n      return 2015;\n    } // ES 11th\n\n\n    if (environment.bigIntLiteral || environment.dynamicImport) {\n      return 2020;\n    }\n\n    return 5;\n  }\n  /**\n   * @param {Compiler} compiler\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const pluginName = this.constructor.name;\n    const availableNumberOfCores = TerserPlugin.getAvailableNumberOfCores(this.options.parallel);\n    compiler.hooks.compilation.tap(pluginName, compilation => {\n      const hooks = compiler.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n      const data = getSerializeJavascript()({\n        minimizer: typeof this.options.minimizer.implementation.getMinimizerVersion !== \"undefined\" ? this.options.minimizer.implementation.getMinimizerVersion() || \"0.0.0\" : \"0.0.0\",\n        options: this.options.minimizer.options\n      });\n      hooks.chunkHash.tap(pluginName, (chunk, hash) => {\n        hash.update(\"TerserPlugin\");\n        hash.update(data);\n      });\n      compilation.hooks.processAssets.tapPromise({\n        name: pluginName,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n        additionalAssets: true\n      }, assets => this.optimize(compiler, compilation, assets, {\n        availableNumberOfCores\n      }));\n      compilation.hooks.statsPrinter.tap(pluginName, stats => {\n        stats.hooks.print.for(\"asset.info.minimized\").tap(\"terser-webpack-plugin\", (minimized, _ref2) => {\n          let {\n            green,\n            formatFlag\n          } = _ref2;\n          return minimized ?\n          /** @type {Function} */\n          green(\n          /** @type {Function} */\n          formatFlag(\"minimized\")) : \"\";\n        });\n      });\n    });\n  }\n\n}\n\nTerserPlugin.terserMinify = terserMinify;\nTerserPlugin.uglifyJsMinify = uglifyJsMinify;\nTerserPlugin.swcMinify = swcMinify;\nTerserPlugin.esbuildMinify = esbuildMinify;\nmodule.exports = TerserPlugin;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/terser-webpack-plugin/dist/index.js"],"names":["path","require","os","validate","throttleAll","terserMinify","uglifyJsMinify","swcMinify","esbuildMinify","schema","minify","memoize","fn","cache","result","undefined","getTraceMapping","getSerializeJavascript","TerserPlugin","constructor","options","name","baseDataPath","terserOptions","test","extractComments","parallel","include","exclude","minimizer","implementation","isSourceMap","input","Boolean","version","sources","Array","isArray","mappings","buildWarning","warning","file","builtWarning","Error","toString","hideStack","buildError","error","sourceMap","requestShortener","builtError","line","original","originalPositionFor","column","col","source","message","shorten","stack","split","slice","join","getAvailableNumberOfCores","cpus","length","Math","min","Number","optimize","compiler","compilation","assets","optimizeOptions","getCache","numberOfAssets","assetsForMinify","Promise","all","Object","keys","filter","info","getAsset","minimized","extractedComments","webpack","ModuleFilenameHelpers","matchObject","bind","map","eTag","getLazyHashedEtag","cacheItem","getItemCache","output","getPromise","inputSource","getWorker","initializedWorker","numberOfWorkers","availableNumberOfCores","Worker","resolve","numWorkers","enableWorkerThreads","workerStdout","getStdout","on","chunk","process","stdout","write","workerStderr","getStderr","stderr","SourceMapSource","ConcatSource","RawSource","allExtractedComments","Map","scheduledTasks","asset","push","inputSourceMap","sourceFromInputSource","sourceAndMap","warnings","Buffer","isBuffer","module","javascriptModule","ecma","getEcmaVersion","environment","transform","hasSourceMap","errors","TraceMap","code","item","shebang","banner","startsWith","firstNewlinePosition","indexOf","substring","commentsFilename","filename","query","querySplit","lastSlashIndex","lastIndexOf","basename","data","getPath","relative","dirname","replace","extractedCommentsString","sort","extractedCommentsSource","storePromise","newInfo","related","license","set","updateAsset","limit","end","from","reduce","previousPromise","value","previous","previousFrom","prevSource","mergedName","previousValue","currentValue","mergeEtags","Set","existingAsset","emitAsset","arrowFunction","const","destructuring","forOf","bigIntLiteral","dynamicImport","apply","pluginName","hooks","tap","javascript","JavascriptModulesPlugin","getCompilationHooks","getMinimizerVersion","chunkHash","hash","update","processAssets","tapPromise","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE","additionalAssets","statsPrinter","stats","print","for","green","formatFlag","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAM;AACJE,EAAAA;AADI,IAEFF,OAAO,CAAC,cAAD,CAFX;;AAGA,MAAM;AACJG,EAAAA,WADI;AAEJC,EAAAA,YAFI;AAGJC,EAAAA,cAHI;AAIJC,EAAAA,SAJI;AAKJC,EAAAA;AALI,IAMFP,OAAO,CAAC,SAAD,CANX;;AAOA,MAAMQ,MAAM,GAAGR,OAAO,CAAC,gBAAD,CAAtB;;AACA,MAAM;AACJS,EAAAA;AADI,IAEFT,OAAO,CAAC,UAAD,CAFX;AAIA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMU,OAAO,GAAGC,EAAE,IAAI;AACpB,MAAIC,KAAK,GAAG,KAAZ;AACA;;AACA,MAAIC,MAAJ;AACA,SAAO,MAAM;AACX,QAAID,KAAJ,EAAW;AACT,aAAOC,MAAP;AACD;;AACDA,IAAAA,MAAM;AAAG;AAA8BF,IAAAA,EAAE,EAAzC;AACAC,IAAAA,KAAK,GAAG,IAAR,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","sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\nconst os = require(\"os\");\nconst {\n  validate\n} = require(\"schema-utils\");\nconst {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n} = require(\"./utils\");\nconst schema = require(\"./options.json\");\nconst {\n  minify\n} = require(\"./minify\");\n\n/** @typedef {import(\"schema-utils/declarations/validate\").Schema} Schema */\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n/** @typedef {import(\"webpack\").Compilation} Compilation */\n/** @typedef {import(\"webpack\").WebpackError} WebpackError */\n/** @typedef {import(\"webpack\").Asset} Asset */\n/** @typedef {import(\"./utils.js\").TerserECMA} TerserECMA */\n/** @typedef {import(\"./utils.js\").TerserOptions} TerserOptions */\n/** @typedef {import(\"jest-worker\").Worker} JestWorker */\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n/** @typedef {import(\"@jridgewell/trace-mapping\").TraceMap} TraceMap */\n\n/** @typedef {RegExp | string} Rule */\n/** @typedef {Rule[] | Rule} Rules */\n\n/**\n * @callback ExtractCommentsFunction\n * @param {any} astNode\n * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number }} comment\n * @returns {boolean}\n */\n\n/**\n * @typedef {boolean | 'all' | 'some' | RegExp | ExtractCommentsFunction} ExtractCommentsCondition\n */\n\n/**\n * @typedef {string | ((fileData: any) => string)} ExtractCommentsFilename\n */\n\n/**\n * @typedef {boolean | string | ((commentsFile: string) => string)} ExtractCommentsBanner\n */\n\n/**\n * @typedef {Object} ExtractCommentsObject\n * @property {ExtractCommentsCondition} [condition]\n * @property {ExtractCommentsFilename} [filename]\n * @property {ExtractCommentsBanner} [banner]\n */\n\n/**\n * @typedef {ExtractCommentsCondition | ExtractCommentsObject} ExtractCommentsOptions\n */\n\n/**\n * @typedef {Object} MinimizedResult\n * @property {string} code\n * @property {SourceMapInput} [map]\n * @property {Array<Error | string>} [errors]\n * @property {Array<Error | string>} [warnings]\n * @property {Array<string>} [extractedComments]\n */\n\n/**\n * @typedef {{ [file: string]: string }} Input\n */\n\n/**\n * @typedef {{ [key: string]: any }} CustomOptions\n */\n\n/**\n * @template T\n * @typedef {T extends infer U ? U : CustomOptions} InferDefaultType\n */\n\n/**\n * @typedef {Object} PredefinedOptions\n * @property {boolean} [module]\n * @property {TerserECMA} [ecma]\n */\n\n/**\n * @template T\n * @typedef {PredefinedOptions & InferDefaultType<T>} MinimizerOptions\n */\n\n/**\n * @template T\n * @callback BasicMinimizerImplementation\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {MinimizerOptions<T>} minifyOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @returns {Promise<MinimizedResult>}\n */\n\n/**\n * @typedef {object} MinimizeFunctionHelpers\n * @property {() => string | undefined} [getMinimizerVersion]\n */\n\n/**\n * @template T\n * @typedef {BasicMinimizerImplementation<T> & MinimizeFunctionHelpers} MinimizerImplementation\n */\n\n/**\n * @template T\n * @typedef {Object} InternalOptions\n * @property {string} name\n * @property {string} input\n * @property {SourceMapInput | undefined} inputSourceMap\n * @property {ExtractCommentsOptions | undefined} extractComments\n * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> }} minimizer\n */\n\n/**\n * @template T\n * @typedef {JestWorker & { transform: (options: string) => MinimizedResult, minify: (options: InternalOptions<T>) => MinimizedResult }} MinimizerWorker\n */\n\n/**\n * @typedef {undefined | boolean | number} Parallel\n */\n\n/**\n * @typedef {Object} BasePluginOptions\n * @property {Rules} [test]\n * @property {Rules} [include]\n * @property {Rules} [exclude]\n * @property {ExtractCommentsOptions} [extractComments]\n * @property {Parallel} [parallel]\n */\n\n/**\n * @template T\n * @typedef {T extends TerserOptions ? { minify?: MinimizerImplementation<T> | undefined, terserOptions?: MinimizerOptions<T> | undefined } : { minify: MinimizerImplementation<T>, terserOptions?: MinimizerOptions<T> | undefined }} DefinedDefaultMinimizerAndOptions\n */\n\n/**\n * @template T\n * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> } }} InternalPluginOptions\n */\n\n/**\n * @template T\n * @param fn {(function(): any) | undefined}\n * @returns {function(): T}\n */\nconst memoize = fn => {\n  let cache = false;\n  /** @type {T} */\n  let result;\n  return () => {\n    if (cache) {\n      return result;\n    }\n    result = /** @type {function(): any} */fn();\n    cache = true;\n    // Allow to clean up memory for fn\n    // and all dependent resources\n    // eslint-disable-next-line no-undefined, no-param-reassign\n    fn = undefined;\n    return result;\n  };\n};\nconst getTraceMapping = memoize(() =>\n// eslint-disable-next-line global-require\nrequire(\"@jridgewell/trace-mapping\"));\nconst getSerializeJavascript = memoize(() =>\n// eslint-disable-next-line global-require\nrequire(\"serialize-javascript\"));\n\n/**\n * @template [T=TerserOptions]\n */\nclass TerserPlugin {\n  /**\n   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>} [options]\n   */\n  constructor(options) {\n    validate( /** @type {Schema} */schema, options || {}, {\n      name: \"Terser Plugin\",\n      baseDataPath: \"options\"\n    });\n\n    // TODO make `minimizer` option instead `minify` and `terserOptions` in the next major release, also rename `terserMinify` to `terserMinimize`\n    const {\n      minify = /** @type {MinimizerImplementation<T>} */terserMinify,\n      terserOptions = /** @type {MinimizerOptions<T>} */{},\n      test = /\\.[cm]?js(\\?.*)?$/i,\n      extractComments = true,\n      parallel = true,\n      include,\n      exclude\n    } = options || {};\n\n    /**\n     * @private\n     * @type {InternalPluginOptions<T>}\n     */\n    this.options = {\n      test,\n      extractComments,\n      parallel,\n      include,\n      exclude,\n      minimizer: {\n        implementation: minify,\n        options: terserOptions\n      }\n    };\n  }\n\n  /**\n   * @private\n   * @param {any} input\n   * @returns {boolean}\n   */\n  static isSourceMap(input) {\n    // All required options for `new TraceMap(...options)`\n    // https://github.com/jridgewell/trace-mapping#usage\n    return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === \"string\");\n  }\n\n  /**\n   * @private\n   * @param {unknown} warning\n   * @param {string} file\n   * @returns {Error}\n   */\n  static buildWarning(warning, file) {\n    /**\n     * @type {Error & { hideStack: true, file: string }}\n     */\n    // @ts-ignore\n    const builtWarning = new Error(warning.toString());\n    builtWarning.name = \"Warning\";\n    builtWarning.hideStack = true;\n    builtWarning.file = file;\n    return builtWarning;\n  }\n\n  /**\n   * @private\n   * @param {any} error\n   * @param {string} file\n   * @param {TraceMap} [sourceMap]\n   * @param {Compilation[\"requestShortener\"]} [requestShortener]\n   * @returns {Error}\n   */\n  static buildError(error, file, sourceMap, requestShortener) {\n    /**\n     * @type {Error & { file?: string }}\n     */\n    let builtError;\n    if (typeof error === \"string\") {\n      builtError = new Error(`${file} from Terser plugin\\n${error}`);\n      builtError.file = file;\n      return builtError;\n    }\n    if (error.line) {\n      const original = sourceMap && getTraceMapping().originalPositionFor(sourceMap, {\n        line: error.line,\n        column: error.col\n      });\n      if (original && original.source && requestShortener) {\n        builtError = new Error(`${file} from Terser plugin\\n${error.message} [${requestShortener.shorten(original.source)}:${original.line},${original.column}][${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n        builtError.file = file;\n        return builtError;\n      }\n      builtError = new Error(`${file} from Terser plugin\\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n      builtError.file = file;\n      return builtError;\n    }\n    if (error.stack) {\n      builtError = new Error(`${file} from Terser plugin\\n${typeof error.message !== \"undefined\" ? error.message : \"\"}\\n${error.stack}`);\n      builtError.file = file;\n      return builtError;\n    }\n    builtError = new Error(`${file} from Terser plugin\\n${error.message}`);\n    builtError.file = file;\n    return builtError;\n  }\n\n  /**\n   * @private\n   * @param {Parallel} parallel\n   * @returns {number}\n   */\n  static getAvailableNumberOfCores(parallel) {\n    // In some cases cpus() returns undefined\n    // https://github.com/nodejs/node/issues/19022\n    const cpus = os.cpus() || {\n      length: 1\n    };\n    return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);\n  }\n\n  /**\n   * @private\n   * @param {Compiler} compiler\n   * @param {Compilation} compilation\n   * @param {Record<string, import(\"webpack\").sources.Source>} assets\n   * @param {{availableNumberOfCores: number}} optimizeOptions\n   * @returns {Promise<void>}\n   */\n  async optimize(compiler, compilation, assets, optimizeOptions) {\n    const cache = compilation.getCache(\"TerserWebpackPlugin\");\n    let numberOfAssets = 0;\n    const assetsForMinify = await Promise.all(Object.keys(assets).filter(name => {\n      const {\n        info\n      } = /** @type {Asset} */compilation.getAsset(name);\n      if (\n      // Skip double minimize assets from child compilation\n      info.minimized ||\n      // Skip minimizing for extracted comments assets\n      info.extractedComments) {\n        return false;\n      }\n      if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind(\n      // eslint-disable-next-line no-undefined\n      undefined, this.options)(name)) {\n        return false;\n      }\n      return true;\n    }).map(async name => {\n      const {\n        info,\n        source\n      } = /** @type {Asset} */\n      compilation.getAsset(name);\n      const eTag = cache.getLazyHashedEtag(source);\n      const cacheItem = cache.getItemCache(name, eTag);\n      const output = await cacheItem.getPromise();\n      if (!output) {\n        numberOfAssets += 1;\n      }\n      return {\n        name,\n        info,\n        inputSource: source,\n        output,\n        cacheItem\n      };\n    }));\n    if (assetsForMinify.length === 0) {\n      return;\n    }\n\n    /** @type {undefined | (() => MinimizerWorker<T>)} */\n    let getWorker;\n    /** @type {undefined | MinimizerWorker<T>} */\n    let initializedWorker;\n    /** @type {undefined | number} */\n    let numberOfWorkers;\n    if (optimizeOptions.availableNumberOfCores > 0) {\n      // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory\n      numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores);\n      // eslint-disable-next-line consistent-return\n      getWorker = () => {\n        if (initializedWorker) {\n          return initializedWorker;\n        }\n\n        // eslint-disable-next-line global-require\n        const {\n          Worker\n        } = require(\"jest-worker\");\n        initializedWorker = /** @type {MinimizerWorker<T>} */\n\n        new Worker(require.resolve(\"./minify\"), {\n          numWorkers: numberOfWorkers,\n          enableWorkerThreads: true\n        });\n\n        // https://github.com/facebook/jest/issues/8872#issuecomment-524822081\n        const workerStdout = initializedWorker.getStdout();\n        if (workerStdout) {\n          workerStdout.on(\"data\", chunk => process.stdout.write(chunk));\n        }\n        const workerStderr = initializedWorker.getStderr();\n        if (workerStderr) {\n          workerStderr.on(\"data\", chunk => process.stderr.write(chunk));\n        }\n        return initializedWorker;\n      };\n    }\n    const {\n      SourceMapSource,\n      ConcatSource,\n      RawSource\n    } = compiler.webpack.sources;\n\n    /** @typedef {{ extractedCommentsSource : import(\"webpack\").sources.RawSource, commentsFilename: string }} ExtractedCommentsInfo */\n    /** @type {Map<string, ExtractedCommentsInfo>} */\n    const allExtractedComments = new Map();\n    const scheduledTasks = [];\n    for (const asset of assetsForMinify) {\n      scheduledTasks.push(async () => {\n        const {\n          name,\n          inputSource,\n          info,\n          cacheItem\n        } = asset;\n        let {\n          output\n        } = asset;\n        if (!output) {\n          let input;\n          /** @type {SourceMapInput | undefined} */\n          let inputSourceMap;\n          const {\n            source: sourceFromInputSource,\n            map\n          } = inputSource.sourceAndMap();\n          input = sourceFromInputSource;\n          if (map) {\n            if (!TerserPlugin.isSourceMap(map)) {\n              compilation.warnings.push( /** @type {WebpackError} */\n              new Error(`${name} contains invalid source map`));\n            } else {\n              inputSourceMap = /** @type {SourceMapInput} */map;\n            }\n          }\n          if (Buffer.isBuffer(input)) {\n            input = input.toString();\n          }\n\n          /**\n           * @type {InternalOptions<T>}\n           */\n          const options = {\n            name,\n            input,\n            inputSourceMap,\n            minimizer: {\n              implementation: this.options.minimizer.implementation,\n              // @ts-ignore https://github.com/Microsoft/TypeScript/issues/10727\n              options: {\n                ...this.options.minimizer.options\n              }\n            },\n            extractComments: this.options.extractComments\n          };\n          if (typeof options.minimizer.options.module === \"undefined\") {\n            if (typeof info.javascriptModule !== \"undefined\") {\n              options.minimizer.options.module = info.javascriptModule;\n            } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = true;\n            } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = false;\n            }\n          }\n          if (typeof options.minimizer.options.ecma === \"undefined\") {\n            options.minimizer.options.ecma = TerserPlugin.getEcmaVersion(compiler.options.output.environment || {});\n          }\n          try {\n            output = await (getWorker ? getWorker().transform(getSerializeJavascript()(options)) : minify(options));\n          } catch (error) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            compilation.errors.push( /** @type {WebpackError} */\n\n            TerserPlugin.buildError(error, name, hasSourceMap ? new (getTraceMapping().TraceMap)( /** @type {SourceMapInput} */inputSourceMap) :\n            // eslint-disable-next-line no-undefined\n            undefined,\n            // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n            return;\n          }\n          if (typeof output.code === \"undefined\") {\n            compilation.errors.push( /** @type {WebpackError} */\n\n            new Error(`${name} from Terser plugin\\nMinimizer doesn't return result`));\n            return;\n          }\n          if (output.warnings && output.warnings.length > 0) {\n            output.warnings = output.warnings.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildWarning(item, name));\n          }\n          if (output.errors && output.errors.length > 0) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            output.errors = output.errors.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildError(item, name, hasSourceMap ? new (getTraceMapping().TraceMap)( /** @type {SourceMapInput} */inputSourceMap) :\n            // eslint-disable-next-line no-undefined\n            undefined,\n            // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n          }\n          let shebang;\n          if ( /** @type {ExtractCommentsObject} */\n          this.options.extractComments.banner !== false && output.extractedComments && output.extractedComments.length > 0 && output.code.startsWith(\"#!\")) {\n            const firstNewlinePosition = output.code.indexOf(\"\\n\");\n            shebang = output.code.substring(0, firstNewlinePosition);\n            output.code = output.code.substring(firstNewlinePosition + 1);\n          }\n          if (output.map) {\n            output.source = new SourceMapSource(output.code, name, output.map, input, /** @type {SourceMapInput} */inputSourceMap, true);\n          } else {\n            output.source = new RawSource(output.code);\n          }\n          if (output.extractedComments && output.extractedComments.length > 0) {\n            const commentsFilename = /** @type {ExtractCommentsObject} */\n            this.options.extractComments.filename || \"[file].LICENSE.txt[query]\";\n            let query = \"\";\n            let filename = name;\n            const querySplit = filename.indexOf(\"?\");\n            if (querySplit >= 0) {\n              query = filename.slice(querySplit);\n              filename = filename.slice(0, querySplit);\n            }\n            const lastSlashIndex = filename.lastIndexOf(\"/\");\n            const basename = lastSlashIndex === -1 ? filename : filename.slice(lastSlashIndex + 1);\n            const data = {\n              filename,\n              basename,\n              query\n            };\n            output.commentsFilename = compilation.getPath(commentsFilename, data);\n            let banner;\n\n            // Add a banner to the original file\n            if ( /** @type {ExtractCommentsObject} */\n            this.options.extractComments.banner !== false) {\n              banner = /** @type {ExtractCommentsObject} */\n              this.options.extractComments.banner || `For license information please see ${path.relative(path.dirname(name), output.commentsFilename).replace(/\\\\/g, \"/\")}`;\n              if (typeof banner === \"function\") {\n                banner = banner(output.commentsFilename);\n              }\n              if (banner) {\n                output.source = new ConcatSource(shebang ? `${shebang}\\n` : \"\", `/*! ${banner} */\\n`, output.source);\n              }\n            }\n            const extractedCommentsString = output.extractedComments.sort().join(\"\\n\\n\");\n            output.extractedCommentsSource = new RawSource(`${extractedCommentsString}\\n`);\n          }\n          await cacheItem.storePromise({\n            source: output.source,\n            errors: output.errors,\n            warnings: output.warnings,\n            commentsFilename: output.commentsFilename,\n            extractedCommentsSource: output.extractedCommentsSource\n          });\n        }\n        if (output.warnings && output.warnings.length > 0) {\n          for (const warning of output.warnings) {\n            compilation.warnings.push( /** @type {WebpackError} */warning);\n          }\n        }\n        if (output.errors && output.errors.length > 0) {\n          for (const error of output.errors) {\n            compilation.errors.push( /** @type {WebpackError} */error);\n          }\n        }\n\n        /** @type {Record<string, any>} */\n        const newInfo = {\n          minimized: true\n        };\n        const {\n          source,\n          extractedCommentsSource\n        } = output;\n\n        // Write extracted comments to commentsFilename\n        if (extractedCommentsSource) {\n          const {\n            commentsFilename\n          } = output;\n          newInfo.related = {\n            license: commentsFilename\n          };\n          allExtractedComments.set(name, {\n            extractedCommentsSource,\n            commentsFilename\n          });\n        }\n        compilation.updateAsset(name, source, newInfo);\n      });\n    }\n    const limit = getWorker && numberOfAssets > 0 ? /** @type {number} */numberOfWorkers : scheduledTasks.length;\n    await throttleAll(limit, scheduledTasks);\n    if (initializedWorker) {\n      await initializedWorker.end();\n    }\n\n    /** @typedef {{ source: import(\"webpack\").sources.Source, commentsFilename: string, from: string }} ExtractedCommentsInfoWIthFrom */\n    await Array.from(allExtractedComments).sort().reduce(\n    /**\n     * @param {Promise<unknown>} previousPromise\n     * @param {[string, ExtractedCommentsInfo]} extractedComments\n     * @returns {Promise<ExtractedCommentsInfoWIthFrom>}\n     */\n    async (previousPromise, [from, value]) => {\n      const previous = /** @type {ExtractedCommentsInfoWIthFrom | undefined} **/\n      await previousPromise;\n      const {\n        commentsFilename,\n        extractedCommentsSource\n      } = value;\n      if (previous && previous.commentsFilename === commentsFilename) {\n        const {\n          from: previousFrom,\n          source: prevSource\n        } = previous;\n        const mergedName = `${previousFrom}|${from}`;\n        const name = `${commentsFilename}|${mergedName}`;\n        const eTag = [prevSource, extractedCommentsSource].map(item => cache.getLazyHashedEtag(item)).reduce((previousValue, currentValue) => cache.mergeEtags(previousValue, currentValue));\n        let source = await cache.getPromise(name, eTag);\n        if (!source) {\n          source = new ConcatSource(Array.from(new Set([... /** @type {string}*/prevSource.source().split(\"\\n\\n\"), ... /** @type {string}*/extractedCommentsSource.source().split(\"\\n\\n\")])).join(\"\\n\\n\"));\n          await cache.storePromise(name, eTag, source);\n        }\n        compilation.updateAsset(commentsFilename, source);\n        return {\n          source,\n          commentsFilename,\n          from: mergedName\n        };\n      }\n      const existingAsset = compilation.getAsset(commentsFilename);\n      if (existingAsset) {\n        return {\n          source: existingAsset.source,\n          commentsFilename,\n          from: commentsFilename\n        };\n      }\n      compilation.emitAsset(commentsFilename, extractedCommentsSource, {\n        extractedComments: true\n      });\n      return {\n        source: extractedCommentsSource,\n        commentsFilename,\n        from\n      };\n    }, /** @type {Promise<unknown>} */Promise.resolve());\n  }\n\n  /**\n   * @private\n   * @param {any} environment\n   * @returns {TerserECMA}\n   */\n  static getEcmaVersion(environment) {\n    // ES 6th\n    if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\n      return 2015;\n    }\n\n    // ES 11th\n    if (environment.bigIntLiteral || environment.dynamicImport) {\n      return 2020;\n    }\n    return 5;\n  }\n\n  /**\n   * @param {Compiler} compiler\n   * @returns {void}\n   */\n  apply(compiler) {\n    const pluginName = this.constructor.name;\n    const availableNumberOfCores = TerserPlugin.getAvailableNumberOfCores(this.options.parallel);\n    compiler.hooks.compilation.tap(pluginName, compilation => {\n      const hooks = compiler.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n      const data = getSerializeJavascript()({\n        minimizer: typeof this.options.minimizer.implementation.getMinimizerVersion !== \"undefined\" ? this.options.minimizer.implementation.getMinimizerVersion() || \"0.0.0\" : \"0.0.0\",\n        options: this.options.minimizer.options\n      });\n      hooks.chunkHash.tap(pluginName, (chunk, hash) => {\n        hash.update(\"TerserPlugin\");\n        hash.update(data);\n      });\n      compilation.hooks.processAssets.tapPromise({\n        name: pluginName,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n        additionalAssets: true\n      }, assets => this.optimize(compiler, compilation, assets, {\n        availableNumberOfCores\n      }));\n      compilation.hooks.statsPrinter.tap(pluginName, stats => {\n        stats.hooks.print.for(\"asset.info.minimized\").tap(\"terser-webpack-plugin\", (minimized, {\n          green,\n          formatFlag\n        }) => minimized ? /** @type {Function} */green( /** @type {Function} */formatFlag(\"minimized\")) : \"\");\n      });\n    });\n  }\n}\nTerserPlugin.terserMinify = terserMinify;\nTerserPlugin.uglifyJsMinify = uglifyJsMinify;\nTerserPlugin.swcMinify = swcMinify;\nTerserPlugin.esbuildMinify = esbuildMinify;\nmodule.exports = TerserPlugin;"]},"metadata":{},"sourceType":"script"}