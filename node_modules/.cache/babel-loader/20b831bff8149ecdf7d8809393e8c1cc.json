{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\"use strict\";\n\nconst {\n  RawSource\n} = require(\"webpack-sources\");\n\nconst ConcatenationScope = require(\"../ConcatenationScope\");\n\nconst Generator = require(\"../Generator\");\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n\n/** @typedef {import(\"../Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\n\nconst TYPES = new Set([\"javascript\"]);\n\nclass AssetSourceGenerator extends Generator {\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source} generated code\n   */\n  generate(module, _ref) {\n    let {\n      concatenationScope,\n      chunkGraph,\n      runtimeTemplate,\n      runtimeRequirements\n    } = _ref;\n    const originalSource = module.originalSource();\n\n    if (!originalSource) {\n      return new RawSource(\"\");\n    }\n\n    const content = originalSource.source();\n    let encodedSource;\n\n    if (typeof content === \"string\") {\n      encodedSource = content;\n    } else {\n      encodedSource = content.toString(\"utf-8\");\n    }\n\n    let sourceContent;\n\n    if (concatenationScope) {\n      concatenationScope.registerNamespaceExport(ConcatenationScope.NAMESPACE_OBJECT_EXPORT);\n      sourceContent = `${runtimeTemplate.supportsConst() ? \"const\" : \"var\"} ${ConcatenationScope.NAMESPACE_OBJECT_EXPORT} = ${JSON.stringify(encodedSource)};`;\n    } else {\n      runtimeRequirements.add(RuntimeGlobals.module);\n      sourceContent = `${RuntimeGlobals.module}.exports = ${JSON.stringify(encodedSource)};`;\n    }\n\n    return new RawSource(sourceContent);\n  }\n  /**\n   * @param {NormalModule} module module for which the bailout reason should be determined\n   * @param {ConcatenationBailoutReasonContext} context context\n   * @returns {string | undefined} reason why this module can't be concatenated, undefined when it can be concatenated\n   */\n\n\n  getConcatenationBailoutReason(module, context) {\n    return undefined;\n  }\n  /**\n   * @param {NormalModule} module fresh module\n   * @returns {Set<string>} available types (do not mutate)\n   */\n\n\n  getTypes(module) {\n    return TYPES;\n  }\n  /**\n   * @param {NormalModule} module the module\n   * @param {string=} type source type\n   * @returns {number} estimate size of the module\n   */\n\n\n  getSize(module, type) {\n    const originalSource = module.originalSource();\n\n    if (!originalSource) {\n      return 0;\n    } // Example: m.exports=\"abcd\"\n\n\n    return originalSource.size() + 12;\n  }\n\n}\n\nmodule.exports = AssetSourceGenerator;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/asset/AssetSourceGenerator.js"],"names":["RawSource","require","ConcatenationScope","Generator","RuntimeGlobals","TYPES","Set","AssetSourceGenerator","generate","module","concatenationScope","chunkGraph","runtimeTemplate","runtimeRequirements","originalSource","content","source","encodedSource","toString","sourceContent","registerNamespaceExport","NAMESPACE_OBJECT_EXPORT","supportsConst","JSON","stringify","add","getConcatenationBailoutReason","context","undefined","getTypes","getSize","type","size","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,uBAAD,CAAlC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,mBAAD,CAA9B;AAEA;;AACA;;AACA;;AACA;;;AAEA,MAAMI,KAAK,GAAG,IAAIC,GAAJ,CAAQ,CAAC,YAAD,CAAR,CAAd;;AAEA,MAAMC,oBAAN,SAAmCJ,SAAnC,CAA6C;AAC5C;AACD;AACA;AACA;AACA;AACCK,EAAAA,QAAQ,CACPC,MADO,QAGN;AAAA,QADD;AAAEC,MAAAA,kBAAF;AAAsBC,MAAAA,UAAtB;AAAkCC,MAAAA,eAAlC;AAAmDC,MAAAA;AAAnD,KACC;AACD,UAAMC,cAAc,GAAGL,MAAM,CAACK,cAAP,EAAvB;;AAEA,QAAI,CAACA,cAAL,EAAqB;AACpB,aAAO,IAAId,SAAJ,CAAc,EAAd,CAAP;AACA;;AAED,UAAMe,OAAO,GAAGD,cAAc,CAACE,MAAf,EAAhB;AAEA,QAAIC,aAAJ;;AACA,QAAI,OAAOF,OAAP,KAAmB,QAAvB,EAAiC;AAChCE,MAAAA,aAAa,GAAGF,OAAhB;AACA,KAFD,MAEO;AACNE,MAAAA,aAAa,GAAGF,OAAO,CAACG,QAAR,CAAiB,OAAjB,CAAhB;AACA;;AAED,QAAIC,aAAJ;;AACA,QAAIT,kBAAJ,EAAwB;AACvBA,MAAAA,kBAAkB,CAACU,uBAAnB,CACClB,kBAAkB,CAACmB,uBADpB;AAGAF,MAAAA,aAAa,GAAI,GAAEP,eAAe,CAACU,aAAhB,KAAkC,OAAlC,GAA4C,KAAM,IACpEpB,kBAAkB,CAACmB,uBACnB,MAAKE,IAAI,CAACC,SAAL,CAAeP,aAAf,CAA8B,GAFpC;AAGA,KAPD,MAOO;AACNJ,MAAAA,mBAAmB,CAACY,GAApB,CAAwBrB,cAAc,CAACK,MAAvC;AACAU,MAAAA,aAAa,GAAI,GAAEf,cAAc,CAACK,MAAO,cAAac,IAAI,CAACC,SAAL,CACrDP,aADqD,CAEpD,GAFF;AAGA;;AACD,WAAO,IAAIjB,SAAJ,CAAcmB,aAAd,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCO,EAAAA,6BAA6B,CAACjB,MAAD,EAASkB,OAAT,EAAkB;AAC9C,WAAOC,SAAP;AACA;AAED;AACD;AACA;AACA;;;AACCC,EAAAA,QAAQ,CAACpB,MAAD,EAAS;AAChB,WAAOJ,KAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCyB,EAAAA,OAAO,CAACrB,MAAD,EAASsB,IAAT,EAAe;AACrB,UAAMjB,cAAc,GAAGL,MAAM,CAACK,cAAP,EAAvB;;AAEA,QAAI,CAACA,cAAL,EAAqB;AACpB,aAAO,CAAP;AACA,KALoB,CAOrB;;;AACA,WAAOA,cAAc,CAACkB,IAAf,KAAwB,EAA/B;AACA;;AAzE2C;;AA4E7CvB,MAAM,CAACwB,OAAP,GAAiB1B,oBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst { RawSource } = require(\"webpack-sources\");\nconst ConcatenationScope = require(\"../ConcatenationScope\");\nconst Generator = require(\"../Generator\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\nconst TYPES = new Set([\"javascript\"]);\n\nclass AssetSourceGenerator extends Generator {\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source} generated code\n\t */\n\tgenerate(\n\t\tmodule,\n\t\t{ concatenationScope, chunkGraph, runtimeTemplate, runtimeRequirements }\n\t) {\n\t\tconst originalSource = module.originalSource();\n\n\t\tif (!originalSource) {\n\t\t\treturn new RawSource(\"\");\n\t\t}\n\n\t\tconst content = originalSource.source();\n\n\t\tlet encodedSource;\n\t\tif (typeof content === \"string\") {\n\t\t\tencodedSource = content;\n\t\t} else {\n\t\t\tencodedSource = content.toString(\"utf-8\");\n\t\t}\n\n\t\tlet sourceContent;\n\t\tif (concatenationScope) {\n\t\t\tconcatenationScope.registerNamespaceExport(\n\t\t\t\tConcatenationScope.NAMESPACE_OBJECT_EXPORT\n\t\t\t);\n\t\t\tsourceContent = `${runtimeTemplate.supportsConst() ? \"const\" : \"var\"} ${\n\t\t\t\tConcatenationScope.NAMESPACE_OBJECT_EXPORT\n\t\t\t} = ${JSON.stringify(encodedSource)};`;\n\t\t} else {\n\t\t\truntimeRequirements.add(RuntimeGlobals.module);\n\t\t\tsourceContent = `${RuntimeGlobals.module}.exports = ${JSON.stringify(\n\t\t\t\tencodedSource\n\t\t\t)};`;\n\t\t}\n\t\treturn new RawSource(sourceContent);\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the bailout reason should be determined\n\t * @param {ConcatenationBailoutReasonContext} context context\n\t * @returns {string | undefined} reason why this module can't be concatenated, undefined when it can be concatenated\n\t */\n\tgetConcatenationBailoutReason(module, context) {\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * @param {NormalModule} module fresh module\n\t * @returns {Set<string>} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\treturn TYPES;\n\t}\n\n\t/**\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\tconst originalSource = module.originalSource();\n\n\t\tif (!originalSource) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Example: m.exports=\"abcd\"\n\t\treturn originalSource.size() + 12;\n\t}\n}\n\nmodule.exports = AssetSourceGenerator;\n"]},"metadata":{},"sourceType":"script"}