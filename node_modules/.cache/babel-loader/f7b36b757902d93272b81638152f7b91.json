{"ast":null,"code":"import t from \"../lib/LdrsBaseElement.js\";\nvar e = \":host{align-items:center;display:inline-flex;flex-shrink:0;height:var(--uib-size);justify-content:center;width:var(--uib-size)}:host([hidden]){display:none}.container{height:var(--uib-size);overflow:visible;transform-origin:center;width:var(--uib-size);will-change:transform}.car{stroke:var(--uib-color);stroke-dasharray:var(--uib-dash),var(--uib-gap);stroke-dashoffset:0;animation:travel var(--uib-speed) linear infinite;will-change:stroke-dasharray,stroke-dashoffset}.car,.track{fill:none;transition:stroke .5s ease}.track{stroke:var(--uib-color);opacity:var(--uib-bg-opacity)}@keyframes travel{0%{stroke-dashoffset:0}to{stroke-dashoffset:-100}}\";\n\nclass s extends t {\n  _attributes = [\"size\", \"color\", \"speed\", \"stroke\", \"stroke-length\", \"bg-opacity\"];\n  size;\n  color;\n  speed;\n  stroke;\n  \"stroke-length\";\n  \"bg-opacity\";\n\n  static get observedAttributes() {\n    return [\"size\", \"color\", \"stroke\", \"stroke-length\", \"speed\", \"bg-opacity\"];\n  }\n\n  constructor() {\n    super(), this.storePropsToUpgrade(this._attributes), this.reflect(this._attributes);\n  }\n\n  connectedCallback() {\n    this.upgradeStoredProps(), this.applyDefaultProps({\n      size: 35,\n      color: \"black\",\n      stroke: 5,\n      \"stroke-length\": .25,\n      speed: 1.2,\n      \"bg-opacity\": .1\n    });\n    const t = parseInt(this.size),\n          s = parseInt(this.stroke),\n          i = s / 2,\n          r = Math.max(t - s / 2, 0);\n    this.template.innerHTML = `\\n      <svg\\n        class=\"container\"\\n        viewBox=\"0 0 ${this.size} ${this.size}\"\\n        height=\"${this.size}\"\\n        width=\"${this.size}\"\\n      >\\n        <rect \\n          class=\"track\"\\n          x=\"${i}\" \\n          y=\"${i}\" \\n          fill=\"none\" \\n          stroke-width=\"${this.stroke}px\" \\n          width=\"${r}\" \\n          height=\"${r}\"\\n        />\\n        <rect \\n          class=\"car\"\\n          x=\"${i}\" \\n          y=\"${i}\" \\n          fill=\"none\" \\n          stroke-width=\"${this.stroke}px\" \\n          width=\"${r}\" \\n          height=\"${r}\"\\n          pathlength=\"100\"\\n        />\\n      </svg>\\n      <style>\\n        :host{\\n          --uib-size: ${this.size}px;\\n          --uib-color: ${this.color};\\n          --uib-speed: ${this.speed}s;\\n          --uib-dash: ${100 * parseFloat(this[\"stroke-length\"])};\\n          --uib-gap: ${100 - 100 * parseFloat(this[\"stroke-length\"])};\\n          --uib-bg-opacity: ${this[\"bg-opacity\"]};\\n        }\\n        ${e}\\n      </style>\\n    `, this.shadow.replaceChildren(this.template.content.cloneNode(!0));\n  }\n\n  attributeChangedCallback() {\n    const t = this.shadow.querySelector(\"style\"),\n          s = this.shadow.querySelector(\"svg\"),\n          i = this.shadow.querySelectorAll(\"rect\");\n    if (!t) return;\n    const r = parseInt(this.size),\n          n = parseInt(this.stroke),\n          o = String(n / 2),\n          a = String(Math.max(r - n / 2, 0));\n    s.setAttribute(\"height\", this.size), s.setAttribute(\"width\", this.size), s.setAttribute(\"viewBox\", `0 0 ${this.size} ${this.size}`), i.forEach(t => {\n      t.setAttribute(\"stroke-width\", this.stroke), t.setAttribute(\"width\", a), t.setAttribute(\"height\", a), t.setAttribute(\"x\", o), t.setAttribute(\"y\", o);\n    }), t.innerHTML = `\\n      :host{\\n        --uib-size: ${this.size}px;\\n        --uib-color: ${this.color};\\n        --uib-speed: ${this.speed}s;\\n        --uib-dash: ${100 * parseFloat(this[\"stroke-length\"])};\\n        --uib-gap: ${100 - 100 * parseFloat(this[\"stroke-length\"])};\\n        --uib-bg-opacity: ${this[\"bg-opacity\"]};\\n      }\\n      ${e}\\n    `;\n  }\n\n}\n\nvar i = {\n  register: function () {\n    let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"l-square\";\n    customElements.get(t) || customElements.define(t, class extends s {});\n  },\n  element: s\n};\nexport { i as default };","map":{"version":3,"mappings":"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","names":["Square","Base","_attributes","size","color","speed","stroke","observedAttributes","constructor","super","this","storePropsToUpgrade","reflect","connectedCallback","upgradeStoredProps","applyDefaultProps","sizeInt","parseInt","strokeInt","centerPoint","strokeAdjustedSize","Math","max","template","innerHTML","parseFloat","styles","shadow","replaceChildren","content","cloneNode","attributeChangedCallback","styleEl","querySelector","svgEl","squareEls","querySelectorAll","String","setAttribute","forEach","squareEl","square","register","name","customElements","get","define","element"],"sources":["/Users/zachjohnson/Desktop/React-Wordle-lesson-16/node_modules/ldrs/temp-ts-out/elements/square.js"],"sourcesContent":["import Base from '../lib/LdrsBaseElement.js';\nimport styles from './square.scss';\nclass Square extends Base {\n    _attributes = [\n        'size',\n        'color',\n        'speed',\n        'stroke',\n        'stroke-length',\n        'bg-opacity',\n    ];\n    size;\n    color;\n    speed;\n    stroke;\n    'stroke-length';\n    'bg-opacity';\n    static get observedAttributes() {\n        return ['size', 'color', 'stroke', 'stroke-length', 'speed', 'bg-opacity'];\n    }\n    constructor() {\n        super();\n        this.storePropsToUpgrade(this._attributes);\n        this.reflect(this._attributes);\n    }\n    connectedCallback() {\n        this.upgradeStoredProps();\n        this.applyDefaultProps({\n            size: 35,\n            color: 'black',\n            stroke: 5,\n            'stroke-length': 0.25,\n            speed: 1.2,\n            'bg-opacity': 0.1,\n        });\n        const sizeInt = parseInt(this.size);\n        const strokeInt = parseInt(this.stroke);\n        const centerPoint = strokeInt / 2;\n        const strokeAdjustedSize = Math.max(sizeInt - strokeInt / 2, 0);\n        this.template.innerHTML = `\n      <svg\n        class=\"container\"\n        viewBox=\"0 0 ${this.size} ${this.size}\"\n        height=\"${this.size}\"\n        width=\"${this.size}\"\n      >\n        <rect \n          class=\"track\"\n          x=\"${centerPoint}\" \n          y=\"${centerPoint}\" \n          fill=\"none\" \n          stroke-width=\"${this.stroke}px\" \n          width=\"${strokeAdjustedSize}\" \n          height=\"${strokeAdjustedSize}\"\n        />\n        <rect \n          class=\"car\"\n          x=\"${centerPoint}\" \n          y=\"${centerPoint}\" \n          fill=\"none\" \n          stroke-width=\"${this.stroke}px\" \n          width=\"${strokeAdjustedSize}\" \n          height=\"${strokeAdjustedSize}\"\n          pathlength=\"100\"\n        />\n      </svg>\n      <style>\n        :host{\n          --uib-size: ${this.size}px;\n          --uib-color: ${this.color};\n          --uib-speed: ${this.speed}s;\n          --uib-dash: ${parseFloat(this['stroke-length']) * 100};\n          --uib-gap: ${100 - parseFloat(this['stroke-length']) * 100};\n          --uib-bg-opacity: ${this['bg-opacity']};\n        }\n        ${styles}\n      </style>\n    `;\n        this.shadow.replaceChildren(this.template.content.cloneNode(true));\n    }\n    attributeChangedCallback() {\n        const styleEl = this.shadow.querySelector('style');\n        const svgEl = this.shadow.querySelector('svg');\n        const squareEls = this.shadow.querySelectorAll('rect');\n        if (!styleEl)\n            return;\n        const sizeInt = parseInt(this.size);\n        const strokeInt = parseInt(this.stroke);\n        const centerPoint = String(strokeInt / 2);\n        const strokeAdjustedSize = String(Math.max(sizeInt - strokeInt / 2, 0));\n        svgEl.setAttribute('height', this.size);\n        svgEl.setAttribute('width', this.size);\n        svgEl.setAttribute('viewBox', `0 0 ${this.size} ${this.size}`);\n        squareEls.forEach((squareEl) => {\n            squareEl.setAttribute('stroke-width', this.stroke);\n            squareEl.setAttribute('width', strokeAdjustedSize);\n            squareEl.setAttribute('height', strokeAdjustedSize);\n            squareEl.setAttribute('x', centerPoint);\n            squareEl.setAttribute('y', centerPoint);\n        });\n        styleEl.innerHTML = `\n      :host{\n        --uib-size: ${this.size}px;\n        --uib-color: ${this.color};\n        --uib-speed: ${this.speed}s;\n        --uib-dash: ${parseFloat(this['stroke-length']) * 100};\n        --uib-gap: ${100 - parseFloat(this['stroke-length']) * 100};\n        --uib-bg-opacity: ${this['bg-opacity']};\n      }\n      ${styles}\n    `;\n    }\n}\nexport default {\n    register: (name = 'l-square') => {\n        if (!customElements.get(name)) {\n            customElements.define(name, class extends Square {\n            });\n        }\n    },\n    element: Square,\n};\n"]},"metadata":{},"sourceType":"module"}