{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { isRequestOptions } from 'openai/core';\nimport * as MessagesAPI from 'openai/resources/beta/threads/messages/messages';\nimport * as FilesAPI from 'openai/resources/beta/threads/messages/files';\nimport { CursorPage } from 'openai/pagination';\nexport class Messages extends APIResource {\n  constructor() {\n    super(...arguments);\n    this.files = new FilesAPI.Files(this.client);\n  }\n  /**\n   * Create a message.\n   */\n\n\n  create(threadId, body, options) {\n    return this.post(`/threads/${threadId}/messages`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieve a message.\n   */\n\n\n  retrieve(threadId, messageId, options) {\n    return this.get(`/threads/${threadId}/messages/${messageId}`, { ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Modifies a message.\n   */\n\n\n  update(threadId, messageId, body, options) {\n    return this.post(`/threads/${threadId}/messages/${messageId}`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n\n  list(threadId) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options = arguments.length > 2 ? arguments[2] : undefined;\n\n    if (isRequestOptions(query)) {\n      return this.list(threadId, {}, query);\n    }\n\n    return this.getAPIList(`/threads/${threadId}/messages`, ThreadMessagesPage, {\n      query,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n\n}\nexport class ThreadMessagesPage extends CursorPage {}\n\n(function (Messages) {\n  Messages.ThreadMessagesPage = MessagesAPI.ThreadMessagesPage;\n  Messages.Files = FilesAPI.Files;\n  Messages.MessageFilesPage = FilesAPI.MessageFilesPage;\n})(Messages || (Messages = {}));","map":{"version":3,"mappings":"AAAA;SAGSA,mBAAmB;SACnBC,wBAAwB;OAC1B,KAAKC,iBAAiB;OACtB,KAAKC,cAAc;SACjBC,kBAAyC;AAElD,OAAM,MAAOC,QAAP,SAAwBL,WAAxB,CAAmC;AAAzCM;;AACE,iBAAwB,IAAIH,QAAQ,CAACI,KAAb,CAAmB,KAAKC,MAAxB,CAAxB;AAsED;AApEC;;;;;AAGAC,QAAM,CACJC,QADI,EAEJC,IAFI,EAGJC,OAHI,EAGyB;AAE7B,WAAO,KAAKC,IAAL,CAAU,YAAYH,QAAQ,WAA9B,EAA2C;AAChDC,UADgD;AAEhD,SAAGC,OAF6C;AAGhDE,aAAO,EAAE;AAAE,uBAAe,eAAjB;AAAkC,WAAGF,OAAO,EAAEE;AAA9C;AAHuC,KAA3C,CAAP;AAKD;AAED;;;;;AAGAC,UAAQ,CACNL,QADM,EAENM,SAFM,EAGNJ,OAHM,EAGuB;AAE7B,WAAO,KAAKK,GAAL,CAAS,YAAYP,QAAQ,aAAaM,SAAS,EAAnD,EAAuD,EAC5D,GAAGJ,OADyD;AAE5DE,aAAO,EAAE;AAAE,uBAAe,eAAjB;AAAkC,WAAGF,OAAO,EAAEE;AAA9C;AAFmD,KAAvD,CAAP;AAID;AAED;;;;;AAGAI,QAAM,CACJR,QADI,EAEJM,SAFI,EAGJL,IAHI,EAIJC,OAJI,EAIyB;AAE7B,WAAO,KAAKC,IAAL,CAAU,YAAYH,QAAQ,aAAaM,SAAS,EAApD,EAAwD;AAC7DL,UAD6D;AAE7D,SAAGC,OAF0D;AAG7DE,aAAO,EAAE;AAAE,uBAAe,eAAjB;AAAkC,WAAGF,OAAO,EAAEE;AAA9C;AAHoD,KAAxD,CAAP;AAKD;;AAWDK,MAAI,CACFT,QADE,EAG2B;AAAA,QAD7BU,KAC6B,uEADoB,EACpB;AAAA,QAA7BR,OAA6B;;AAE7B,QAAIX,gBAAgB,CAACmB,KAAD,CAApB,EAA6B;AAC3B,aAAO,KAAKD,IAAL,CAAUT,QAAV,EAAoB,EAApB,EAAwBU,KAAxB,CAAP;AACD;;AACD,WAAO,KAAKC,UAAL,CAAgB,YAAYX,QAAQ,WAApC,EAAiDY,kBAAjD,EAAqE;AAC1EF,WAD0E;AAE1E,SAAGR,OAFuE;AAG1EE,aAAO,EAAE;AAAE,uBAAe,eAAjB;AAAkC,WAAGF,OAAO,EAAEE;AAA9C;AAHiE,KAArE,CAAP;AAKD;;AAtEsC;AAyEzC,OAAM,MAAOQ,kBAAP,SAAkClB,UAAlC,CAA2D;;AAuPjE,WAAiBC,QAAjB,EAAyB;AAKTA,gCAAqBH,WAAW,CAACoB,kBAAjC;AAIAjB,mBAAQF,QAAQ,CAACI,KAAjB;AAEAF,8BAAmBF,QAAQ,CAACoB,gBAA5B;AAEf,CAbD,EAAiBlB,QAAQ,KAARA,QAAQ,MAAzB","names":["APIResource","isRequestOptions","MessagesAPI","FilesAPI","CursorPage","Messages","constructor","Files","client","create","threadId","body","options","post","headers","retrieve","messageId","get","update","list","query","getAPIList","ThreadMessagesPage","MessageFilesPage"],"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/openai/src/resources/beta/threads/messages/messages.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../../../core\";\nimport { APIResource } from \"../../../../resource\";\nimport { isRequestOptions } from \"../../../../core\";\nimport * as MessagesAPI from \"./messages\";\nimport * as FilesAPI from \"./files\";\nimport { CursorPage, type CursorPageParams } from \"../../../../pagination\";\n\nexport class Messages extends APIResource {\n  files: FilesAPI.Files = new FilesAPI.Files(this.client);\n\n  /**\n   * Create a message.\n   */\n  create(\n    threadId: string,\n    body: MessageCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ThreadMessage> {\n    return this.post(`/threads/${threadId}/messages`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieve a message.\n   */\n  retrieve(\n    threadId: string,\n    messageId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ThreadMessage> {\n    return this.get(`/threads/${threadId}/messages/${messageId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Modifies a message.\n   */\n  update(\n    threadId: string,\n    messageId: string,\n    body: MessageUpdateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ThreadMessage> {\n    return this.post(`/threads/${threadId}/messages/${messageId}`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Returns a list of messages for a given thread.\n   */\n  list(\n    threadId: string,\n    query?: MessageListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<ThreadMessagesPage, ThreadMessage>;\n  list(threadId: string, options?: Core.RequestOptions): Core.PagePromise<ThreadMessagesPage, ThreadMessage>;\n  list(\n    threadId: string,\n    query: MessageListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<ThreadMessagesPage, ThreadMessage> {\n    if (isRequestOptions(query)) {\n      return this.list(threadId, {}, query);\n    }\n    return this.getAPIList(`/threads/${threadId}/messages`, ThreadMessagesPage, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n}\n\nexport class ThreadMessagesPage extends CursorPage<ThreadMessage> {}\n\n/**\n * References an image [File](https://platform.openai.com/docs/api-reference/files)\n * in the content of a message.\n */\nexport interface MessageContentImageFile {\n  image_file: MessageContentImageFile.ImageFile;\n\n  /**\n   * Always `image_file`.\n   */\n  type: 'image_file';\n}\n\nexport namespace MessageContentImageFile {\n  export interface ImageFile {\n    /**\n     * The [File](https://platform.openai.com/docs/api-reference/files) ID of the image\n     * in the message content.\n     */\n    file_id: string;\n  }\n}\n\n/**\n * The text content that is part of a message.\n */\nexport interface MessageContentText {\n  text: MessageContentText.Text;\n\n  /**\n   * Always `text`.\n   */\n  type: 'text';\n}\n\nexport namespace MessageContentText {\n  export interface Text {\n    annotations: Array<Text.FileCitation | Text.FilePath>;\n\n    /**\n     * The data that makes up the text.\n     */\n    value: string;\n  }\n\n  export namespace Text {\n    /**\n     * A citation within the message that points to a specific quote from a specific\n     * File associated with the assistant or the message. Generated when the assistant\n     * uses the \"retrieval\" tool to search files.\n     */\n    export interface FileCitation {\n      end_index: number;\n\n      file_citation: FileCitation.FileCitation;\n\n      start_index: number;\n\n      /**\n       * The text in the message content that needs to be replaced.\n       */\n      text: string;\n\n      /**\n       * Always `file_citation`.\n       */\n      type: 'file_citation';\n    }\n\n    export namespace FileCitation {\n      export interface FileCitation {\n        /**\n         * The ID of the specific File the citation is from.\n         */\n        file_id: string;\n\n        /**\n         * The specific quote in the file.\n         */\n        quote: string;\n      }\n    }\n\n    /**\n     * A URL for the file that's generated when the assistant used the\n     * `code_interpreter` tool to generate a file.\n     */\n    export interface FilePath {\n      end_index: number;\n\n      file_path: FilePath.FilePath;\n\n      start_index: number;\n\n      /**\n       * The text in the message content that needs to be replaced.\n       */\n      text: string;\n\n      /**\n       * Always `file_path`.\n       */\n      type: 'file_path';\n    }\n\n    export namespace FilePath {\n      export interface FilePath {\n        /**\n         * The ID of the file that was generated.\n         */\n        file_id: string;\n      }\n    }\n  }\n}\n\n/**\n * Represents a message within a\n * [thread](https://platform.openai.com/docs/api-reference/threads).\n */\nexport interface ThreadMessage {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * If applicable, the ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) that\n   * authored this message.\n   */\n  assistant_id: string | null;\n\n  /**\n   * The content of the message in array of text and/or images.\n   */\n  content: Array<MessageContentImageFile | MessageContentText>;\n\n  /**\n   * The Unix timestamp (in seconds) for when the message was created.\n   */\n  created_at: number;\n\n  /**\n   * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs that\n   * the assistant should use. Useful for tools like retrieval and code_interpreter\n   * that can access files. A maximum of 10 files can be attached to a message.\n   */\n  file_ids: Array<string>;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata: unknown | null;\n\n  /**\n   * The object type, which is always `thread.message`.\n   */\n  object: 'thread.message';\n\n  /**\n   * The entity that produced the message. One of `user` or `assistant`.\n   */\n  role: 'user' | 'assistant';\n\n  /**\n   * If applicable, the ID of the\n   * [run](https://platform.openai.com/docs/api-reference/runs) associated with the\n   * authoring of this message.\n   */\n  run_id: string | null;\n\n  /**\n   * The [thread](https://platform.openai.com/docs/api-reference/threads) ID that\n   * this message belongs to.\n   */\n  thread_id: string;\n}\n\nexport interface ThreadMessageDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'thread.message.deleted';\n}\n\nexport interface MessageCreateParams {\n  /**\n   * The content of the message.\n   */\n  content: string;\n\n  /**\n   * The role of the entity that is creating the message. Currently only `user` is\n   * supported.\n   */\n  role: 'user';\n\n  /**\n   * A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that\n   * the message should use. There can be a maximum of 10 files attached to a\n   * message. Useful for tools like `retrieval` and `code_interpreter` that can\n   * access and use files.\n   */\n  file_ids?: Array<string>;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n}\n\nexport interface MessageUpdateParams {\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n}\n\nexport interface MessageListParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * ending with obj_foo, your subsequent call can include before=obj_foo in order to\n   * fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nexport namespace Messages {\n  export import MessageContentImageFile = MessagesAPI.MessageContentImageFile;\n  export import MessageContentText = MessagesAPI.MessageContentText;\n  export import ThreadMessage = MessagesAPI.ThreadMessage;\n  export import ThreadMessageDeleted = MessagesAPI.ThreadMessageDeleted;\n  export import ThreadMessagesPage = MessagesAPI.ThreadMessagesPage;\n  export import MessageCreateParams = MessagesAPI.MessageCreateParams;\n  export import MessageUpdateParams = MessagesAPI.MessageUpdateParams;\n  export import MessageListParams = MessagesAPI.MessageListParams;\n  export import Files = FilesAPI.Files;\n  export import MessageFile = FilesAPI.MessageFile;\n  export import MessageFilesPage = FilesAPI.MessageFilesPage;\n  export import FileListParams = FilesAPI.FileListParams;\n}\n"]},"metadata":{},"sourceType":"module"}