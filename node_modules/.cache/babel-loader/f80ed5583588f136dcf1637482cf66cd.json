{"ast":null,"code":"import { MultipartBody } from \"./MultipartBody.mjs\";\nexport function getRuntime() {\n  let {\n    manuallyImported\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const recommendation = manuallyImported ? `You may need to use polyfills` : `Add one of these imports before your first \\`import … from 'openai'\\`:\n- \\`import 'openai/shims/node'\\` (if you're running on Node)\n- \\`import 'openai/shims/web'\\` (otherwise)\n`;\n\n  let _fetch, _Request, _Response, _Headers;\n\n  try {\n    // @ts-ignore\n    _fetch = fetch; // @ts-ignore\n\n    _Request = Request; // @ts-ignore\n\n    _Response = Response; // @ts-ignore\n\n    _Headers = Headers;\n  } catch (error) {\n    throw new Error(`this environment is missing the following Web Fetch API type: ${error.message}. ${recommendation}`);\n  }\n\n  return {\n    kind: 'web',\n    fetch: _fetch,\n    Request: _Request,\n    Response: _Response,\n    Headers: _Headers,\n    FormData: // @ts-ignore\n    typeof FormData !== 'undefined' ? FormData : class FormData {\n      // @ts-ignore\n      constructor() {\n        throw new Error(`file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`);\n      }\n\n    },\n    Blob: typeof Blob !== 'undefined' ? Blob : class Blob {\n      constructor() {\n        throw new Error(`file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`);\n      }\n\n    },\n    File: // @ts-ignore\n    typeof File !== 'undefined' ? File : class File {\n      // @ts-ignore\n      constructor() {\n        throw new Error(`file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`);\n      }\n\n    },\n    ReadableStream: // @ts-ignore\n    typeof ReadableStream !== 'undefined' ? ReadableStream : class ReadableStream {\n      // @ts-ignore\n      constructor() {\n        throw new Error(`streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`);\n      }\n\n    },\n    getMultipartRequestOptions: async ( // @ts-ignore\n    form, opts) => ({ ...opts,\n      body: new MultipartBody(form)\n    }),\n    getDefaultAgent: url => undefined,\n    fileFromPath: () => {\n      throw new Error('The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads');\n    },\n    isFsReadStream: value => false\n  };\n}","map":{"version":3,"mappings":"SAGSA,qBAAe;AAIxB,OAAM,SAAUC,UAAV,GAA8E;AAAA,MAAzD;AAAEC;AAAF,GAAyD,uEAAF,EAAE;AAClF,QAAMC,cAAc,GAClBD,gBAAgB,GACd,+BADc,GAEd;;;CAHJ;;AAQA,MAAIE,MAAJ,EAAYC,QAAZ,EAAsBC,SAAtB,EAAiCC,QAAjC;;AACA,MAAI;AACF;AACAH,UAAM,GAAGI,KAAT,CAFE,CAGF;;AACAH,YAAQ,GAAGI,OAAX,CAJE,CAKF;;AACAH,aAAS,GAAGI,QAAZ,CANE,CAOF;;AACAH,YAAQ,GAAGI,OAAX;AACD,GATD,CASE,OAAOC,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CACJ,iEACGD,KAAa,CAACE,OACjB,KAAKX,cAAc,EAHf,CAAN;AAKD;;AAED,SAAO;AACLY,QAAI,EAAE,KADD;AAELP,SAAK,EAAEJ,MAFF;AAGLK,WAAO,EAAEJ,QAHJ;AAILK,YAAQ,EAAEJ,SAJL;AAKLK,WAAO,EAAEJ,QALJ;AAMLS,YAAQ,EACN;AACA,WAAOA,QAAP,KAAoB,WAApB,GAAkCA,QAAlC,GACE,MAAMA,QAAN,CAAc;AACZ;AACAC;AACE,cAAM,IAAIJ,KAAJ,CACJ,qFAAqFV,cAAc,EAD/F,CAAN;AAGD;;AANW,KATb;AAkBLe,QAAI,EACF,OAAOA,IAAP,KAAgB,WAAhB,GAA8BA,IAA9B,GACE,MAAMA,IAAN,CAAU;AACRD;AACE,cAAM,IAAIJ,KAAJ,CACJ,iFAAiFV,cAAc,EAD3F,CAAN;AAGD;;AALO,KApBT;AA4BLgB,QAAI,EACF;AACA,WAAOA,IAAP,KAAgB,WAAhB,GAA8BA,IAA9B,GACE,MAAMA,IAAN,CAAU;AACR;AACAF;AACE,cAAM,IAAIJ,KAAJ,CACJ,iFAAiFV,cAAc,EAD3F,CAAN;AAGD;;AANO,KA/BT;AAwCLiB,kBAAc,EACZ;AACA,WAAOA,cAAP,KAA0B,WAA1B,GAAwCA,cAAxC,GACE,MAAMA,cAAN,CAAoB;AAClB;AACAH;AACE,cAAM,IAAIJ,KAAJ,CACJ,uFAAuFV,cAAc,EADjG,CAAN;AAGD;;AANiB,KA3CnB;AAoDLkB,8BAA0B,EAAE,QAC1B;AACAC,QAF0B,EAG1BC,IAH0B,MAIM,EAChC,GAAGA,IAD6B;AAEhCC,UAAI,EAAE,IAAIxB,aAAJ,CAAkBsB,IAAlB;AAF0B,KAJN,CApDvB;AA4DLG,mBAAe,EAAGC,GAAD,IAAiBC,SA5D7B;AA6DLC,gBAAY,EAAE,MAAK;AACjB,YAAM,IAAIf,KAAJ,CACJ,gJADI,CAAN;AAGD,KAjEI;AAkELgB,kBAAc,EAAGC,KAAD,IAAgB;AAlE3B,GAAP;AAoED","names":["MultipartBody","getRuntime","manuallyImported","recommendation","_fetch","_Request","_Response","_Headers","fetch","Request","Response","Headers","error","Error","message","kind","FormData","constructor","Blob","File","ReadableStream","getMultipartRequestOptions","form","opts","body","getDefaultAgent","url","undefined","fileFromPath","isFsReadStream","value"],"sources":["/Users/zachjohnson/Desktop/React-Wordle-lesson-16/node_modules/openai/src/_shims/web-runtime.ts"],"sourcesContent":["/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport { MultipartBody } from './MultipartBody';\nimport { type RequestOptions } from '../core';\nimport { type Shims } from './registry';\n\nexport function getRuntime({ manuallyImported }: { manuallyImported?: boolean } = {}): Shims {\n  const recommendation =\n    manuallyImported ?\n      `You may need to use polyfills`\n    : `Add one of these imports before your first \\`import … from 'openai'\\`:\n- \\`import 'openai/shims/node'\\` (if you're running on Node)\n- \\`import 'openai/shims/web'\\` (otherwise)\n`;\n\n  let _fetch, _Request, _Response, _Headers;\n  try {\n    // @ts-ignore\n    _fetch = fetch;\n    // @ts-ignore\n    _Request = Request;\n    // @ts-ignore\n    _Response = Response;\n    // @ts-ignore\n    _Headers = Headers;\n  } catch (error) {\n    throw new Error(\n      `this environment is missing the following Web Fetch API type: ${\n        (error as any).message\n      }. ${recommendation}`,\n    );\n  }\n\n  return {\n    kind: 'web',\n    fetch: _fetch,\n    Request: _Request,\n    Response: _Response,\n    Headers: _Headers,\n    FormData:\n      // @ts-ignore\n      typeof FormData !== 'undefined' ? FormData : (\n        class FormData {\n          // @ts-ignore\n          constructor() {\n            throw new Error(\n              `file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`,\n            );\n          }\n        }\n      ),\n    Blob:\n      typeof Blob !== 'undefined' ? Blob : (\n        class Blob {\n          constructor() {\n            throw new Error(\n              `file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`,\n            );\n          }\n        }\n      ),\n    File:\n      // @ts-ignore\n      typeof File !== 'undefined' ? File : (\n        class File {\n          // @ts-ignore\n          constructor() {\n            throw new Error(\n              `file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`,\n            );\n          }\n        }\n      ),\n    ReadableStream:\n      // @ts-ignore\n      typeof ReadableStream !== 'undefined' ? ReadableStream : (\n        class ReadableStream {\n          // @ts-ignore\n          constructor() {\n            throw new Error(\n              `streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`,\n            );\n          }\n        }\n      ),\n    getMultipartRequestOptions: async <T extends {} = Record<string, unknown>>(\n      // @ts-ignore\n      form: FormData,\n      opts: RequestOptions<T>,\n    ): Promise<RequestOptions<T>> => ({\n      ...opts,\n      body: new MultipartBody(form) as any,\n    }),\n    getDefaultAgent: (url: string) => undefined,\n    fileFromPath: () => {\n      throw new Error(\n        'The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads',\n      );\n    },\n    isFsReadStream: (value: any) => false,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}