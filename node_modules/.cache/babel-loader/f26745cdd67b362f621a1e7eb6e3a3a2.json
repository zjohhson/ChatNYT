{"ast":null,"code":"var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar _ChatCompletionStream_instances, _ChatCompletionStream_currentChatCompletionSnapshot, _ChatCompletionStream_beginRequest, _ChatCompletionStream_addChunk, _ChatCompletionStream_endRequest, _ChatCompletionStream_accumulateChatCompletion;\n\nimport { OpenAIError, APIUserAbortError } from 'openai/error';\nimport { AbstractChatCompletionRunner } from \"./AbstractChatCompletionRunner.mjs\";\nimport { Stream } from 'openai/streaming';\nexport class ChatCompletionStream extends AbstractChatCompletionRunner {\n  constructor() {\n    super(...arguments);\n\n    _ChatCompletionStream_instances.add(this);\n\n    _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);\n  }\n\n  get currentChatCompletionSnapshot() {\n    return __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n  }\n  /**\n   * Intended for use on the frontend, consuming a stream produced with\n   * `.toReadableStream()` on the backend.\n   *\n   * Note that messages sent to the model do not appear in `.on('message')`\n   * in this context.\n   */\n\n\n  static fromReadableStream(stream) {\n    const runner = new ChatCompletionStream();\n\n    runner._run(() => runner._fromReadableStream(stream));\n\n    return runner;\n  }\n\n  static createChatCompletion(completions, params, options) {\n    const runner = new ChatCompletionStream();\n\n    runner._run(() => runner._runChatCompletion(completions, { ...params,\n      stream: true\n    }, options));\n\n    return runner;\n  }\n\n  async _createChatCompletion(completions, params, options) {\n    const signal = options?.signal;\n\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n\n    __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n\n    const stream = await completions.create({ ...params,\n      stream: true\n    }, { ...options,\n      signal: this.controller.signal\n    });\n\n    this._connected();\n\n    for await (const chunk of stream) {\n      __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n    }\n\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n\n    return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n  }\n\n  async _fromReadableStream(readableStream, options) {\n    const signal = options?.signal;\n\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n\n    __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n\n    this._connected();\n\n    const stream = Stream.fromReadableStream(readableStream, this.controller);\n    let chatId;\n\n    for await (const chunk of stream) {\n      if (chatId && chatId !== chunk.id) {\n        // A new request has been made.\n        this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n      }\n\n      __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n\n      chatId = chunk.id;\n    }\n\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n\n    return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n  }\n\n  [(_ChatCompletionStream_currentChatCompletionSnapshot = new WeakMap(), _ChatCompletionStream_instances = new WeakSet(), _ChatCompletionStream_beginRequest = function _ChatCompletionStream_beginRequest() {\n    if (this.ended) return;\n\n    __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n  }, _ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk(chunk) {\n    if (this.ended) return;\n\n    const completion = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_accumulateChatCompletion).call(this, chunk);\n\n    this._emit('chunk', chunk, completion);\n\n    const delta = chunk.choices[0]?.delta.content;\n    const snapshot = completion.choices[0]?.message;\n\n    if (delta != null && snapshot?.role === 'assistant' && snapshot?.content) {\n      this._emit('content', delta, snapshot.content);\n    }\n  }, _ChatCompletionStream_endRequest = function _ChatCompletionStream_endRequest() {\n    if (this.ended) {\n      throw new OpenAIError(`stream has ended, this shouldn't happen`);\n    }\n\n    const snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n\n    if (!snapshot) {\n      throw new OpenAIError(`request ended without sending any chunks`);\n    }\n\n    __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n\n    return finalizeChatCompletion(snapshot);\n  }, _ChatCompletionStream_accumulateChatCompletion = function _ChatCompletionStream_accumulateChatCompletion(chunk) {\n    let snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n\n    if (!snapshot) {\n      const {\n        choices,\n        ...rest\n      } = chunk;\n\n      __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, snapshot = { ...rest,\n        choices: []\n      }, \"f\");\n    }\n\n    for (const {\n      delta,\n      finish_reason,\n      index\n    } of chunk.choices) {\n      let choice = snapshot.choices[index];\n      if (!choice) snapshot.choices[index] = choice = {\n        finish_reason,\n        index,\n        message: delta\n      };else {\n        if (finish_reason) choice.finish_reason = finish_reason;\n        const {\n          content,\n          function_call,\n          role\n        } = delta;\n        if (content) choice.message.content = (choice.message.content || '') + content;\n        if (role) choice.message.role = role;\n\n        if (function_call) {\n          if (!choice.message.function_call) choice.message.function_call = function_call;else {\n            if (function_call.arguments) choice.message.function_call.arguments = (choice.message.function_call.arguments || '') + function_call.arguments;\n            if (function_call.name) choice.message.function_call.name = function_call.name;\n          }\n        }\n      }\n    }\n\n    return snapshot;\n  }, Symbol.asyncIterator)]() {\n    const pushQueue = [];\n    const readQueue = [];\n    let done = false;\n    this.on('chunk', chunk => {\n      const reader = readQueue.shift();\n\n      if (reader) {\n        reader(chunk);\n      } else {\n        pushQueue.push(chunk);\n      }\n    });\n    this.on('end', () => {\n      done = true;\n\n      for (const reader of readQueue) {\n        reader(undefined);\n      }\n\n      readQueue.length = 0;\n    });\n    return {\n      next: async () => {\n        if (!pushQueue.length) {\n          if (done) {\n            return {\n              value: undefined,\n              done: true\n            };\n          }\n\n          return new Promise(resolve => readQueue.push(resolve)).then(chunk => chunk ? {\n            value: chunk,\n            done: false\n          } : {\n            value: undefined,\n            done: true\n          });\n        }\n\n        const chunk = pushQueue.shift();\n        return {\n          value: chunk,\n          done: false\n        };\n      }\n    };\n  }\n\n  toReadableStream() {\n    const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n    return stream.toReadableStream();\n  }\n\n}\n\nfunction finalizeChatCompletion(snapshot) {\n  const {\n    id,\n    choices,\n    created,\n    model\n  } = snapshot;\n  return {\n    id,\n    choices: choices.map(_ref => {\n      let {\n        message,\n        finish_reason,\n        index\n      } = _ref;\n      if (!finish_reason) throw new OpenAIError(`missing finish_reason for choice ${index}`);\n      const {\n        content = null,\n        function_call,\n        role\n      } = message;\n      if (!role) throw new OpenAIError(`missing role for choice ${index}`);\n\n      if (function_call) {\n        const {\n          arguments: args,\n          name\n        } = function_call;\n        if (args == null) throw new OpenAIError(`missing function_call.arguments for choice ${index}`);\n        if (!name) throw new OpenAIError(`missing function_call.name for choice ${index}`);\n        return {\n          message: {\n            content,\n            function_call: {\n              arguments: args,\n              name\n            },\n            role\n          },\n          finish_reason,\n          index\n        };\n      }\n\n      return {\n        message: {\n          content: content,\n          role\n        },\n        finish_reason,\n        index\n      };\n    }),\n    created,\n    model,\n    object: 'chat.completion'\n  };\n}","map":{"version":3,"mappings":"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","names":["OpenAIError","APIUserAbortError","AbstractChatCompletionRunner","Stream","ChatCompletionStream","constructor","_ChatCompletionStream_currentChatCompletionSnapshot","currentChatCompletionSnapshot","__classPrivateFieldGet","fromReadableStream","stream","runner","_run","_fromReadableStream","createChatCompletion","completions","params","options","_runChatCompletion","_createChatCompletion","signal","aborted","controller","abort","addEventListener","_ChatCompletionStream_instances","_ChatCompletionStream_beginRequest","call","create","_connected","chunk","_ChatCompletionStream_addChunk","_addChatCompletion","_ChatCompletionStream_endRequest","readableStream","chatId","id","ended","__classPrivateFieldSet","undefined","completion","_ChatCompletionStream_accumulateChatCompletion","_emit","delta","choices","content","snapshot","message","role","finalizeChatCompletion","rest","finish_reason","index","choice","function_call","arguments","name","Symbol","asyncIterator","pushQueue","readQueue","done","on","reader","shift","push","length","next","value","Promise","resolve","then","toReadableStream","bind","created","model","map","args","object"],"sources":["/Users/zachjohnson/Desktop/React-Wordle-lesson-16/node_modules/openai/src/lib/ChatCompletionStream.ts"],"sourcesContent":["import * as Core from \"../core\";\nimport { OpenAIError, APIUserAbortError } from \"../error\";\nimport {\n  Completions,\n  type ChatCompletion,\n  type ChatCompletionChunk,\n  type ChatCompletionCreateParams,\n  ChatCompletionCreateParamsBase,\n} from \"../resources/chat/completions\";\nimport {\n  AbstractChatCompletionRunner,\n  type AbstractChatCompletionRunnerEvents,\n} from './AbstractChatCompletionRunner';\nimport { type ReadableStream } from \"../_shims/index\";\nimport { Stream } from \"../streaming\";\n\nexport interface ChatCompletionStreamEvents extends AbstractChatCompletionRunnerEvents {\n  content: (contentDelta: string, contentSnapshot: string) => void;\n  chunk: (chunk: ChatCompletionChunk, snapshot: ChatCompletionSnapshot) => void;\n}\n\nexport type ChatCompletionStreamParams = Omit<ChatCompletionCreateParamsBase, 'stream'> & {\n  stream?: true;\n};\n\nexport class ChatCompletionStream\n  extends AbstractChatCompletionRunner<ChatCompletionStreamEvents>\n  implements AsyncIterable<ChatCompletionChunk>\n{\n  #currentChatCompletionSnapshot: ChatCompletionSnapshot | undefined;\n\n  get currentChatCompletionSnapshot(): ChatCompletionSnapshot | undefined {\n    return this.#currentChatCompletionSnapshot;\n  }\n\n  /**\n   * Intended for use on the frontend, consuming a stream produced with\n   * `.toReadableStream()` on the backend.\n   *\n   * Note that messages sent to the model do not appear in `.on('message')`\n   * in this context.\n   */\n  static fromReadableStream(stream: ReadableStream): ChatCompletionStream {\n    const runner = new ChatCompletionStream();\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n\n  static createChatCompletion(\n    completions: Completions,\n    params: ChatCompletionStreamParams,\n    options?: Core.RequestOptions,\n  ): ChatCompletionStream {\n    const runner = new ChatCompletionStream();\n    runner._run(() => runner._runChatCompletion(completions, { ...params, stream: true }, options));\n    return runner;\n  }\n\n  #beginRequest() {\n    if (this.ended) return;\n    this.#currentChatCompletionSnapshot = undefined;\n  }\n  #addChunk(chunk: ChatCompletionChunk) {\n    if (this.ended) return;\n    const completion = this.#accumulateChatCompletion(chunk);\n    this._emit('chunk', chunk, completion);\n    const delta = chunk.choices[0]?.delta.content;\n    const snapshot = completion.choices[0]?.message;\n    if (delta != null && snapshot?.role === 'assistant' && snapshot?.content) {\n      this._emit('content', delta, snapshot.content);\n    }\n  }\n  #endRequest(): ChatCompletion {\n    if (this.ended) {\n      throw new OpenAIError(`stream has ended, this shouldn't happen`);\n    }\n    const snapshot = this.#currentChatCompletionSnapshot;\n    if (!snapshot) {\n      throw new OpenAIError(`request ended without sending any chunks`);\n    }\n    this.#currentChatCompletionSnapshot = undefined;\n    return finalizeChatCompletion(snapshot);\n  }\n\n  protected override async _createChatCompletion(\n    completions: Completions,\n    params: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): Promise<ChatCompletion> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this.#beginRequest();\n    const stream = await completions.create(\n      { ...params, stream: true },\n      { ...options, signal: this.controller.signal },\n    );\n    this._connected();\n    for await (const chunk of stream) {\n      this.#addChunk(chunk);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this._addChatCompletion(this.#endRequest());\n  }\n\n  protected async _fromReadableStream(\n    readableStream: ReadableStream,\n    options?: Core.RequestOptions,\n  ): Promise<ChatCompletion> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this.#beginRequest();\n    this._connected();\n    const stream = Stream.fromReadableStream<ChatCompletionChunk>(readableStream, this.controller);\n    let chatId;\n    for await (const chunk of stream) {\n      if (chatId && chatId !== chunk.id) {\n        // A new request has been made.\n        this._addChatCompletion(this.#endRequest());\n      }\n\n      this.#addChunk(chunk);\n      chatId = chunk.id;\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this._addChatCompletion(this.#endRequest());\n  }\n\n  #accumulateChatCompletion(chunk: ChatCompletionChunk): ChatCompletionSnapshot {\n    let snapshot = this.#currentChatCompletionSnapshot;\n    if (!snapshot) {\n      const { choices, ...rest } = chunk;\n      this.#currentChatCompletionSnapshot = snapshot = {\n        ...rest,\n        choices: [],\n      };\n    }\n    for (const { delta, finish_reason, index } of chunk.choices) {\n      let choice = snapshot.choices[index];\n      if (!choice) snapshot.choices[index] = choice = { finish_reason, index, message: delta };\n      else {\n        if (finish_reason) choice.finish_reason = finish_reason;\n        const { content, function_call, role } = delta;\n        if (content) choice.message.content = (choice.message.content || '') + content;\n        if (role) choice.message.role = role;\n        if (function_call) {\n          if (!choice.message.function_call) choice.message.function_call = function_call;\n          else {\n            if (function_call.arguments)\n              choice.message.function_call.arguments =\n                (choice.message.function_call.arguments || '') + function_call.arguments;\n            if (function_call.name) choice.message.function_call.name = function_call.name;\n          }\n        }\n      }\n    }\n    return snapshot;\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<ChatCompletionChunk> {\n    const pushQueue: ChatCompletionChunk[] = [];\n    const readQueue: ((chunk: ChatCompletionChunk | undefined) => void)[] = [];\n    let done = false;\n\n    this.on('chunk', (chunk) => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader(chunk);\n      } else {\n        pushQueue.push(chunk);\n      }\n    });\n\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader(undefined);\n      }\n      readQueue.length = 0;\n    });\n\n    return {\n      next: async (): Promise<IteratorResult<ChatCompletionChunk>> => {\n        if (!pushQueue.length) {\n          if (done) {\n            return { value: undefined, done: true };\n          }\n          return new Promise<ChatCompletionChunk | undefined>((resolve) => readQueue.push(resolve)).then(\n            (chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }),\n          );\n        }\n        const chunk = pushQueue.shift()!;\n        return { value: chunk, done: false };\n      },\n    };\n  }\n\n  toReadableStream(): ReadableStream {\n    const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n    return stream.toReadableStream();\n  }\n}\n\nfunction finalizeChatCompletion(snapshot: ChatCompletionSnapshot): ChatCompletion {\n  const { id, choices, created, model } = snapshot;\n  return {\n    id,\n    choices: choices.map(({ message, finish_reason, index }): ChatCompletion.Choice => {\n      if (!finish_reason) throw new OpenAIError(`missing finish_reason for choice ${index}`);\n      const { content = null, function_call, role } = message;\n      if (!role) throw new OpenAIError(`missing role for choice ${index}`);\n      if (function_call) {\n        const { arguments: args, name } = function_call;\n        if (args == null) throw new OpenAIError(`missing function_call.arguments for choice ${index}`);\n        if (!name) throw new OpenAIError(`missing function_call.name for choice ${index}`);\n        return { message: { content, function_call: { arguments: args, name }, role }, finish_reason, index };\n      }\n      return { message: { content: content, role }, finish_reason, index };\n    }),\n    created,\n    model,\n    object: 'chat.completion',\n  };\n}\n\n/**\n * Represents a streamed chunk of a chat completion response returned by model,\n * based on the provided input.\n */\nexport interface ChatCompletionSnapshot {\n  /**\n   * A unique identifier for the chat completion.\n   */\n  id: string;\n\n  /**\n   * A list of chat completion choices. Can be more than one if `n` is greater\n   * than 1.\n   */\n  choices: Array<ChatCompletionSnapshot.Choice>;\n\n  /**\n   * The Unix timestamp (in seconds) of when the chat completion was created.\n   */\n  created: number;\n\n  /**\n   * The model to generate the completion.\n   */\n  model: string;\n}\n\nexport namespace ChatCompletionSnapshot {\n  export interface Choice {\n    /**\n     * A chat completion delta generated by streamed model responses.\n     */\n    message: Choice.Message;\n\n    /**\n     * The reason the model stopped generating tokens. This will be `stop` if the model\n     * hit a natural stop point or a provided stop sequence, `length` if the maximum\n     * number of tokens specified in the request was reached, `content_filter` if\n     * content was omitted due to a flag from our content filters, or `function_call`\n     * if the model called a function.\n     */\n    finish_reason: 'stop' | 'length' | 'function_call' | 'content_filter' | null;\n\n    /**\n     * The index of the choice in the list of choices.\n     */\n    index: number;\n  }\n\n  export namespace Choice {\n    /**\n     * A chat completion delta generated by streamed model responses.\n     */\n    export interface Message {\n      /**\n       * The contents of the chunk message.\n       */\n      content?: string | null;\n\n      /**\n       * The name and arguments of a function that should be called, as generated by the\n       * model.\n       */\n      function_call?: Message.FunctionCall;\n\n      /**\n       * The role of the author of this message.\n       */\n      role?: 'system' | 'user' | 'assistant' | 'function';\n    }\n\n    export namespace Message {\n      /**\n       * The name and arguments of a function that should be called, as generated by the\n       * model.\n       */\n      export interface FunctionCall {\n        /**\n         * The arguments to call the function with, as generated by the model in JSON\n         * format. Note that the model does not always generate valid JSON, and may\n         * hallucinate parameters not defined by your function schema. Validate the\n         * arguments in your code before calling your function.\n         */\n        arguments?: string;\n\n        /**\n         * The name of the function to call.\n         */\n        name?: string;\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}