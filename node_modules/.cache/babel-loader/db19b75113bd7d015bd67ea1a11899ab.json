{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  JAVASCRIPT_MODULE_TYPE_AUTO,\n  JAVASCRIPT_MODULE_TYPE_DYNAMIC\n} = require(\"../ModuleTypeConstants\");\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst {\n  approve,\n  evaluateToIdentifier,\n  evaluateToString,\n  toConstantDependency\n} = require(\"../javascript/JavascriptParserHelpers\");\n\nconst AMDDefineDependency = require(\"./AMDDefineDependency\");\n\nconst AMDDefineDependencyParserPlugin = require(\"./AMDDefineDependencyParserPlugin\");\n\nconst AMDRequireArrayDependency = require(\"./AMDRequireArrayDependency\");\n\nconst AMDRequireContextDependency = require(\"./AMDRequireContextDependency\");\n\nconst AMDRequireDependenciesBlockParserPlugin = require(\"./AMDRequireDependenciesBlockParserPlugin\");\n\nconst AMDRequireDependency = require(\"./AMDRequireDependency\");\n\nconst AMDRequireItemDependency = require(\"./AMDRequireItemDependency\");\n\nconst {\n  AMDDefineRuntimeModule,\n  AMDOptionsRuntimeModule\n} = require(\"./AMDRuntimeModules\");\n\nconst ConstDependency = require(\"./ConstDependency\");\n\nconst LocalModuleDependency = require(\"./LocalModuleDependency\");\n\nconst UnsupportedDependency = require(\"./UnsupportedDependency\");\n/** @typedef {import(\"../../declarations/WebpackOptions\").JavascriptParserOptions} JavascriptParserOptions */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").ModuleOptionsNormalized} ModuleOptions */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../javascript/JavascriptParser\")} Parser */\n\n\nconst PLUGIN_NAME = \"AMDPlugin\";\n\nclass AMDPlugin {\n  /**\n   * @param {Record<string, any>} amdOptions the AMD options\n   */\n  constructor(amdOptions) {\n    this.amdOptions = amdOptions;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const amdOptions = this.amdOptions;\n    compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation, _ref) => {\n      let {\n        contextModuleFactory,\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyTemplates.set(AMDRequireDependency, new AMDRequireDependency.Template());\n      compilation.dependencyFactories.set(AMDRequireItemDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(AMDRequireItemDependency, new AMDRequireItemDependency.Template());\n      compilation.dependencyTemplates.set(AMDRequireArrayDependency, new AMDRequireArrayDependency.Template());\n      compilation.dependencyFactories.set(AMDRequireContextDependency, contextModuleFactory);\n      compilation.dependencyTemplates.set(AMDRequireContextDependency, new AMDRequireContextDependency.Template());\n      compilation.dependencyTemplates.set(AMDDefineDependency, new AMDDefineDependency.Template());\n      compilation.dependencyTemplates.set(UnsupportedDependency, new UnsupportedDependency.Template());\n      compilation.dependencyTemplates.set(LocalModuleDependency, new LocalModuleDependency.Template());\n      compilation.hooks.runtimeRequirementInModule.for(RuntimeGlobals.amdDefine).tap(PLUGIN_NAME, (module, set) => {\n        set.add(RuntimeGlobals.require);\n      });\n      compilation.hooks.runtimeRequirementInModule.for(RuntimeGlobals.amdOptions).tap(PLUGIN_NAME, (module, set) => {\n        set.add(RuntimeGlobals.requireScope);\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.amdDefine).tap(PLUGIN_NAME, (chunk, set) => {\n        compilation.addRuntimeModule(chunk, new AMDDefineRuntimeModule());\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.amdOptions).tap(PLUGIN_NAME, (chunk, set) => {\n        compilation.addRuntimeModule(chunk, new AMDOptionsRuntimeModule(amdOptions));\n      });\n      /**\n       * @param {Parser} parser parser parser\n       * @param {JavascriptParserOptions} parserOptions parserOptions\n       * @returns {void}\n       */\n\n      const handler = (parser, parserOptions) => {\n        if (parserOptions.amd !== undefined && !parserOptions.amd) return;\n\n        const tapOptionsHooks = (optionExpr, rootName, getMembers) => {\n          parser.hooks.expression.for(optionExpr).tap(PLUGIN_NAME, toConstantDependency(parser, RuntimeGlobals.amdOptions, [RuntimeGlobals.amdOptions]));\n          parser.hooks.evaluateIdentifier.for(optionExpr).tap(PLUGIN_NAME, evaluateToIdentifier(optionExpr, rootName, getMembers, true));\n          parser.hooks.evaluateTypeof.for(optionExpr).tap(PLUGIN_NAME, evaluateToString(\"object\"));\n          parser.hooks.typeof.for(optionExpr).tap(PLUGIN_NAME, toConstantDependency(parser, JSON.stringify(\"object\")));\n        };\n\n        new AMDRequireDependenciesBlockParserPlugin(parserOptions).apply(parser);\n        new AMDDefineDependencyParserPlugin(parserOptions).apply(parser);\n        tapOptionsHooks(\"define.amd\", \"define\", () => \"amd\");\n        tapOptionsHooks(\"require.amd\", \"require\", () => [\"amd\"]);\n        tapOptionsHooks(\"__webpack_amd_options__\", \"__webpack_amd_options__\", () => []);\n        parser.hooks.expression.for(\"define\").tap(PLUGIN_NAME, expr => {\n          const dep = new ConstDependency(RuntimeGlobals.amdDefine, expr.range, [RuntimeGlobals.amdDefine]);\n          dep.loc = expr.loc;\n          parser.state.module.addPresentationalDependency(dep);\n          return true;\n        });\n        parser.hooks.typeof.for(\"define\").tap(PLUGIN_NAME, toConstantDependency(parser, JSON.stringify(\"function\")));\n        parser.hooks.evaluateTypeof.for(\"define\").tap(PLUGIN_NAME, evaluateToString(\"function\"));\n        parser.hooks.canRename.for(\"define\").tap(PLUGIN_NAME, approve);\n        parser.hooks.rename.for(\"define\").tap(PLUGIN_NAME, expr => {\n          const dep = new ConstDependency(RuntimeGlobals.amdDefine, expr.range, [RuntimeGlobals.amdDefine]);\n          dep.loc = expr.loc;\n          parser.state.module.addPresentationalDependency(dep);\n          return false;\n        });\n        parser.hooks.typeof.for(\"require\").tap(PLUGIN_NAME, toConstantDependency(parser, JSON.stringify(\"function\")));\n        parser.hooks.evaluateTypeof.for(\"require\").tap(PLUGIN_NAME, evaluateToString(\"function\"));\n      };\n\n      normalModuleFactory.hooks.parser.for(JAVASCRIPT_MODULE_TYPE_AUTO).tap(PLUGIN_NAME, handler);\n      normalModuleFactory.hooks.parser.for(JAVASCRIPT_MODULE_TYPE_DYNAMIC).tap(PLUGIN_NAME, handler);\n    });\n  }\n\n}\n\nmodule.exports = AMDPlugin;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/dependencies/AMDPlugin.js"],"names":["JAVASCRIPT_MODULE_TYPE_AUTO","JAVASCRIPT_MODULE_TYPE_DYNAMIC","require","RuntimeGlobals","approve","evaluateToIdentifier","evaluateToString","toConstantDependency","AMDDefineDependency","AMDDefineDependencyParserPlugin","AMDRequireArrayDependency","AMDRequireContextDependency","AMDRequireDependenciesBlockParserPlugin","AMDRequireDependency","AMDRequireItemDependency","AMDDefineRuntimeModule","AMDOptionsRuntimeModule","ConstDependency","LocalModuleDependency","UnsupportedDependency","PLUGIN_NAME","AMDPlugin","constructor","amdOptions","apply","compiler","hooks","compilation","tap","contextModuleFactory","normalModuleFactory","dependencyTemplates","set","Template","dependencyFactories","runtimeRequirementInModule","for","amdDefine","module","add","requireScope","runtimeRequirementInTree","chunk","addRuntimeModule","handler","parser","parserOptions","amd","undefined","tapOptionsHooks","optionExpr","rootName","getMembers","expression","evaluateIdentifier","evaluateTypeof","typeof","JSON","stringify","expr","dep","range","loc","state","addPresentationalDependency","canRename","rename","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst {\n\tJAVASCRIPT_MODULE_TYPE_AUTO,\n\tJAVASCRIPT_MODULE_TYPE_DYNAMIC\n} = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst {\n\tapprove,\n\tevaluateToIdentifier,\n\tevaluateToString,\n\ttoConstantDependency\n} = require(\"../javascript/JavascriptParserHelpers\");\n\nconst AMDDefineDependency = require(\"./AMDDefineDependency\");\nconst AMDDefineDependencyParserPlugin = require(\"./AMDDefineDependencyParserPlugin\");\nconst AMDRequireArrayDependency = require(\"./AMDRequireArrayDependency\");\nconst AMDRequireContextDependency = require(\"./AMDRequireContextDependency\");\nconst AMDRequireDependenciesBlockParserPlugin = require(\"./AMDRequireDependenciesBlockParserPlugin\");\nconst AMDRequireDependency = require(\"./AMDRequireDependency\");\nconst AMDRequireItemDependency = require(\"./AMDRequireItemDependency\");\nconst {\n\tAMDDefineRuntimeModule,\n\tAMDOptionsRuntimeModule\n} = require(\"./AMDRuntimeModules\");\nconst ConstDependency = require(\"./ConstDependency\");\nconst LocalModuleDependency = require(\"./LocalModuleDependency\");\nconst UnsupportedDependency = require(\"./UnsupportedDependency\");\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").JavascriptParserOptions} JavascriptParserOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").ModuleOptionsNormalized} ModuleOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../javascript/JavascriptParser\")} Parser */\n\nconst PLUGIN_NAME = \"AMDPlugin\";\n\nclass AMDPlugin {\n\t/**\n\t * @param {Record<string, any>} amdOptions the AMD options\n\t */\n\tconstructor(amdOptions) {\n\t\tthis.amdOptions = amdOptions;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst amdOptions = this.amdOptions;\n\t\tcompiler.hooks.compilation.tap(\n\t\t\tPLUGIN_NAME,\n\t\t\t(compilation, { contextModuleFactory, normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireDependency,\n\t\t\t\t\tnew AMDRequireDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tAMDRequireItemDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireItemDependency,\n\t\t\t\t\tnew AMDRequireItemDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireArrayDependency,\n\t\t\t\t\tnew AMDRequireArrayDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tAMDRequireContextDependency,\n\t\t\t\t\tcontextModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireContextDependency,\n\t\t\t\t\tnew AMDRequireContextDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDDefineDependency,\n\t\t\t\t\tnew AMDDefineDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tUnsupportedDependency,\n\t\t\t\t\tnew UnsupportedDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tLocalModuleDependency,\n\t\t\t\t\tnew LocalModuleDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInModule\n\t\t\t\t\t.for(RuntimeGlobals.amdDefine)\n\t\t\t\t\t.tap(PLUGIN_NAME, (module, set) => {\n\t\t\t\t\t\tset.add(RuntimeGlobals.require);\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInModule\n\t\t\t\t\t.for(RuntimeGlobals.amdOptions)\n\t\t\t\t\t.tap(PLUGIN_NAME, (module, set) => {\n\t\t\t\t\t\tset.add(RuntimeGlobals.requireScope);\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.amdDefine)\n\t\t\t\t\t.tap(PLUGIN_NAME, (chunk, set) => {\n\t\t\t\t\t\tcompilation.addRuntimeModule(chunk, new AMDDefineRuntimeModule());\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.amdOptions)\n\t\t\t\t\t.tap(PLUGIN_NAME, (chunk, set) => {\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew AMDOptionsRuntimeModule(amdOptions)\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\n\t\t\t\t/**\n\t\t\t\t * @param {Parser} parser parser parser\n\t\t\t\t * @param {JavascriptParserOptions} parserOptions parserOptions\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\tconst handler = (parser, parserOptions) => {\n\t\t\t\t\tif (parserOptions.amd !== undefined && !parserOptions.amd) return;\n\n\t\t\t\t\tconst tapOptionsHooks = (optionExpr, rootName, getMembers) => {\n\t\t\t\t\t\tparser.hooks.expression\n\t\t\t\t\t\t\t.for(optionExpr)\n\t\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\tPLUGIN_NAME,\n\t\t\t\t\t\t\t\ttoConstantDependency(parser, RuntimeGlobals.amdOptions, [\n\t\t\t\t\t\t\t\t\tRuntimeGlobals.amdOptions\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tparser.hooks.evaluateIdentifier\n\t\t\t\t\t\t\t.for(optionExpr)\n\t\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\tPLUGIN_NAME,\n\t\t\t\t\t\t\t\tevaluateToIdentifier(optionExpr, rootName, getMembers, true)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t\t.for(optionExpr)\n\t\t\t\t\t\t\t.tap(PLUGIN_NAME, evaluateToString(\"object\"));\n\t\t\t\t\t\tparser.hooks.typeof\n\t\t\t\t\t\t\t.for(optionExpr)\n\t\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\tPLUGIN_NAME,\n\t\t\t\t\t\t\t\ttoConstantDependency(parser, JSON.stringify(\"object\"))\n\t\t\t\t\t\t\t);\n\t\t\t\t\t};\n\n\t\t\t\t\tnew AMDRequireDependenciesBlockParserPlugin(parserOptions).apply(\n\t\t\t\t\t\tparser\n\t\t\t\t\t);\n\t\t\t\t\tnew AMDDefineDependencyParserPlugin(parserOptions).apply(parser);\n\n\t\t\t\t\ttapOptionsHooks(\"define.amd\", \"define\", () => \"amd\");\n\t\t\t\t\ttapOptionsHooks(\"require.amd\", \"require\", () => [\"amd\"]);\n\t\t\t\t\ttapOptionsHooks(\n\t\t\t\t\t\t\"__webpack_amd_options__\",\n\t\t\t\t\t\t\"__webpack_amd_options__\",\n\t\t\t\t\t\t() => []\n\t\t\t\t\t);\n\n\t\t\t\t\tparser.hooks.expression.for(\"define\").tap(PLUGIN_NAME, expr => {\n\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\tRuntimeGlobals.amdDefine,\n\t\t\t\t\t\t\texpr.range,\n\t\t\t\t\t\t\t[RuntimeGlobals.amdDefine]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.typeof\n\t\t\t\t\t\t.for(\"define\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\tPLUGIN_NAME,\n\t\t\t\t\t\t\ttoConstantDependency(parser, JSON.stringify(\"function\"))\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t.for(\"define\")\n\t\t\t\t\t\t.tap(PLUGIN_NAME, evaluateToString(\"function\"));\n\t\t\t\t\tparser.hooks.canRename.for(\"define\").tap(PLUGIN_NAME, approve);\n\t\t\t\t\tparser.hooks.rename.for(\"define\").tap(PLUGIN_NAME, expr => {\n\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\tRuntimeGlobals.amdDefine,\n\t\t\t\t\t\t\texpr.range,\n\t\t\t\t\t\t\t[RuntimeGlobals.amdDefine]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.typeof\n\t\t\t\t\t\t.for(\"require\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\tPLUGIN_NAME,\n\t\t\t\t\t\t\ttoConstantDependency(parser, JSON.stringify(\"function\"))\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t.for(\"require\")\n\t\t\t\t\t\t.tap(PLUGIN_NAME, evaluateToString(\"function\"));\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(JAVASCRIPT_MODULE_TYPE_AUTO)\n\t\t\t\t\t.tap(PLUGIN_NAME, handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(JAVASCRIPT_MODULE_TYPE_DYNAMIC)\n\t\t\t\t\t.tap(PLUGIN_NAME, handler);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = AMDPlugin;\n"]},"metadata":{},"sourceType":"script"}