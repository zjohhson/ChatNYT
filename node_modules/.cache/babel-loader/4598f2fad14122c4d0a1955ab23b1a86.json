{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\"use strict\";\n\nconst {\n  pathToFileURL\n} = require(\"url\");\n\nconst {\n  JAVASCRIPT_MODULE_TYPE_AUTO,\n  JAVASCRIPT_MODULE_TYPE_ESM\n} = require(\"../ModuleTypeConstants\");\n\nconst BasicEvaluatedExpression = require(\"../javascript/BasicEvaluatedExpression\");\n\nconst {\n  approve\n} = require(\"../javascript/JavascriptParserHelpers\");\n\nconst InnerGraph = require(\"../optimize/InnerGraph\");\n\nconst URLDependency = require(\"./URLDependency\");\n/** @typedef {import(\"estree\").NewExpression} NewExpressionNode */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").JavascriptParserOptions} JavascriptParserOptions */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Dependency\").DependencyLocation} DependencyLocation */\n\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\n/** @typedef {import(\"../javascript/JavascriptParser\")} JavascriptParser */\n\n/** @typedef {import(\"../javascript/JavascriptParser\")} Parser */\n\n/** @typedef {import(\"../javascript/JavascriptParser\").Range} Range */\n\n\nconst PLUGIN_NAME = \"URLPlugin\";\n\nclass URLPlugin {\n  /**\n   * @param {Compiler} compiler compiler\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyFactories.set(URLDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(URLDependency, new URLDependency.Template());\n      /**\n       * @param {NormalModule} module module\n       * @returns {URL} file url\n       */\n\n      const getUrl = module => {\n        return pathToFileURL(module.resource);\n      };\n      /**\n       * @param {Parser} parser parser parser\n       * @param {JavascriptParserOptions} parserOptions parserOptions\n       * @returns {void}\n       */\n\n\n      const parserCallback = (parser, parserOptions) => {\n        if (parserOptions.url === false) return;\n        const relative = parserOptions.url === \"relative\";\n        /**\n         * @param {NewExpressionNode} expr expression\n         * @returns {undefined | string} request\n         */\n\n        const getUrlRequest = expr => {\n          if (expr.arguments.length !== 2) return;\n          const [arg1, arg2] = expr.arguments;\n          if (arg2.type !== \"MemberExpression\" || arg1.type === \"SpreadElement\") return;\n          const chain = parser.extractMemberExpressionChain(arg2);\n          if (chain.members.length !== 1 || chain.object.type !== \"MetaProperty\" || chain.object.meta.name !== \"import\" || chain.object.property.name !== \"meta\" || chain.members[0] !== \"url\") return;\n          return parser.evaluateExpression(arg1).asString();\n        };\n\n        parser.hooks.canRename.for(\"URL\").tap(PLUGIN_NAME, approve);\n        parser.hooks.evaluateNewExpression.for(\"URL\").tap(PLUGIN_NAME, expr => {\n          const request = getUrlRequest(expr);\n          if (!request) return;\n          const url = new URL(request, getUrl(parser.state.module));\n          return new BasicEvaluatedExpression().setString(url.toString()).setRange(\n          /** @type {Range} */\n          expr.range);\n        });\n        parser.hooks.new.for(\"URL\").tap(PLUGIN_NAME, _expr => {\n          const expr =\n          /** @type {NewExpressionNode} */\n          _expr;\n          const request = getUrlRequest(expr);\n          if (!request) return;\n          const [arg1, arg2] = expr.arguments;\n          const dep = new URLDependency(request, [\n          /** @type {Range} */\n          arg1.range[0],\n          /** @type {Range} */\n          arg2.range[1]],\n          /** @type {Range} */\n          expr.range, relative);\n          dep.loc =\n          /** @type {DependencyLocation} */\n          expr.loc;\n          parser.state.current.addDependency(dep);\n          InnerGraph.onUsage(parser.state, e => dep.usedByExports = e);\n          return true;\n        });\n        parser.hooks.isPure.for(\"NewExpression\").tap(PLUGIN_NAME, _expr => {\n          const expr =\n          /** @type {NewExpressionNode} */\n          _expr;\n          const {\n            callee\n          } = expr;\n          if (callee.type !== \"Identifier\") return;\n          const calleeInfo = parser.getFreeInfoFromVariable(callee.name);\n          if (!calleeInfo || calleeInfo.name !== \"URL\") return;\n          const request = getUrlRequest(expr);\n          if (request) return true;\n        });\n      };\n\n      normalModuleFactory.hooks.parser.for(JAVASCRIPT_MODULE_TYPE_AUTO).tap(PLUGIN_NAME, parserCallback);\n      normalModuleFactory.hooks.parser.for(JAVASCRIPT_MODULE_TYPE_ESM).tap(PLUGIN_NAME, parserCallback);\n    });\n  }\n\n}\n\nmodule.exports = URLPlugin;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/dependencies/URLPlugin.js"],"names":["pathToFileURL","require","JAVASCRIPT_MODULE_TYPE_AUTO","JAVASCRIPT_MODULE_TYPE_ESM","BasicEvaluatedExpression","approve","InnerGraph","URLDependency","PLUGIN_NAME","URLPlugin","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","dependencyTemplates","Template","getUrl","module","resource","parserCallback","parser","parserOptions","url","relative","getUrlRequest","expr","arguments","length","arg1","arg2","type","chain","extractMemberExpressionChain","members","object","meta","name","property","evaluateExpression","asString","canRename","for","evaluateNewExpression","request","URL","state","setString","toString","setRange","range","new","_expr","dep","loc","current","addDependency","onUsage","e","usedByExports","isPure","callee","calleeInfo","getFreeInfoFromVariable","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst { pathToFileURL } = require(\"url\");\nconst {\n\tJAVASCRIPT_MODULE_TYPE_AUTO,\n\tJAVASCRIPT_MODULE_TYPE_ESM\n} = require(\"../ModuleTypeConstants\");\nconst BasicEvaluatedExpression = require(\"../javascript/BasicEvaluatedExpression\");\nconst { approve } = require(\"../javascript/JavascriptParserHelpers\");\nconst InnerGraph = require(\"../optimize/InnerGraph\");\nconst URLDependency = require(\"./URLDependency\");\n\n/** @typedef {import(\"estree\").NewExpression} NewExpressionNode */\n/** @typedef {import(\"../../declarations/WebpackOptions\").JavascriptParserOptions} JavascriptParserOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Dependency\").DependencyLocation} DependencyLocation */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../javascript/JavascriptParser\")} JavascriptParser */\n/** @typedef {import(\"../javascript/JavascriptParser\")} Parser */\n/** @typedef {import(\"../javascript/JavascriptParser\").Range} Range */\n\nconst PLUGIN_NAME = \"URLPlugin\";\n\nclass URLPlugin {\n\t/**\n\t * @param {Compiler} compiler compiler\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\tPLUGIN_NAME,\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(URLDependency, normalModuleFactory);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tURLDependency,\n\t\t\t\t\tnew URLDependency.Template()\n\t\t\t\t);\n\n\t\t\t\t/**\n\t\t\t\t * @param {NormalModule} module module\n\t\t\t\t * @returns {URL} file url\n\t\t\t\t */\n\t\t\t\tconst getUrl = module => {\n\t\t\t\t\treturn pathToFileURL(module.resource);\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t * @param {Parser} parser parser parser\n\t\t\t\t * @param {JavascriptParserOptions} parserOptions parserOptions\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\tconst parserCallback = (parser, parserOptions) => {\n\t\t\t\t\tif (parserOptions.url === false) return;\n\t\t\t\t\tconst relative = parserOptions.url === \"relative\";\n\n\t\t\t\t\t/**\n\t\t\t\t\t * @param {NewExpressionNode} expr expression\n\t\t\t\t\t * @returns {undefined | string} request\n\t\t\t\t\t */\n\t\t\t\t\tconst getUrlRequest = expr => {\n\t\t\t\t\t\tif (expr.arguments.length !== 2) return;\n\n\t\t\t\t\t\tconst [arg1, arg2] = expr.arguments;\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\targ2.type !== \"MemberExpression\" ||\n\t\t\t\t\t\t\targ1.type === \"SpreadElement\"\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\tconst chain = parser.extractMemberExpressionChain(arg2);\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tchain.members.length !== 1 ||\n\t\t\t\t\t\t\tchain.object.type !== \"MetaProperty\" ||\n\t\t\t\t\t\t\tchain.object.meta.name !== \"import\" ||\n\t\t\t\t\t\t\tchain.object.property.name !== \"meta\" ||\n\t\t\t\t\t\t\tchain.members[0] !== \"url\"\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\treturn parser.evaluateExpression(arg1).asString();\n\t\t\t\t\t};\n\n\t\t\t\t\tparser.hooks.canRename.for(\"URL\").tap(PLUGIN_NAME, approve);\n\t\t\t\t\tparser.hooks.evaluateNewExpression\n\t\t\t\t\t\t.for(\"URL\")\n\t\t\t\t\t\t.tap(PLUGIN_NAME, expr => {\n\t\t\t\t\t\t\tconst request = getUrlRequest(expr);\n\t\t\t\t\t\t\tif (!request) return;\n\t\t\t\t\t\t\tconst url = new URL(request, getUrl(parser.state.module));\n\n\t\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t\t.setString(url.toString())\n\t\t\t\t\t\t\t\t.setRange(/** @type {Range} */ (expr.range));\n\t\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.new.for(\"URL\").tap(PLUGIN_NAME, _expr => {\n\t\t\t\t\t\tconst expr = /** @type {NewExpressionNode} */ (_expr);\n\n\t\t\t\t\t\tconst request = getUrlRequest(expr);\n\n\t\t\t\t\t\tif (!request) return;\n\n\t\t\t\t\t\tconst [arg1, arg2] = expr.arguments;\n\t\t\t\t\t\tconst dep = new URLDependency(\n\t\t\t\t\t\t\trequest,\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t/** @type {Range} */ (arg1.range)[0],\n\t\t\t\t\t\t\t\t/** @type {Range} */ (arg2.range)[1]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t/** @type {Range} */ (expr.range),\n\t\t\t\t\t\t\trelative\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdep.loc = /** @type {DependencyLocation} */ (expr.loc);\n\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\tInnerGraph.onUsage(parser.state, e => (dep.usedByExports = e));\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.isPure.for(\"NewExpression\").tap(PLUGIN_NAME, _expr => {\n\t\t\t\t\t\tconst expr = /** @type {NewExpressionNode} */ (_expr);\n\t\t\t\t\t\tconst { callee } = expr;\n\t\t\t\t\t\tif (callee.type !== \"Identifier\") return;\n\t\t\t\t\t\tconst calleeInfo = parser.getFreeInfoFromVariable(callee.name);\n\t\t\t\t\t\tif (!calleeInfo || calleeInfo.name !== \"URL\") return;\n\n\t\t\t\t\t\tconst request = getUrlRequest(expr);\n\n\t\t\t\t\t\tif (request) return true;\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(JAVASCRIPT_MODULE_TYPE_AUTO)\n\t\t\t\t\t.tap(PLUGIN_NAME, parserCallback);\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(JAVASCRIPT_MODULE_TYPE_ESM)\n\t\t\t\t\t.tap(PLUGIN_NAME, parserCallback);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = URLPlugin;\n"]},"metadata":{},"sourceType":"script"}