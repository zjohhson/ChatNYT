{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  WEBASSEMBLY_MODULE_TYPE_SYNC\n} = require(\"../ModuleTypeConstants\");\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst WasmChunkLoadingRuntimeModule = require(\"../wasm-sync/WasmChunkLoadingRuntimeModule\");\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n// TODO webpack 6 remove\n\n\nconst PLUGIN_NAME = \"FetchCompileWasmPlugin\";\n/**\n * @typedef {Object} FetchCompileWasmPluginOptions\n * @property {boolean} [mangleImports] mangle imports\n */\n\nclass FetchCompileWasmPlugin {\n  /**\n   * @param {FetchCompileWasmPluginOptions} [options] options\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.options = options;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(PLUGIN_NAME, compilation => {\n      const globalWasmLoading = compilation.outputOptions.wasmLoading;\n      /**\n       * @param {Chunk} chunk chunk\n       * @returns {boolean} true, if wasm loading is enabled for the chunk\n       */\n\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const wasmLoading = options && options.wasmLoading !== undefined ? options.wasmLoading : globalWasmLoading;\n        return wasmLoading === \"fetch\";\n      };\n      /**\n       * @param {string} path path to the wasm file\n       * @returns {string} code to load the wasm file\n       */\n\n\n      const generateLoadBinaryCode = path => `fetch(${RuntimeGlobals.publicPath} + ${path})`;\n\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(PLUGIN_NAME, (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        const chunkGraph = compilation.chunkGraph;\n\n        if (!chunkGraph.hasModuleInGraph(chunk, m => m.type === WEBASSEMBLY_MODULE_TYPE_SYNC)) {\n          return;\n        }\n\n        set.add(RuntimeGlobals.moduleCache);\n        set.add(RuntimeGlobals.publicPath);\n        compilation.addRuntimeModule(chunk, new WasmChunkLoadingRuntimeModule({\n          generateLoadBinaryCode,\n          supportsStreaming: true,\n          mangleImports: this.options.mangleImports,\n          runtimeRequirements: set\n        }));\n      });\n    });\n  }\n\n}\n\nmodule.exports = FetchCompileWasmPlugin;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/web/FetchCompileWasmPlugin.js"],"names":["WEBASSEMBLY_MODULE_TYPE_SYNC","require","RuntimeGlobals","WasmChunkLoadingRuntimeModule","PLUGIN_NAME","FetchCompileWasmPlugin","constructor","options","apply","compiler","hooks","thisCompilation","tap","compilation","globalWasmLoading","outputOptions","wasmLoading","isEnabledForChunk","chunk","getEntryOptions","undefined","generateLoadBinaryCode","path","publicPath","runtimeRequirementInTree","for","ensureChunkHandlers","set","chunkGraph","hasModuleInGraph","m","type","add","moduleCache","addRuntimeModule","supportsStreaming","mangleImports","runtimeRequirements","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAmCC,OAAO,CAAC,wBAAD,CAAhD;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAME,6BAA6B,GAAGF,OAAO,CAAC,4CAAD,CAA7C;AAEA;;AACA;AAEA;;;AAEA,MAAMG,WAAW,GAAG,wBAApB;AAEA;AACA;AACA;AACA;;AAEA,MAAMC,sBAAN,CAA6B;AAC5B;AACD;AACA;AACCC,EAAAA,WAAW,GAAe;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACzB,SAAKA,OAAL,GAAeA,OAAf;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+BC,GAA/B,CAAmCR,WAAnC,EAAgDS,WAAW,IAAI;AAC9D,YAAMC,iBAAiB,GAAGD,WAAW,CAACE,aAAZ,CAA0BC,WAApD;AACA;AACH;AACA;AACA;;AACG,YAAMC,iBAAiB,GAAGC,KAAK,IAAI;AAClC,cAAMX,OAAO,GAAGW,KAAK,CAACC,eAAN,EAAhB;AACA,cAAMH,WAAW,GAChBT,OAAO,IAAIA,OAAO,CAACS,WAAR,KAAwBI,SAAnC,GACGb,OAAO,CAACS,WADX,GAEGF,iBAHJ;AAIA,eAAOE,WAAW,KAAK,OAAvB;AACA,OAPD;AAQA;AACH;AACA;AACA;;;AACG,YAAMK,sBAAsB,GAAGC,IAAI,IACjC,SAAQpB,cAAc,CAACqB,UAAW,MAAKD,IAAK,GAD9C;;AAGAT,MAAAA,WAAW,CAACH,KAAZ,CAAkBc,wBAAlB,CACEC,GADF,CACMvB,cAAc,CAACwB,mBADrB,EAEEd,GAFF,CAEMR,WAFN,EAEmB,CAACc,KAAD,EAAQS,GAAR,KAAgB;AACjC,YAAI,CAACV,iBAAiB,CAACC,KAAD,CAAtB,EAA+B;AAC/B,cAAMU,UAAU,GAAGf,WAAW,CAACe,UAA/B;;AACA,YACC,CAACA,UAAU,CAACC,gBAAX,CACAX,KADA,EAEAY,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW/B,4BAFhB,CADF,EAKE;AACD;AACA;;AACD2B,QAAAA,GAAG,CAACK,GAAJ,CAAQ9B,cAAc,CAAC+B,WAAvB;AACAN,QAAAA,GAAG,CAACK,GAAJ,CAAQ9B,cAAc,CAACqB,UAAvB;AACAV,QAAAA,WAAW,CAACqB,gBAAZ,CACChB,KADD,EAEC,IAAIf,6BAAJ,CAAkC;AACjCkB,UAAAA,sBADiC;AAEjCc,UAAAA,iBAAiB,EAAE,IAFc;AAGjCC,UAAAA,aAAa,EAAE,KAAK7B,OAAL,CAAa6B,aAHK;AAIjCC,UAAAA,mBAAmB,EAAEV;AAJY,SAAlC,CAFD;AASA,OAxBF;AAyBA,KA9CD;AA+CA;;AA7D2B;;AAgE7BW,MAAM,CAACC,OAAP,GAAiBlC,sBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { WEBASSEMBLY_MODULE_TYPE_SYNC } = require(\"../ModuleTypeConstants\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst WasmChunkLoadingRuntimeModule = require(\"../wasm-sync/WasmChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n// TODO webpack 6 remove\n\nconst PLUGIN_NAME = \"FetchCompileWasmPlugin\";\n\n/**\n * @typedef {Object} FetchCompileWasmPluginOptions\n * @property {boolean} [mangleImports] mangle imports\n */\n\nclass FetchCompileWasmPlugin {\n\t/**\n\t * @param {FetchCompileWasmPluginOptions} [options] options\n\t */\n\tconstructor(options = {}) {\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(PLUGIN_NAME, compilation => {\n\t\t\tconst globalWasmLoading = compilation.outputOptions.wasmLoading;\n\t\t\t/**\n\t\t\t * @param {Chunk} chunk chunk\n\t\t\t * @returns {boolean} true, if wasm loading is enabled for the chunk\n\t\t\t */\n\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\tconst wasmLoading =\n\t\t\t\t\toptions && options.wasmLoading !== undefined\n\t\t\t\t\t\t? options.wasmLoading\n\t\t\t\t\t\t: globalWasmLoading;\n\t\t\t\treturn wasmLoading === \"fetch\";\n\t\t\t};\n\t\t\t/**\n\t\t\t * @param {string} path path to the wasm file\n\t\t\t * @returns {string} code to load the wasm file\n\t\t\t */\n\t\t\tconst generateLoadBinaryCode = path =>\n\t\t\t\t`fetch(${RuntimeGlobals.publicPath} + ${path})`;\n\n\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t.tap(PLUGIN_NAME, (chunk, set) => {\n\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\tif (\n\t\t\t\t\t\t!chunkGraph.hasModuleInGraph(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tm => m.type === WEBASSEMBLY_MODULE_TYPE_SYNC\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tset.add(RuntimeGlobals.moduleCache);\n\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\tchunk,\n\t\t\t\t\t\tnew WasmChunkLoadingRuntimeModule({\n\t\t\t\t\t\t\tgenerateLoadBinaryCode,\n\t\t\t\t\t\t\tsupportsStreaming: true,\n\t\t\t\t\t\t\tmangleImports: this.options.mangleImports,\n\t\t\t\t\t\t\truntimeRequirements: set\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = FetchCompileWasmPlugin;\n"]},"metadata":{},"sourceType":"script"}