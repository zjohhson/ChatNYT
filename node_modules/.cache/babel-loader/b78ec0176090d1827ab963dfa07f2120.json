{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst RuntimeModule = require(\"../RuntimeModule\");\n\nconst Template = require(\"../Template\");\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n\n/**\n * @typedef {Object} AsyncWasmLoadingRuntimeModuleOptions\n * @property {function(string): string} generateLoadBinaryCode\n * @property {boolean} supportsStreaming\n */\n\n\nclass AsyncWasmLoadingRuntimeModule extends RuntimeModule {\n  /**\n   * @param {AsyncWasmLoadingRuntimeModuleOptions} options options\n   */\n  constructor(_ref) {\n    let {\n      generateLoadBinaryCode,\n      supportsStreaming\n    } = _ref;\n    super(\"wasm loading\", RuntimeModule.STAGE_NORMAL);\n    this.generateLoadBinaryCode = generateLoadBinaryCode;\n    this.supportsStreaming = supportsStreaming;\n  }\n  /**\n   * @returns {string | null} runtime code\n   */\n\n\n  generate() {\n    const compilation =\n    /** @type {Compilation} */\n    this.compilation;\n    const chunk =\n    /** @type {Chunk} */\n    this.chunk;\n    const {\n      outputOptions,\n      runtimeTemplate\n    } = compilation;\n    const fn = RuntimeGlobals.instantiateWasm;\n    const wasmModuleSrcPath = compilation.getPath(JSON.stringify(outputOptions.webassemblyModuleFilename), {\n      hash: `\" + ${RuntimeGlobals.getFullHash}() + \"`,\n      hashWithLength: length => `\" + ${RuntimeGlobals.getFullHash}}().slice(0, ${length}) + \"`,\n      module: {\n        id: '\" + wasmModuleId + \"',\n        hash: `\" + wasmModuleHash + \"`,\n\n        hashWithLength(length) {\n          return `\" + wasmModuleHash.slice(0, ${length}) + \"`;\n        }\n\n      },\n      runtime: chunk.runtime\n    });\n    return `${fn} = ${runtimeTemplate.basicFunction(\"exports, wasmModuleId, wasmModuleHash, importsObj\", [`var req = ${this.generateLoadBinaryCode(wasmModuleSrcPath)};`, this.supportsStreaming ? Template.asString([\"if (typeof WebAssembly.instantiateStreaming === 'function') {\", Template.indent([\"return WebAssembly.instantiateStreaming(req, importsObj)\", Template.indent([`.then(${runtimeTemplate.returningFunction(\"Object.assign(exports, res.instance.exports)\", \"res\")});`])]), \"}\"]) : \"// no support for streaming compilation\", \"return req\", Template.indent([`.then(${runtimeTemplate.returningFunction(\"x.arrayBuffer()\", \"x\")})`, `.then(${runtimeTemplate.returningFunction(\"WebAssembly.instantiate(bytes, importsObj)\", \"bytes\")})`, `.then(${runtimeTemplate.returningFunction(\"Object.assign(exports, res.instance.exports)\", \"res\")});`])])};`;\n  }\n\n}\n\nmodule.exports = AsyncWasmLoadingRuntimeModule;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/wasm-async/AsyncWasmLoadingRuntimeModule.js"],"names":["RuntimeGlobals","require","RuntimeModule","Template","AsyncWasmLoadingRuntimeModule","constructor","generateLoadBinaryCode","supportsStreaming","STAGE_NORMAL","generate","compilation","chunk","outputOptions","runtimeTemplate","fn","instantiateWasm","wasmModuleSrcPath","getPath","JSON","stringify","webassemblyModuleFilename","hash","getFullHash","hashWithLength","length","module","id","runtime","basicFunction","asString","indent","returningFunction","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAAxB;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,6BAAN,SAA4CF,aAA5C,CAA0D;AACzD;AACD;AACA;AACCG,EAAAA,WAAW,OAAgD;AAAA,QAA/C;AAAEC,MAAAA,sBAAF;AAA0BC,MAAAA;AAA1B,KAA+C;AAC1D,UAAM,cAAN,EAAsBL,aAAa,CAACM,YAApC;AACA,SAAKF,sBAAL,GAA8BA,sBAA9B;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA;AAED;AACD;AACA;;;AACCE,EAAAA,QAAQ,GAAG;AACV,UAAMC,WAAW;AAAG;AAA4B,SAAKA,WAArD;AACA,UAAMC,KAAK;AAAG;AAAsB,SAAKA,KAAzC;AACA,UAAM;AAAEC,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,QAAqCH,WAA3C;AACA,UAAMI,EAAE,GAAGd,cAAc,CAACe,eAA1B;AACA,UAAMC,iBAAiB,GAAGN,WAAW,CAACO,OAAZ,CACzBC,IAAI,CAACC,SAAL,CAAeP,aAAa,CAACQ,yBAA7B,CADyB,EAEzB;AACCC,MAAAA,IAAI,EAAG,OAAMrB,cAAc,CAACsB,WAAY,QADzC;AAECC,MAAAA,cAAc,EAAEC,MAAM,IACpB,OAAMxB,cAAc,CAACsB,WAAY,gBAAeE,MAAO,OAH1D;AAICC,MAAAA,MAAM,EAAE;AACPC,QAAAA,EAAE,EAAE,sBADG;AAEPL,QAAAA,IAAI,EAAG,wBAFA;;AAGPE,QAAAA,cAAc,CAACC,MAAD,EAAS;AACtB,iBAAQ,+BAA8BA,MAAO,OAA7C;AACA;;AALM,OAJT;AAWCG,MAAAA,OAAO,EAAEhB,KAAK,CAACgB;AAXhB,KAFyB,CAA1B;AAgBA,WAAQ,GAAEb,EAAG,MAAKD,eAAe,CAACe,aAAhB,CACjB,mDADiB,EAEjB,CACE,aAAY,KAAKtB,sBAAL,CAA4BU,iBAA5B,CAA+C,GAD7D,EAEC,KAAKT,iBAAL,GACGJ,QAAQ,CAAC0B,QAAT,CAAkB,CAClB,+DADkB,EAElB1B,QAAQ,CAAC2B,MAAT,CAAgB,CACf,0DADe,EAEf3B,QAAQ,CAAC2B,MAAT,CAAgB,CACd,SAAQjB,eAAe,CAACkB,iBAAhB,CACR,8CADQ,EAER,KAFQ,CAGP,IAJa,CAAhB,CAFe,CAAhB,CAFkB,EAWlB,GAXkB,CAAlB,CADH,GAcG,yCAhBJ,EAiBC,YAjBD,EAkBC5B,QAAQ,CAAC2B,MAAT,CAAgB,CACd,SAAQjB,eAAe,CAACkB,iBAAhB,CAAkC,iBAAlC,EAAqD,GAArD,CAA0D,GADpD,EAEd,SAAQlB,eAAe,CAACkB,iBAAhB,CACR,4CADQ,EAER,OAFQ,CAGP,GALa,EAMd,SAAQlB,eAAe,CAACkB,iBAAhB,CACR,8CADQ,EAER,KAFQ,CAGP,IATa,CAAhB,CAlBD,CAFiB,CAgChB,GAhCF;AAiCA;;AAnEwD;;AAsE1DN,MAAM,CAACO,OAAP,GAAiB5B,6BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compilation\")} Compilation */\n\n/**\n * @typedef {Object} AsyncWasmLoadingRuntimeModuleOptions\n * @property {function(string): string} generateLoadBinaryCode\n * @property {boolean} supportsStreaming\n */\n\nclass AsyncWasmLoadingRuntimeModule extends RuntimeModule {\n\t/**\n\t * @param {AsyncWasmLoadingRuntimeModuleOptions} options options\n\t */\n\tconstructor({ generateLoadBinaryCode, supportsStreaming }) {\n\t\tsuper(\"wasm loading\", RuntimeModule.STAGE_NORMAL);\n\t\tthis.generateLoadBinaryCode = generateLoadBinaryCode;\n\t\tthis.supportsStreaming = supportsStreaming;\n\t}\n\n\t/**\n\t * @returns {string | null} runtime code\n\t */\n\tgenerate() {\n\t\tconst compilation = /** @type {Compilation} */ (this.compilation);\n\t\tconst chunk = /** @type {Chunk} */ (this.chunk);\n\t\tconst { outputOptions, runtimeTemplate } = compilation;\n\t\tconst fn = RuntimeGlobals.instantiateWasm;\n\t\tconst wasmModuleSrcPath = compilation.getPath(\n\t\t\tJSON.stringify(outputOptions.webassemblyModuleFilename),\n\t\t\t{\n\t\t\t\thash: `\" + ${RuntimeGlobals.getFullHash}() + \"`,\n\t\t\t\thashWithLength: length =>\n\t\t\t\t\t`\" + ${RuntimeGlobals.getFullHash}}().slice(0, ${length}) + \"`,\n\t\t\t\tmodule: {\n\t\t\t\t\tid: '\" + wasmModuleId + \"',\n\t\t\t\t\thash: `\" + wasmModuleHash + \"`,\n\t\t\t\t\thashWithLength(length) {\n\t\t\t\t\t\treturn `\" + wasmModuleHash.slice(0, ${length}) + \"`;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\truntime: chunk.runtime\n\t\t\t}\n\t\t);\n\t\treturn `${fn} = ${runtimeTemplate.basicFunction(\n\t\t\t\"exports, wasmModuleId, wasmModuleHash, importsObj\",\n\t\t\t[\n\t\t\t\t`var req = ${this.generateLoadBinaryCode(wasmModuleSrcPath)};`,\n\t\t\t\tthis.supportsStreaming\n\t\t\t\t\t? Template.asString([\n\t\t\t\t\t\t\t\"if (typeof WebAssembly.instantiateStreaming === 'function') {\",\n\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\"return WebAssembly.instantiateStreaming(req, importsObj)\",\n\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t`.then(${runtimeTemplate.returningFunction(\n\t\t\t\t\t\t\t\t\t\t\"Object.assign(exports, res.instance.exports)\",\n\t\t\t\t\t\t\t\t\t\t\"res\"\n\t\t\t\t\t\t\t\t\t)});`\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t  ])\n\t\t\t\t\t: \"// no support for streaming compilation\",\n\t\t\t\t\"return req\",\n\t\t\t\tTemplate.indent([\n\t\t\t\t\t`.then(${runtimeTemplate.returningFunction(\"x.arrayBuffer()\", \"x\")})`,\n\t\t\t\t\t`.then(${runtimeTemplate.returningFunction(\n\t\t\t\t\t\t\"WebAssembly.instantiate(bytes, importsObj)\",\n\t\t\t\t\t\t\"bytes\"\n\t\t\t\t\t)})`,\n\t\t\t\t\t`.then(${runtimeTemplate.returningFunction(\n\t\t\t\t\t\t\"Object.assign(exports, res.instance.exports)\",\n\t\t\t\t\t\t\"res\"\n\t\t\t\t\t)});`\n\t\t\t\t])\n\t\t\t]\n\t\t)};`;\n\t}\n}\n\nmodule.exports = AsyncWasmLoadingRuntimeModule;\n"]},"metadata":{},"sourceType":"script"}