{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport * as MessagesAPI from 'openai/resources/beta/threads/messages/messages';\nimport * as RunsAPI from 'openai/resources/beta/threads/runs/runs';\nexport class Threads extends APIResource {\n  constructor() {\n    super(...arguments);\n    this.runs = new RunsAPI.Runs(this.client);\n    this.messages = new MessagesAPI.Messages(this.client);\n  }\n  /**\n   * Create a thread.\n   */\n\n\n  create(body, options) {\n    return this.post('/threads', {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieves a thread.\n   */\n\n\n  retrieve(threadId, options) {\n    return this.get(`/threads/${threadId}`, { ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Modifies a thread.\n   */\n\n\n  update(threadId, body, options) {\n    return this.post(`/threads/${threadId}`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Delete a thread.\n   */\n\n\n  del(threadId, options) {\n    return this.delete(`/threads/${threadId}`, { ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Create a thread and run it in one request.\n   */\n\n\n  createAndRun(body, options) {\n    return this.post('/threads/runs', {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...options?.headers\n      }\n    });\n  }\n\n}\n\n(function (Threads) {\n  Threads.Runs = RunsAPI.Runs;\n  Threads.RunsPage = RunsAPI.RunsPage;\n  Threads.Messages = MessagesAPI.Messages;\n  Threads.ThreadMessagesPage = MessagesAPI.ThreadMessagesPage;\n})(Threads || (Threads = {}));","map":{"version":3,"mappings":"AAAA;SAGSA,mBAAmB;OAErB,KAAKC,iBAAiB;OACtB,KAAKC,aAAa;AAEzB,OAAM,MAAOC,OAAP,SAAuBH,WAAvB,CAAkC;AAAxCI;;AACE,gBAAqB,IAAIF,OAAO,CAACG,IAAZ,CAAiB,KAAKC,MAAtB,CAArB;AACA,oBAAiC,IAAIL,WAAW,CAACM,QAAhB,CAAyB,KAAKD,MAA9B,CAAjC;AAsDD;AApDC;;;;;AAGAE,QAAM,CAACC,IAAD,EAA2BC,OAA3B,EAAwD;AAC5D,WAAO,KAAKC,IAAL,CAAU,UAAV,EAAsB;AAC3BF,UAD2B;AAE3B,SAAGC,OAFwB;AAG3BE,aAAO,EAAE;AAAE,uBAAe,eAAjB;AAAkC,WAAGF,OAAO,EAAEE;AAA9C;AAHkB,KAAtB,CAAP;AAKD;AAED;;;;;AAGAC,UAAQ,CAACC,QAAD,EAAmBJ,OAAnB,EAAgD;AACtD,WAAO,KAAKK,GAAL,CAAS,YAAYD,QAAQ,EAA7B,EAAiC,EACtC,GAAGJ,OADmC;AAEtCE,aAAO,EAAE;AAAE,uBAAe,eAAjB;AAAkC,WAAGF,OAAO,EAAEE;AAA9C;AAF6B,KAAjC,CAAP;AAID;AAED;;;;;AAGAI,QAAM,CAACF,QAAD,EAAmBL,IAAnB,EAA6CC,OAA7C,EAA0E;AAC9E,WAAO,KAAKC,IAAL,CAAU,YAAYG,QAAQ,EAA9B,EAAkC;AACvCL,UADuC;AAEvC,SAAGC,OAFoC;AAGvCE,aAAO,EAAE;AAAE,uBAAe,eAAjB;AAAkC,WAAGF,OAAO,EAAEE;AAA9C;AAH8B,KAAlC,CAAP;AAKD;AAED;;;;;AAGAK,KAAG,CAACH,QAAD,EAAmBJ,OAAnB,EAAgD;AACjD,WAAO,KAAKQ,MAAL,CAAY,YAAYJ,QAAQ,EAAhC,EAAoC,EACzC,GAAGJ,OADsC;AAEzCE,aAAO,EAAE;AAAE,uBAAe,eAAjB;AAAkC,WAAGF,OAAO,EAAEE;AAA9C;AAFgC,KAApC,CAAP;AAID;AAED;;;;;AAGAO,cAAY,CAACV,IAAD,EAAiCC,OAAjC,EAA8D;AACxE,WAAO,KAAKC,IAAL,CAAU,eAAV,EAA2B;AAChCF,UADgC;AAEhC,SAAGC,OAF6B;AAGhCE,aAAO,EAAE;AAAE,uBAAe,eAAjB;AAAkC,WAAGF,OAAO,EAAEE;AAA9C;AAHuB,KAA3B,CAAP;AAKD;;AAvDqC;;AAmTxC,WAAiBT,OAAjB,EAAwB;AAMRA,iBAAOD,OAAO,CAACG,IAAf;AAGAF,qBAAWD,OAAO,CAACkB,QAAnB;AAKAjB,qBAAWF,WAAW,CAACM,QAAvB;AAKAJ,+BAAqBF,WAAW,CAACoB,kBAAjC;AAIf,CAvBD,EAAiBlB,OAAO,KAAPA,OAAO,MAAxB","names":["APIResource","MessagesAPI","RunsAPI","Threads","constructor","Runs","client","Messages","create","body","options","post","headers","retrieve","threadId","get","update","del","delete","createAndRun","RunsPage","ThreadMessagesPage"],"sources":["/Users/zachjohnson/Desktop/React-Wordle-lesson-16/node_modules/openai/src/resources/beta/threads/threads.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../../core\";\nimport { APIResource } from \"../../../resource\";\nimport * as ThreadsAPI from \"./threads\";\nimport * as MessagesAPI from \"./messages/messages\";\nimport * as RunsAPI from \"./runs/runs\";\n\nexport class Threads extends APIResource {\n  runs: RunsAPI.Runs = new RunsAPI.Runs(this.client);\n  messages: MessagesAPI.Messages = new MessagesAPI.Messages(this.client);\n\n  /**\n   * Create a thread.\n   */\n  create(body: ThreadCreateParams, options?: Core.RequestOptions): Core.APIPromise<Thread> {\n    return this.post('/threads', {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieves a thread.\n   */\n  retrieve(threadId: string, options?: Core.RequestOptions): Core.APIPromise<Thread> {\n    return this.get(`/threads/${threadId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Modifies a thread.\n   */\n  update(threadId: string, body: ThreadUpdateParams, options?: Core.RequestOptions): Core.APIPromise<Thread> {\n    return this.post(`/threads/${threadId}`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Delete a thread.\n   */\n  del(threadId: string, options?: Core.RequestOptions): Core.APIPromise<ThreadDeleted> {\n    return this.delete(`/threads/${threadId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Create a thread and run it in one request.\n   */\n  createAndRun(body: ThreadCreateAndRunParams, options?: Core.RequestOptions): Core.APIPromise<RunsAPI.Run> {\n    return this.post('/threads/runs', {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n}\n\n/**\n * Represents a thread that contains\n * [messages](https://platform.openai.com/docs/api-reference/messages).\n */\nexport interface Thread {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the thread was created.\n   */\n  created_at: number;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata: unknown | null;\n\n  /**\n   * The object type, which is always `thread`.\n   */\n  object: 'thread';\n}\n\nexport interface ThreadDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'thread.deleted';\n}\n\nexport interface ThreadCreateParams {\n  /**\n   * A list of [messages](https://platform.openai.com/docs/api-reference/messages) to\n   * start the thread with.\n   */\n  messages?: Array<ThreadCreateParams.Message>;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n}\n\nexport namespace ThreadCreateParams {\n  export interface Message {\n    /**\n     * The content of the message.\n     */\n    content: string;\n\n    /**\n     * The role of the entity that is creating the message. Currently only `user` is\n     * supported.\n     */\n    role: 'user';\n\n    /**\n     * A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that\n     * the message should use. There can be a maximum of 10 files attached to a\n     * message. Useful for tools like `retrieval` and `code_interpreter` that can\n     * access and use files.\n     */\n    file_ids?: Array<string>;\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format. Keys\n     * can be a maximum of 64 characters long and values can be a maxium of 512\n     * characters long.\n     */\n    metadata?: unknown | null;\n  }\n}\n\nexport interface ThreadUpdateParams {\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n}\n\nexport interface ThreadCreateAndRunParams {\n  /**\n   * The ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to\n   * execute this run.\n   */\n  assistant_id: string;\n\n  /**\n   * Override the default system message of the assistant. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  instructions?: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n   * be used to execute this run. If a value is provided here, it will override the\n   * model associated with the assistant. If not, the model associated with the\n   * assistant will be used.\n   */\n  model?: string | null;\n\n  /**\n   * If no thread is provided, an empty thread will be created.\n   */\n  thread?: ThreadCreateAndRunParams.Thread;\n\n  /**\n   * Override the tools the assistant can use for this run. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  tools?: Array<\n    | ThreadCreateAndRunParams.AssistantToolsCode\n    | ThreadCreateAndRunParams.AssistantToolsRetrieval\n    | ThreadCreateAndRunParams.AssistantToolsFunction\n  > | null;\n}\n\nexport namespace ThreadCreateAndRunParams {\n  /**\n   * If no thread is provided, an empty thread will be created.\n   */\n  export interface Thread {\n    /**\n     * A list of [messages](https://platform.openai.com/docs/api-reference/messages) to\n     * start the thread with.\n     */\n    messages?: Array<Thread.Message>;\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format. Keys\n     * can be a maximum of 64 characters long and values can be a maxium of 512\n     * characters long.\n     */\n    metadata?: unknown | null;\n  }\n\n  export namespace Thread {\n    export interface Message {\n      /**\n       * The content of the message.\n       */\n      content: string;\n\n      /**\n       * The role of the entity that is creating the message. Currently only `user` is\n       * supported.\n       */\n      role: 'user';\n\n      /**\n       * A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that\n       * the message should use. There can be a maximum of 10 files attached to a\n       * message. Useful for tools like `retrieval` and `code_interpreter` that can\n       * access and use files.\n       */\n      file_ids?: Array<string>;\n\n      /**\n       * Set of 16 key-value pairs that can be attached to an object. This can be useful\n       * for storing additional information about the object in a structured format. Keys\n       * can be a maximum of 64 characters long and values can be a maxium of 512\n       * characters long.\n       */\n      metadata?: unknown | null;\n    }\n  }\n\n  export interface AssistantToolsCode {\n    /**\n     * The type of tool being defined: `code_interpreter`\n     */\n    type: 'code_interpreter';\n  }\n\n  export interface AssistantToolsRetrieval {\n    /**\n     * The type of tool being defined: `retrieval`\n     */\n    type: 'retrieval';\n  }\n\n  export interface AssistantToolsFunction {\n    /**\n     * The function definition.\n     */\n    function: AssistantToolsFunction.Function;\n\n    /**\n     * The type of tool being defined: `function`\n     */\n    type: 'function';\n  }\n\n  export namespace AssistantToolsFunction {\n    /**\n     * The function definition.\n     */\n    export interface Function {\n      /**\n       * A description of what the function does, used by the model to choose when and\n       * how to call the function.\n       */\n      description: string;\n\n      /**\n       * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain\n       * underscores and dashes, with a maximum length of 64.\n       */\n      name: string;\n\n      /**\n       * The parameters the functions accepts, described as a JSON Schema object. See the\n       * [guide](https://platform.openai.com/docs/guides/gpt/function-calling) for\n       * examples, and the\n       * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\n       * documentation about the format.\n       *\n       * To describe a function that accepts no parameters, provide the value\n       * `{\"type\": \"object\", \"properties\": {}}`.\n       */\n      parameters: Record<string, unknown>;\n    }\n  }\n}\n\nexport namespace Threads {\n  export import Thread = ThreadsAPI.Thread;\n  export import ThreadDeleted = ThreadsAPI.ThreadDeleted;\n  export import ThreadCreateParams = ThreadsAPI.ThreadCreateParams;\n  export import ThreadUpdateParams = ThreadsAPI.ThreadUpdateParams;\n  export import ThreadCreateAndRunParams = ThreadsAPI.ThreadCreateAndRunParams;\n  export import Runs = RunsAPI.Runs;\n  export import RequiredActionFunctionToolCall = RunsAPI.RequiredActionFunctionToolCall;\n  export import Run = RunsAPI.Run;\n  export import RunsPage = RunsAPI.RunsPage;\n  export import RunCreateParams = RunsAPI.RunCreateParams;\n  export import RunUpdateParams = RunsAPI.RunUpdateParams;\n  export import RunListParams = RunsAPI.RunListParams;\n  export import RunSubmitToolOutputsParams = RunsAPI.RunSubmitToolOutputsParams;\n  export import Messages = MessagesAPI.Messages;\n  export import MessageContentImageFile = MessagesAPI.MessageContentImageFile;\n  export import MessageContentText = MessagesAPI.MessageContentText;\n  export import ThreadMessage = MessagesAPI.ThreadMessage;\n  export import ThreadMessageDeleted = MessagesAPI.ThreadMessageDeleted;\n  export import ThreadMessagesPage = MessagesAPI.ThreadMessagesPage;\n  export import MessageCreateParams = MessagesAPI.MessageCreateParams;\n  export import MessageUpdateParams = MessagesAPI.MessageUpdateParams;\n  export import MessageListParams = MessagesAPI.MessageListParams;\n}\n"]},"metadata":{},"sourceType":"module"}