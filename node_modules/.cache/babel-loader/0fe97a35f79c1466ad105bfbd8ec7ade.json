{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyOperations = applyOperations;\n\nvar _wasmGen = require(\"@webassemblyjs/wasm-gen\");\n\nvar _encoder = require(\"@webassemblyjs/wasm-gen/lib/encoder\");\n\nvar _ast = require(\"@webassemblyjs/ast\");\n\nvar _helperWasmSection = require(\"@webassemblyjs/helper-wasm-section\");\n\nvar _helperBuffer = require(\"@webassemblyjs/helper-buffer\");\n\nvar _helperWasmBytecode = require(\"@webassemblyjs/helper-wasm-bytecode\");\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction shiftLocNodeByDelta(node, delta) {\n  (0, _ast.assertHasLoc)(node); // $FlowIgnore: assertHasLoc ensures that\n\n  node.loc.start.column += delta; // $FlowIgnore: assertHasLoc ensures that\n\n  node.loc.end.column += delta;\n}\n\nfunction applyUpdate(ast, uint8Buffer, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      oldNode = _ref2[0],\n      newNode = _ref2[1];\n\n  var deltaElements = 0;\n  (0, _ast.assertHasLoc)(oldNode);\n  var sectionName = (0, _helperWasmBytecode.getSectionForNode)(newNode);\n  var replacementByteArray = (0, _wasmGen.encodeNode)(newNode);\n  /**\n   * Replace new node as bytes\n   */\n\n  uint8Buffer = (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, // $FlowIgnore: assertHasLoc ensures that\n  oldNode.loc.start.column, // $FlowIgnore: assertHasLoc ensures that\n  oldNode.loc.end.column, replacementByteArray);\n  /**\n   * Update function body size if needed\n   */\n\n  if (sectionName === \"code\") {\n    // Find the parent func\n    (0, _ast.traverse)(ast, {\n      Func: function Func(_ref3) {\n        var node = _ref3.node;\n        var funcHasThisIntr = node.body.find(function (n) {\n          return n === newNode;\n        }) !== undefined; // Update func's body size if needed\n\n        if (funcHasThisIntr === true) {\n          // These are the old functions locations informations\n          (0, _ast.assertHasLoc)(node);\n          var oldNodeSize = (0, _wasmGen.encodeNode)(oldNode).length;\n          var bodySizeDeltaBytes = replacementByteArray.length - oldNodeSize;\n\n          if (bodySizeDeltaBytes !== 0) {\n            var newValue = node.metadata.bodySize + bodySizeDeltaBytes;\n            var newByteArray = (0, _encoder.encodeU32)(newValue); // function body size byte\n            // FIXME(sven): only handles one byte u32\n\n            var start = node.loc.start.column;\n            var end = start + 1;\n            uint8Buffer = (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start, end, newByteArray);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Update section size\n   */\n\n\n  var deltaBytes = replacementByteArray.length - (oldNode.loc.end.column - oldNode.loc.start.column); // Init location informations\n\n  newNode.loc = {\n    start: {\n      line: -1,\n      column: -1\n    },\n    end: {\n      line: -1,\n      column: -1\n    }\n  }; // Update new node end position\n  // $FlowIgnore: assertHasLoc ensures that\n\n  newNode.loc.start.column = oldNode.loc.start.column; // $FlowIgnore: assertHasLoc ensures that\n\n  newNode.loc.end.column = // $FlowIgnore: assertHasLoc ensures that\n  oldNode.loc.start.column + replacementByteArray.length;\n  return {\n    uint8Buffer: uint8Buffer,\n    deltaBytes: deltaBytes,\n    deltaElements: deltaElements\n  };\n}\n\nfunction applyDelete(ast, uint8Buffer, node) {\n  var deltaElements = -1; // since we removed an element\n\n  (0, _ast.assertHasLoc)(node);\n  var sectionName = (0, _helperWasmBytecode.getSectionForNode)(node);\n\n  if (sectionName === \"start\") {\n    var sectionMetadata = (0, _ast.getSectionMetadata)(ast, \"start\");\n    /**\n     * The start section only contains one element,\n     * we need to remove the whole section\n     */\n\n    uint8Buffer = (0, _helperWasmSection.removeSections)(ast, uint8Buffer, \"start\");\n\n    var _deltaBytes = -(sectionMetadata.size.value + 1);\n    /* section id */\n\n\n    return {\n      uint8Buffer: uint8Buffer,\n      deltaBytes: _deltaBytes,\n      deltaElements: deltaElements\n    };\n  } // replacement is nothing\n\n\n  var replacement = [];\n  uint8Buffer = (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, // $FlowIgnore: assertHasLoc ensures that\n  node.loc.start.column, // $FlowIgnore: assertHasLoc ensures that\n  node.loc.end.column, replacement);\n  /**\n   * Update section\n   */\n  // $FlowIgnore: assertHasLoc ensures that\n\n  var deltaBytes = -(node.loc.end.column - node.loc.start.column);\n  return {\n    uint8Buffer: uint8Buffer,\n    deltaBytes: deltaBytes,\n    deltaElements: deltaElements\n  };\n}\n\nfunction applyAdd(ast, uint8Buffer, node) {\n  var deltaElements = +1; // since we added an element\n\n  var sectionName = (0, _helperWasmBytecode.getSectionForNode)(node);\n  var sectionMetadata = (0, _ast.getSectionMetadata)(ast, sectionName); // Section doesn't exists, we create an empty one\n\n  if (typeof sectionMetadata === \"undefined\") {\n    var res = (0, _helperWasmSection.createEmptySection)(ast, uint8Buffer, sectionName);\n    uint8Buffer = res.uint8Buffer;\n    sectionMetadata = res.sectionMetadata;\n  }\n  /**\n   * check that the expressions were ended\n   */\n\n\n  if ((0, _ast.isFunc)(node)) {\n    // $FlowIgnore\n    var body = node.body;\n\n    if (body.length === 0 || body[body.length - 1].id !== \"end\") {\n      throw new Error(\"expressions must be ended\");\n    }\n  }\n\n  if ((0, _ast.isGlobal)(node)) {\n    // $FlowIgnore\n    var body = node.init;\n\n    if (body.length === 0 || body[body.length - 1].id !== \"end\") {\n      throw new Error(\"expressions must be ended\");\n    }\n  }\n  /**\n   * Add nodes\n   */\n\n\n  var newByteArray = (0, _wasmGen.encodeNode)(node); // The size of the section doesn't include the storage of the size itself\n  // we need to manually add it here\n\n  var start = (0, _ast.getEndOfSection)(sectionMetadata);\n  var end = start;\n  /**\n   * Update section\n   */\n\n  var deltaBytes = newByteArray.length;\n  uint8Buffer = (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start, end, newByteArray);\n  node.loc = {\n    start: {\n      line: -1,\n      column: start\n    },\n    end: {\n      line: -1,\n      column: start + deltaBytes\n    }\n  }; // for func add the additional metadata in the AST\n\n  if (node.type === \"Func\") {\n    // the size is the first byte\n    // FIXME(sven): handle LEB128 correctly here\n    var bodySize = newByteArray[0];\n    node.metadata = {\n      bodySize: bodySize\n    };\n  }\n\n  if (node.type !== \"IndexInFuncSection\") {\n    (0, _ast.orderedInsertNode)(ast.body[0], node);\n  }\n\n  return {\n    uint8Buffer: uint8Buffer,\n    deltaBytes: deltaBytes,\n    deltaElements: deltaElements\n  };\n}\n\nfunction applyOperations(ast, uint8Buffer, ops) {\n  ops.forEach(function (op) {\n    var state;\n    var sectionName;\n\n    switch (op.kind) {\n      case \"update\":\n        state = applyUpdate(ast, uint8Buffer, [op.oldNode, op.node]);\n        sectionName = (0, _helperWasmBytecode.getSectionForNode)(op.node);\n        break;\n\n      case \"delete\":\n        state = applyDelete(ast, uint8Buffer, op.node);\n        sectionName = (0, _helperWasmBytecode.getSectionForNode)(op.node);\n        break;\n\n      case \"add\":\n        state = applyAdd(ast, uint8Buffer, op.node);\n        sectionName = (0, _helperWasmBytecode.getSectionForNode)(op.node);\n        break;\n\n      default:\n        throw new Error(\"Unknown operation\");\n    }\n    /**\n     * Resize section vec size.\n     * If the length of the LEB-encoded size changes, this can change\n     * the byte length of the section and the offset for nodes in the\n     * section. So we do this first before resizing section byte size\n     * or shifting following operations' nodes.\n     */\n\n\n    if (state.deltaElements !== 0 && sectionName !== \"start\") {\n      var oldBufferLength = state.uint8Buffer.length;\n      state.uint8Buffer = (0, _helperWasmSection.resizeSectionVecSize)(ast, state.uint8Buffer, sectionName, state.deltaElements); // Infer bytes added/removed by comparing buffer lengths\n\n      state.deltaBytes += state.uint8Buffer.length - oldBufferLength;\n    }\n    /**\n     * Resize section byte size.\n     * If the length of the LEB-encoded size changes, this can change\n     * the offset for nodes in the section. So we do this before\n     * shifting following operations' nodes.\n     */\n\n\n    if (state.deltaBytes !== 0 && sectionName !== \"start\") {\n      var _oldBufferLength = state.uint8Buffer.length;\n      state.uint8Buffer = (0, _helperWasmSection.resizeSectionByteSize)(ast, state.uint8Buffer, sectionName, state.deltaBytes); // Infer bytes added/removed by comparing buffer lengths\n\n      state.deltaBytes += state.uint8Buffer.length - _oldBufferLength;\n    }\n    /**\n     * Shift following operation's nodes\n     */\n\n\n    if (state.deltaBytes !== 0) {\n      ops.forEach(function (op) {\n        // We don't need to handle add ops, they are positioning independent\n        switch (op.kind) {\n          case \"update\":\n            shiftLocNodeByDelta(op.oldNode, state.deltaBytes);\n            break;\n\n          case \"delete\":\n            shiftLocNodeByDelta(op.node, state.deltaBytes);\n            break;\n        }\n      });\n    }\n\n    uint8Buffer = state.uint8Buffer;\n  });\n  return uint8Buffer;\n}","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/@webassemblyjs/wasm-edit/lib/apply.js"],"names":["Object","defineProperty","exports","value","applyOperations","_wasmGen","require","_encoder","_ast","_helperWasmSection","_helperBuffer","_helperWasmBytecode","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","push","err","isArray","shiftLocNodeByDelta","node","delta","assertHasLoc","loc","start","column","end","applyUpdate","ast","uint8Buffer","_ref","_ref2","oldNode","newNode","deltaElements","sectionName","getSectionForNode","replacementByteArray","encodeNode","overrideBytesInBuffer","traverse","Func","_ref3","funcHasThisIntr","body","find","undefined","oldNodeSize","bodySizeDeltaBytes","newValue","metadata","bodySize","newByteArray","encodeU32","deltaBytes","line","applyDelete","sectionMetadata","getSectionMetadata","removeSections","_deltaBytes","size","replacement","applyAdd","res","createEmptySection","isFunc","id","Error","isGlobal","init","getEndOfSection","type","orderedInsertNode","ops","forEach","op","state","kind","oldBufferLength","resizeSectionVecSize","_oldBufferLength","resizeSectionByteSize"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyOperations = applyOperations;\n\nvar _wasmGen = require(\"@webassemblyjs/wasm-gen\");\n\nvar _encoder = require(\"@webassemblyjs/wasm-gen/lib/encoder\");\n\nvar _ast = require(\"@webassemblyjs/ast\");\n\nvar _helperWasmSection = require(\"@webassemblyjs/helper-wasm-section\");\n\nvar _helperBuffer = require(\"@webassemblyjs/helper-buffer\");\n\nvar _helperWasmBytecode = require(\"@webassemblyjs/helper-wasm-bytecode\");\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction shiftLocNodeByDelta(node, delta) {\n  (0, _ast.assertHasLoc)(node); // $FlowIgnore: assertHasLoc ensures that\n\n  node.loc.start.column += delta; // $FlowIgnore: assertHasLoc ensures that\n\n  node.loc.end.column += delta;\n}\n\nfunction applyUpdate(ast, uint8Buffer, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      oldNode = _ref2[0],\n      newNode = _ref2[1];\n\n  var deltaElements = 0;\n  (0, _ast.assertHasLoc)(oldNode);\n  var sectionName = (0, _helperWasmBytecode.getSectionForNode)(newNode);\n  var replacementByteArray = (0, _wasmGen.encodeNode)(newNode);\n  /**\n   * Replace new node as bytes\n   */\n\n  uint8Buffer = (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, // $FlowIgnore: assertHasLoc ensures that\n  oldNode.loc.start.column, // $FlowIgnore: assertHasLoc ensures that\n  oldNode.loc.end.column, replacementByteArray);\n  /**\n   * Update function body size if needed\n   */\n\n  if (sectionName === \"code\") {\n    // Find the parent func\n    (0, _ast.traverse)(ast, {\n      Func: function Func(_ref3) {\n        var node = _ref3.node;\n        var funcHasThisIntr = node.body.find(function (n) {\n          return n === newNode;\n        }) !== undefined; // Update func's body size if needed\n\n        if (funcHasThisIntr === true) {\n          // These are the old functions locations informations\n          (0, _ast.assertHasLoc)(node);\n          var oldNodeSize = (0, _wasmGen.encodeNode)(oldNode).length;\n          var bodySizeDeltaBytes = replacementByteArray.length - oldNodeSize;\n\n          if (bodySizeDeltaBytes !== 0) {\n            var newValue = node.metadata.bodySize + bodySizeDeltaBytes;\n            var newByteArray = (0, _encoder.encodeU32)(newValue); // function body size byte\n            // FIXME(sven): only handles one byte u32\n\n            var start = node.loc.start.column;\n            var end = start + 1;\n            uint8Buffer = (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start, end, newByteArray);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Update section size\n   */\n\n\n  var deltaBytes = replacementByteArray.length - (oldNode.loc.end.column - oldNode.loc.start.column); // Init location informations\n\n  newNode.loc = {\n    start: {\n      line: -1,\n      column: -1\n    },\n    end: {\n      line: -1,\n      column: -1\n    }\n  }; // Update new node end position\n  // $FlowIgnore: assertHasLoc ensures that\n\n  newNode.loc.start.column = oldNode.loc.start.column; // $FlowIgnore: assertHasLoc ensures that\n\n  newNode.loc.end.column = // $FlowIgnore: assertHasLoc ensures that\n  oldNode.loc.start.column + replacementByteArray.length;\n  return {\n    uint8Buffer: uint8Buffer,\n    deltaBytes: deltaBytes,\n    deltaElements: deltaElements\n  };\n}\n\nfunction applyDelete(ast, uint8Buffer, node) {\n  var deltaElements = -1; // since we removed an element\n\n  (0, _ast.assertHasLoc)(node);\n  var sectionName = (0, _helperWasmBytecode.getSectionForNode)(node);\n\n  if (sectionName === \"start\") {\n    var sectionMetadata = (0, _ast.getSectionMetadata)(ast, \"start\");\n    /**\n     * The start section only contains one element,\n     * we need to remove the whole section\n     */\n\n    uint8Buffer = (0, _helperWasmSection.removeSections)(ast, uint8Buffer, \"start\");\n\n    var _deltaBytes = -(sectionMetadata.size.value + 1);\n    /* section id */\n\n\n    return {\n      uint8Buffer: uint8Buffer,\n      deltaBytes: _deltaBytes,\n      deltaElements: deltaElements\n    };\n  } // replacement is nothing\n\n\n  var replacement = [];\n  uint8Buffer = (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, // $FlowIgnore: assertHasLoc ensures that\n  node.loc.start.column, // $FlowIgnore: assertHasLoc ensures that\n  node.loc.end.column, replacement);\n  /**\n   * Update section\n   */\n  // $FlowIgnore: assertHasLoc ensures that\n\n  var deltaBytes = -(node.loc.end.column - node.loc.start.column);\n  return {\n    uint8Buffer: uint8Buffer,\n    deltaBytes: deltaBytes,\n    deltaElements: deltaElements\n  };\n}\n\nfunction applyAdd(ast, uint8Buffer, node) {\n  var deltaElements = +1; // since we added an element\n\n  var sectionName = (0, _helperWasmBytecode.getSectionForNode)(node);\n  var sectionMetadata = (0, _ast.getSectionMetadata)(ast, sectionName); // Section doesn't exists, we create an empty one\n\n  if (typeof sectionMetadata === \"undefined\") {\n    var res = (0, _helperWasmSection.createEmptySection)(ast, uint8Buffer, sectionName);\n    uint8Buffer = res.uint8Buffer;\n    sectionMetadata = res.sectionMetadata;\n  }\n  /**\n   * check that the expressions were ended\n   */\n\n\n  if ((0, _ast.isFunc)(node)) {\n    // $FlowIgnore\n    var body = node.body;\n\n    if (body.length === 0 || body[body.length - 1].id !== \"end\") {\n      throw new Error(\"expressions must be ended\");\n    }\n  }\n\n  if ((0, _ast.isGlobal)(node)) {\n    // $FlowIgnore\n    var body = node.init;\n\n    if (body.length === 0 || body[body.length - 1].id !== \"end\") {\n      throw new Error(\"expressions must be ended\");\n    }\n  }\n  /**\n   * Add nodes\n   */\n\n\n  var newByteArray = (0, _wasmGen.encodeNode)(node); // The size of the section doesn't include the storage of the size itself\n  // we need to manually add it here\n\n  var start = (0, _ast.getEndOfSection)(sectionMetadata);\n  var end = start;\n  /**\n   * Update section\n   */\n\n  var deltaBytes = newByteArray.length;\n  uint8Buffer = (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start, end, newByteArray);\n  node.loc = {\n    start: {\n      line: -1,\n      column: start\n    },\n    end: {\n      line: -1,\n      column: start + deltaBytes\n    }\n  }; // for func add the additional metadata in the AST\n\n  if (node.type === \"Func\") {\n    // the size is the first byte\n    // FIXME(sven): handle LEB128 correctly here\n    var bodySize = newByteArray[0];\n    node.metadata = {\n      bodySize: bodySize\n    };\n  }\n\n  if (node.type !== \"IndexInFuncSection\") {\n    (0, _ast.orderedInsertNode)(ast.body[0], node);\n  }\n\n  return {\n    uint8Buffer: uint8Buffer,\n    deltaBytes: deltaBytes,\n    deltaElements: deltaElements\n  };\n}\n\nfunction applyOperations(ast, uint8Buffer, ops) {\n  ops.forEach(function (op) {\n    var state;\n    var sectionName;\n\n    switch (op.kind) {\n      case \"update\":\n        state = applyUpdate(ast, uint8Buffer, [op.oldNode, op.node]);\n        sectionName = (0, _helperWasmBytecode.getSectionForNode)(op.node);\n        break;\n\n      case \"delete\":\n        state = applyDelete(ast, uint8Buffer, op.node);\n        sectionName = (0, _helperWasmBytecode.getSectionForNode)(op.node);\n        break;\n\n      case \"add\":\n        state = applyAdd(ast, uint8Buffer, op.node);\n        sectionName = (0, _helperWasmBytecode.getSectionForNode)(op.node);\n        break;\n\n      default:\n        throw new Error(\"Unknown operation\");\n    }\n    /**\n     * Resize section vec size.\n     * If the length of the LEB-encoded size changes, this can change\n     * the byte length of the section and the offset for nodes in the\n     * section. So we do this first before resizing section byte size\n     * or shifting following operations' nodes.\n     */\n\n\n    if (state.deltaElements !== 0 && sectionName !== \"start\") {\n      var oldBufferLength = state.uint8Buffer.length;\n      state.uint8Buffer = (0, _helperWasmSection.resizeSectionVecSize)(ast, state.uint8Buffer, sectionName, state.deltaElements); // Infer bytes added/removed by comparing buffer lengths\n\n      state.deltaBytes += state.uint8Buffer.length - oldBufferLength;\n    }\n    /**\n     * Resize section byte size.\n     * If the length of the LEB-encoded size changes, this can change\n     * the offset for nodes in the section. So we do this before\n     * shifting following operations' nodes.\n     */\n\n\n    if (state.deltaBytes !== 0 && sectionName !== \"start\") {\n      var _oldBufferLength = state.uint8Buffer.length;\n      state.uint8Buffer = (0, _helperWasmSection.resizeSectionByteSize)(ast, state.uint8Buffer, sectionName, state.deltaBytes); // Infer bytes added/removed by comparing buffer lengths\n\n      state.deltaBytes += state.uint8Buffer.length - _oldBufferLength;\n    }\n    /**\n     * Shift following operation's nodes\n     */\n\n\n    if (state.deltaBytes !== 0) {\n      ops.forEach(function (op) {\n        // We don't need to handle add ops, they are positioning independent\n        switch (op.kind) {\n          case \"update\":\n            shiftLocNodeByDelta(op.oldNode, state.deltaBytes);\n            break;\n\n          case \"delete\":\n            shiftLocNodeByDelta(op.node, state.deltaBytes);\n            break;\n        }\n      });\n    }\n\n    uint8Buffer = state.uint8Buffer;\n  });\n  return uint8Buffer;\n}"]},"metadata":{},"sourceType":"script"}