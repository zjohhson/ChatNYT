{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@jridgewell/sourcemap-codec'), require('@jridgewell/resolve-uri')) : typeof define === 'function' && define.amd ? define(['exports', '@jridgewell/sourcemap-codec', '@jridgewell/resolve-uri'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.traceMapping = {}, global.sourcemapCodec, global.resolveURI));\n})(this, function (exports, sourcemapCodec, resolveUri) {\n  'use strict';\n\n  function _interopDefaultLegacy(e) {\n    return e && typeof e === 'object' && 'default' in e ? e : {\n      'default': e\n    };\n  }\n\n  var resolveUri__default = /*#__PURE__*/_interopDefaultLegacy(resolveUri);\n\n  function resolve(input, base) {\n    // The base is always treated as a directory, if it's not empty.\n    // https://github.com/mozilla/source-map/blob/8cb3ee57/lib/util.js#L327\n    // https://github.com/chromium/chromium/blob/da4adbb3/third_party/blink/renderer/devtools/front_end/sdk/SourceMap.js#L400-L401\n    if (base && !base.endsWith('/')) base += '/';\n    return resolveUri__default[\"default\"](input, base);\n  }\n  /**\n   * Removes everything after the last \"/\", but leaves the slash.\n   */\n\n\n  function stripFilename(path) {\n    if (!path) return '';\n    const index = path.lastIndexOf('/');\n    return path.slice(0, index + 1);\n  }\n\n  const COLUMN = 0;\n  const SOURCES_INDEX = 1;\n  const SOURCE_LINE = 2;\n  const SOURCE_COLUMN = 3;\n  const NAMES_INDEX = 4;\n  const REV_GENERATED_LINE = 1;\n  const REV_GENERATED_COLUMN = 2;\n\n  function maybeSort(mappings, owned) {\n    const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);\n    if (unsortedIndex === mappings.length) return mappings; // If we own the array (meaning we parsed it from JSON), then we're free to directly mutate it. If\n    // not, we do not want to modify the consumer's input array.\n\n    if (!owned) mappings = mappings.slice();\n\n    for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) {\n      mappings[i] = sortSegments(mappings[i], owned);\n    }\n\n    return mappings;\n  }\n\n  function nextUnsortedSegmentLine(mappings, start) {\n    for (let i = start; i < mappings.length; i++) {\n      if (!isSorted(mappings[i])) return i;\n    }\n\n    return mappings.length;\n  }\n\n  function isSorted(line) {\n    for (let j = 1; j < line.length; j++) {\n      if (line[j][COLUMN] < line[j - 1][COLUMN]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function sortSegments(line, owned) {\n    if (!owned) line = line.slice();\n    return line.sort(sortComparator);\n  }\n\n  function sortComparator(a, b) {\n    return a[COLUMN] - b[COLUMN];\n  }\n\n  let found = false;\n  /**\n   * A binary search implementation that returns the index if a match is found.\n   * If no match is found, then the left-index (the index associated with the item that comes just\n   * before the desired index) is returned. To maintain proper sort order, a splice would happen at\n   * the next index:\n   *\n   * ```js\n   * const array = [1, 3];\n   * const needle = 2;\n   * const index = binarySearch(array, needle, (item, needle) => item - needle);\n   *\n   * assert.equal(index, 0);\n   * array.splice(index + 1, 0, needle);\n   * assert.deepEqual(array, [1, 2, 3]);\n   * ```\n   */\n\n  function binarySearch(haystack, needle, low, high) {\n    while (low <= high) {\n      const mid = low + (high - low >> 1);\n      const cmp = haystack[mid][COLUMN] - needle;\n\n      if (cmp === 0) {\n        found = true;\n        return mid;\n      }\n\n      if (cmp < 0) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n\n    found = false;\n    return low - 1;\n  }\n\n  function upperBound(haystack, needle, index) {\n    for (let i = index + 1; i < haystack.length; index = i++) {\n      if (haystack[i][COLUMN] !== needle) break;\n    }\n\n    return index;\n  }\n\n  function lowerBound(haystack, needle, index) {\n    for (let i = index - 1; i >= 0; index = i--) {\n      if (haystack[i][COLUMN] !== needle) break;\n    }\n\n    return index;\n  }\n\n  function memoizedState() {\n    return {\n      lastKey: -1,\n      lastNeedle: -1,\n      lastIndex: -1\n    };\n  }\n  /**\n   * This overly complicated beast is just to record the last tested line/column and the resulting\n   * index, allowing us to skip a few tests if mappings are monotonically increasing.\n   */\n\n\n  function memoizedBinarySearch(haystack, needle, state, key) {\n    const {\n      lastKey,\n      lastNeedle,\n      lastIndex\n    } = state;\n    let low = 0;\n    let high = haystack.length - 1;\n\n    if (key === lastKey) {\n      if (needle === lastNeedle) {\n        found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle;\n        return lastIndex;\n      }\n\n      if (needle >= lastNeedle) {\n        // lastIndex may be -1 if the previous needle was not found.\n        low = lastIndex === -1 ? 0 : lastIndex;\n      } else {\n        high = lastIndex;\n      }\n    }\n\n    state.lastKey = key;\n    state.lastNeedle = needle;\n    return state.lastIndex = binarySearch(haystack, needle, low, high);\n  } // Rebuilds the original source files, with mappings that are ordered by source line/column instead\n  // of generated line/column.\n\n\n  function buildBySources(decoded, memos) {\n    const sources = memos.map(buildNullArray);\n\n    for (let i = 0; i < decoded.length; i++) {\n      const line = decoded[i];\n\n      for (let j = 0; j < line.length; j++) {\n        const seg = line[j];\n        if (seg.length === 1) continue;\n        const sourceIndex = seg[SOURCES_INDEX];\n        const sourceLine = seg[SOURCE_LINE];\n        const sourceColumn = seg[SOURCE_COLUMN];\n        const originalSource = sources[sourceIndex];\n        const originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []);\n        const memo = memos[sourceIndex]; // The binary search either found a match, or it found the left-index just before where the\n        // segment should go. Either way, we want to insert after that. And there may be multiple\n        // generated segments associated with an original location, so there may need to move several\n        // indexes before we find where we need to insert.\n\n        const index = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));\n        insert(originalLine, memo.lastIndex = index + 1, [sourceColumn, i, seg[COLUMN]]);\n      }\n    }\n\n    return sources;\n  }\n\n  function insert(array, index, value) {\n    for (let i = array.length; i > index; i--) {\n      array[i] = array[i - 1];\n    }\n\n    array[index] = value;\n  } // Null arrays allow us to use ordered index keys without actually allocating contiguous memory like\n  // a real array. We use a null-prototype object to avoid prototype pollution and deoptimizations.\n  // Numeric properties on objects are magically sorted in ascending order by the engine regardless of\n  // the insertion order. So, by setting any numeric keys, even out of order, we'll get ascending\n  // order when iterating with for-in.\n\n\n  function buildNullArray() {\n    return {\n      __proto__: null\n    };\n  }\n\n  const AnyMap = function (map, mapUrl) {\n    const parsed = typeof map === 'string' ? JSON.parse(map) : map;\n    if (!('sections' in parsed)) return new TraceMap(parsed, mapUrl);\n    const mappings = [];\n    const sources = [];\n    const sourcesContent = [];\n    const names = [];\n    recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, 0, 0, Infinity, Infinity);\n    const joined = {\n      version: 3,\n      file: parsed.file,\n      names,\n      sources,\n      sourcesContent,\n      mappings\n    };\n    return exports.presortedDecodedMap(joined);\n  };\n\n  function recurse(input, mapUrl, mappings, sources, sourcesContent, names, lineOffset, columnOffset, stopLine, stopColumn) {\n    const {\n      sections\n    } = input;\n\n    for (let i = 0; i < sections.length; i++) {\n      const {\n        map,\n        offset\n      } = sections[i];\n      let sl = stopLine;\n      let sc = stopColumn;\n\n      if (i + 1 < sections.length) {\n        const nextOffset = sections[i + 1].offset;\n        sl = Math.min(stopLine, lineOffset + nextOffset.line);\n\n        if (sl === stopLine) {\n          sc = Math.min(stopColumn, columnOffset + nextOffset.column);\n        } else if (sl < stopLine) {\n          sc = columnOffset + nextOffset.column;\n        }\n      }\n\n      addSection(map, mapUrl, mappings, sources, sourcesContent, names, lineOffset + offset.line, columnOffset + offset.column, sl, sc);\n    }\n  }\n\n  function addSection(input, mapUrl, mappings, sources, sourcesContent, names, lineOffset, columnOffset, stopLine, stopColumn) {\n    if ('sections' in input) return recurse(...arguments);\n    const map = new TraceMap(input, mapUrl);\n    const sourcesOffset = sources.length;\n    const namesOffset = names.length;\n    const decoded = exports.decodedMappings(map);\n    const {\n      resolvedSources,\n      sourcesContent: contents\n    } = map;\n    append(sources, resolvedSources);\n    append(names, map.names);\n    if (contents) append(sourcesContent, contents);else for (let i = 0; i < resolvedSources.length; i++) sourcesContent.push(null);\n\n    for (let i = 0; i < decoded.length; i++) {\n      const lineI = lineOffset + i; // We can only add so many lines before we step into the range that the next section's map\n      // controls. When we get to the last line, then we'll start checking the segments to see if\n      // they've crossed into the column range. But it may not have any columns that overstep, so we\n      // still need to check that we don't overstep lines, too.\n\n      if (lineI > stopLine) return; // The out line may already exist in mappings (if we're continuing the line started by a\n      // previous section). Or, we may have jumped ahead several lines to start this section.\n\n      const out = getLine(mappings, lineI); // On the 0th loop, the section's column offset shifts us forward. On all other lines (since the\n      // map can be multiple lines), it doesn't.\n\n      const cOffset = i === 0 ? columnOffset : 0;\n      const line = decoded[i];\n\n      for (let j = 0; j < line.length; j++) {\n        const seg = line[j];\n        const column = cOffset + seg[COLUMN]; // If this segment steps into the column range that the next section's map controls, we need\n        // to stop early.\n\n        if (lineI === stopLine && column >= stopColumn) return;\n\n        if (seg.length === 1) {\n          out.push([column]);\n          continue;\n        }\n\n        const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX];\n        const sourceLine = seg[SOURCE_LINE];\n        const sourceColumn = seg[SOURCE_COLUMN];\n        out.push(seg.length === 4 ? [column, sourcesIndex, sourceLine, sourceColumn] : [column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]]);\n      }\n    }\n  }\n\n  function append(arr, other) {\n    for (let i = 0; i < other.length; i++) arr.push(other[i]);\n  }\n\n  function getLine(arr, index) {\n    for (let i = arr.length; i <= index; i++) arr[i] = [];\n\n    return arr[index];\n  }\n\n  const LINE_GTR_ZERO = '`line` must be greater than 0 (lines start at line 1)';\n  const COL_GTR_EQ_ZERO = '`column` must be greater than or equal to 0 (columns start at column 0)';\n  const LEAST_UPPER_BOUND = -1;\n  const GREATEST_LOWER_BOUND = 1;\n  /**\n   * Returns the encoded (VLQ string) form of the SourceMap's mappings field.\n   */\n\n  exports.encodedMappings = void 0;\n  /**\n   * Returns the decoded (array of lines of segments) form of the SourceMap's mappings field.\n   */\n\n  exports.decodedMappings = void 0;\n  /**\n   * A low-level API to find the segment associated with a generated line/column (think, from a\n   * stack trace). Line and column here are 0-based, unlike `originalPositionFor`.\n   */\n\n  exports.traceSegment = void 0;\n  /**\n   * A higher-level API to find the source/line/column associated with a generated line/column\n   * (think, from a stack trace). Line is 1-based, but column is 0-based, due to legacy behavior in\n   * `source-map` library.\n   */\n\n  exports.originalPositionFor = void 0;\n  /**\n   * Finds the generated line/column position of the provided source/line/column source position.\n   */\n\n  exports.generatedPositionFor = void 0;\n  /**\n   * Finds all generated line/column positions of the provided source/line/column source position.\n   */\n\n  exports.allGeneratedPositionsFor = void 0;\n  /**\n   * Iterates each mapping in generated position order.\n   */\n\n  exports.eachMapping = void 0;\n  /**\n   * Retrieves the source content for a particular source, if its found. Returns null if not.\n   */\n\n  exports.sourceContentFor = void 0;\n  /**\n   * A helper that skips sorting of the input map's mappings array, which can be expensive for larger\n   * maps.\n   */\n\n  exports.presortedDecodedMap = void 0;\n  /**\n   * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n   * a sourcemap, or to JSON.stringify.\n   */\n\n  exports.decodedMap = void 0;\n  /**\n   * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n   * a sourcemap, or to JSON.stringify.\n   */\n\n  exports.encodedMap = void 0;\n\n  class TraceMap {\n    constructor(map, mapUrl) {\n      const isString = typeof map === 'string';\n      if (!isString && map._decodedMemo) return map;\n      const parsed = isString ? JSON.parse(map) : map;\n      const {\n        version,\n        file,\n        names,\n        sourceRoot,\n        sources,\n        sourcesContent\n      } = parsed;\n      this.version = version;\n      this.file = file;\n      this.names = names || [];\n      this.sourceRoot = sourceRoot;\n      this.sources = sources;\n      this.sourcesContent = sourcesContent;\n      const from = resolve(sourceRoot || '', stripFilename(mapUrl));\n      this.resolvedSources = sources.map(s => resolve(s || '', from));\n      const {\n        mappings\n      } = parsed;\n\n      if (typeof mappings === 'string') {\n        this._encoded = mappings;\n        this._decoded = undefined;\n      } else {\n        this._encoded = undefined;\n        this._decoded = maybeSort(mappings, isString);\n      }\n\n      this._decodedMemo = memoizedState();\n      this._bySources = undefined;\n      this._bySourceMemos = undefined;\n    }\n\n  }\n\n  (() => {\n    exports.encodedMappings = map => {\n      var _a;\n\n      return (_a = map._encoded) !== null && _a !== void 0 ? _a : map._encoded = sourcemapCodec.encode(map._decoded);\n    };\n\n    exports.decodedMappings = map => {\n      return map._decoded || (map._decoded = sourcemapCodec.decode(map._encoded));\n    };\n\n    exports.traceSegment = (map, line, column) => {\n      const decoded = exports.decodedMappings(map); // It's common for parent source maps to have pointers to lines that have no\n      // mapping (like a \"//# sourceMappingURL=\") at the end of the child file.\n\n      if (line >= decoded.length) return null;\n      const segments = decoded[line];\n      const index = traceSegmentInternal(segments, map._decodedMemo, line, column, GREATEST_LOWER_BOUND);\n      return index === -1 ? null : segments[index];\n    };\n\n    exports.originalPositionFor = (map, _ref) => {\n      let {\n        line,\n        column,\n        bias\n      } = _ref;\n      line--;\n      if (line < 0) throw new Error(LINE_GTR_ZERO);\n      if (column < 0) throw new Error(COL_GTR_EQ_ZERO);\n      const decoded = exports.decodedMappings(map); // It's common for parent source maps to have pointers to lines that have no\n      // mapping (like a \"//# sourceMappingURL=\") at the end of the child file.\n\n      if (line >= decoded.length) return OMapping(null, null, null, null);\n      const segments = decoded[line];\n      const index = traceSegmentInternal(segments, map._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);\n      if (index === -1) return OMapping(null, null, null, null);\n      const segment = segments[index];\n      if (segment.length === 1) return OMapping(null, null, null, null);\n      const {\n        names,\n        resolvedSources\n      } = map;\n      return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], segment.length === 5 ? names[segment[NAMES_INDEX]] : null);\n    };\n\n    exports.allGeneratedPositionsFor = (map, _ref2) => {\n      let {\n        source,\n        line,\n        column,\n        bias\n      } = _ref2;\n      // SourceMapConsumer uses LEAST_UPPER_BOUND for some reason, so we follow suit.\n      return generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true);\n    };\n\n    exports.generatedPositionFor = (map, _ref3) => {\n      let {\n        source,\n        line,\n        column,\n        bias\n      } = _ref3;\n      return generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false);\n    };\n\n    exports.eachMapping = (map, cb) => {\n      const decoded = exports.decodedMappings(map);\n      const {\n        names,\n        resolvedSources\n      } = map;\n\n      for (let i = 0; i < decoded.length; i++) {\n        const line = decoded[i];\n\n        for (let j = 0; j < line.length; j++) {\n          const seg = line[j];\n          const generatedLine = i + 1;\n          const generatedColumn = seg[0];\n          let source = null;\n          let originalLine = null;\n          let originalColumn = null;\n          let name = null;\n\n          if (seg.length !== 1) {\n            source = resolvedSources[seg[1]];\n            originalLine = seg[2] + 1;\n            originalColumn = seg[3];\n          }\n\n          if (seg.length === 5) name = names[seg[4]];\n          cb({\n            generatedLine,\n            generatedColumn,\n            source,\n            originalLine,\n            originalColumn,\n            name\n          });\n        }\n      }\n    };\n\n    exports.sourceContentFor = (map, source) => {\n      const {\n        sources,\n        resolvedSources,\n        sourcesContent\n      } = map;\n      if (sourcesContent == null) return null;\n      let index = sources.indexOf(source);\n      if (index === -1) index = resolvedSources.indexOf(source);\n      return index === -1 ? null : sourcesContent[index];\n    };\n\n    exports.presortedDecodedMap = (map, mapUrl) => {\n      const tracer = new TraceMap(clone(map, []), mapUrl);\n      tracer._decoded = map.mappings;\n      return tracer;\n    };\n\n    exports.decodedMap = map => {\n      return clone(map, exports.decodedMappings(map));\n    };\n\n    exports.encodedMap = map => {\n      return clone(map, exports.encodedMappings(map));\n    };\n\n    function generatedPosition(map, source, line, column, bias, all) {\n      line--;\n      if (line < 0) throw new Error(LINE_GTR_ZERO);\n      if (column < 0) throw new Error(COL_GTR_EQ_ZERO);\n      const {\n        sources,\n        resolvedSources\n      } = map;\n      let sourceIndex = sources.indexOf(source);\n      if (sourceIndex === -1) sourceIndex = resolvedSources.indexOf(source);\n      if (sourceIndex === -1) return all ? [] : GMapping(null, null);\n      const generated = map._bySources || (map._bySources = buildBySources(exports.decodedMappings(map), map._bySourceMemos = sources.map(memoizedState)));\n      const segments = generated[sourceIndex][line];\n      if (segments == null) return all ? [] : GMapping(null, null);\n      const memo = map._bySourceMemos[sourceIndex];\n      if (all) return sliceGeneratedPositions(segments, memo, line, column, bias);\n      const index = traceSegmentInternal(segments, memo, line, column, bias);\n      if (index === -1) return GMapping(null, null);\n      const segment = segments[index];\n      return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);\n    }\n  })();\n\n  function clone(map, mappings) {\n    return {\n      version: map.version,\n      file: map.file,\n      names: map.names,\n      sourceRoot: map.sourceRoot,\n      sources: map.sources,\n      sourcesContent: map.sourcesContent,\n      mappings\n    };\n  }\n\n  function OMapping(source, line, column, name) {\n    return {\n      source,\n      line,\n      column,\n      name\n    };\n  }\n\n  function GMapping(line, column) {\n    return {\n      line,\n      column\n    };\n  }\n\n  function traceSegmentInternal(segments, memo, line, column, bias) {\n    let index = memoizedBinarySearch(segments, column, memo, line);\n\n    if (found) {\n      index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index);\n    } else if (bias === LEAST_UPPER_BOUND) index++;\n\n    if (index === -1 || index === segments.length) return -1;\n    return index;\n  }\n\n  function sliceGeneratedPositions(segments, memo, line, column, bias) {\n    let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND); // We ignored the bias when tracing the segment so that we're guarnateed to find the first (in\n    // insertion order) segment that matched. Even if we did respect the bias when tracing, we would\n    // still need to call `lowerBound()` to find the first segment, which is slower than just looking\n    // for the GREATEST_LOWER_BOUND to begin with. The only difference that matters for us is when the\n    // binary search didn't match, in which case GREATEST_LOWER_BOUND just needs to increment to\n    // match LEAST_UPPER_BOUND.\n\n    if (!found && bias === LEAST_UPPER_BOUND) min++;\n    if (min === -1 || min === segments.length) return []; // We may have found the segment that started at an earlier column. If this is the case, then we\n    // need to slice all generated segments that match _that_ column, because all such segments span\n    // to our desired column.\n\n    const matchedColumn = found ? column : segments[min][COLUMN]; // The binary search is not guaranteed to find the lower bound when a match wasn't found.\n\n    if (!found) min = lowerBound(segments, matchedColumn, min);\n    const max = upperBound(segments, matchedColumn, min);\n    const result = [];\n\n    for (; min <= max; min++) {\n      const segment = segments[min];\n      result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));\n    }\n\n    return result;\n  }\n\n  exports.AnyMap = AnyMap;\n  exports.GREATEST_LOWER_BOUND = GREATEST_LOWER_BOUND;\n  exports.LEAST_UPPER_BOUND = LEAST_UPPER_BOUND;\n  exports.TraceMap = TraceMap;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"mappings":"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","names":["resolve","input","base","endsWith","resolveUri","path","index","lastIndexOf","slice","COLUMN","SOURCES_INDEX","SOURCE_LINE","SOURCE_COLUMN","NAMES_INDEX","REV_GENERATED_LINE","REV_GENERATED_COLUMN","maybeSort","mappings","owned","unsortedIndex","nextUnsortedSegmentLine","length","i","sortSegments","start","isSorted","line","j","sort","sortComparator","a","b","found","binarySearch","haystack","needle","low","high","mid","cmp","upperBound","lowerBound","memoizedState","lastKey","lastNeedle","lastIndex","memoizedBinarySearch","state","key","buildBySources","decoded","memos","sources","map","buildNullArray","seg","sourceIndex","sourceLine","sourceColumn","originalSource","originalLine","memo","insert","array","value","__proto__","mapUrl","parsed","JSON","parse","TraceMap","sourcesContent","names","recurse","Infinity","joined","version","file","presortedDecodedMap","lineOffset","columnOffset","stopLine","stopColumn","sections","offset","sl","sc","nextOffset","Math","min","column","addSection","arguments","sourcesOffset","namesOffset","decodedMappings","resolvedSources","contents","append","push","lineI","out","getLine","cOffset","sourcesIndex","arr","other","LINE_GTR_ZERO","COL_GTR_EQ_ZERO","GREATEST_LOWER_BOUND","encodedMappings","traceSegment","originalPositionFor","generatedPositionFor","allGeneratedPositionsFor","eachMapping","sourceContentFor","decodedMap","encodedMap","constructor","isString","_decodedMemo","sourceRoot","from","stripFilename","s","_encoded","_decoded","undefined","_bySources","_bySourceMemos","_a","encode","decode","segments","traceSegmentInternal","bias","Error","OMapping","segment","source","generatedPosition","LEAST_UPPER_BOUND","cb","generatedLine","generatedColumn","originalColumn","name","indexOf","tracer","clone","all","GMapping","generated","sliceGeneratedPositions","bsFound","matchedColumn","max","result"],"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/@jridgewell/trace-mapping/src/resolve.ts","/Users/zachjohnson/Desktop/ChatNYT/node_modules/@jridgewell/trace-mapping/src/strip-filename.ts","/Users/zachjohnson/Desktop/ChatNYT/node_modules/@jridgewell/trace-mapping/src/sourcemap-segment.ts","/Users/zachjohnson/Desktop/ChatNYT/node_modules/@jridgewell/trace-mapping/src/sort.ts","/Users/zachjohnson/Desktop/ChatNYT/node_modules/@jridgewell/trace-mapping/src/binary-search.ts","/Users/zachjohnson/Desktop/ChatNYT/node_modules/@jridgewell/trace-mapping/src/by-source.ts","/Users/zachjohnson/Desktop/ChatNYT/node_modules/@jridgewell/trace-mapping/src/any-map.ts","/Users/zachjohnson/Desktop/ChatNYT/node_modules/@jridgewell/trace-mapping/src/trace-mapping.ts"],"sourcesContent":["import resolveUri from '@jridgewell/resolve-uri';\n\nexport default function resolve(input: string, base: string | undefined): string {\n  // The base is always treated as a directory, if it's not empty.\n  // https://github.com/mozilla/source-map/blob/8cb3ee57/lib/util.js#L327\n  // https://github.com/chromium/chromium/blob/da4adbb3/third_party/blink/renderer/devtools/front_end/sdk/SourceMap.js#L400-L401\n  if (base && !base.endsWith('/')) base += '/';\n\n  return resolveUri(input, base);\n}\n","/**\n * Removes everything after the last \"/\", but leaves the slash.\n */\nexport default function stripFilename(path: string | undefined | null): string {\n  if (!path) return '';\n  const index = path.lastIndexOf('/');\n  return path.slice(0, index + 1);\n}\n","type GeneratedColumn = number;\ntype SourcesIndex = number;\ntype SourceLine = number;\ntype SourceColumn = number;\ntype NamesIndex = number;\n\ntype GeneratedLine = number;\n\nexport type SourceMapSegment =\n  | [GeneratedColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn, NamesIndex];\n\nexport type ReverseSegment = [SourceColumn, GeneratedLine, GeneratedColumn];\n\nexport const COLUMN = 0;\nexport const SOURCES_INDEX = 1;\nexport const SOURCE_LINE = 2;\nexport const SOURCE_COLUMN = 3;\nexport const NAMES_INDEX = 4;\n\nexport const REV_GENERATED_LINE = 1;\nexport const REV_GENERATED_COLUMN = 2;\n","import { COLUMN } from './sourcemap-segment';\n\nimport type { SourceMapSegment } from './sourcemap-segment';\n\nexport default function maybeSort(\n  mappings: SourceMapSegment[][],\n  owned: boolean,\n): SourceMapSegment[][] {\n  const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);\n  if (unsortedIndex === mappings.length) return mappings;\n\n  // If we own the array (meaning we parsed it from JSON), then we're free to directly mutate it. If\n  // not, we do not want to modify the consumer's input array.\n  if (!owned) mappings = mappings.slice();\n\n  for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) {\n    mappings[i] = sortSegments(mappings[i], owned);\n  }\n  return mappings;\n}\n\nfunction nextUnsortedSegmentLine(mappings: SourceMapSegment[][], start: number): number {\n  for (let i = start; i < mappings.length; i++) {\n    if (!isSorted(mappings[i])) return i;\n  }\n  return mappings.length;\n}\n\nfunction isSorted(line: SourceMapSegment[]): boolean {\n  for (let j = 1; j < line.length; j++) {\n    if (line[j][COLUMN] < line[j - 1][COLUMN]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction sortSegments(line: SourceMapSegment[], owned: boolean): SourceMapSegment[] {\n  if (!owned) line = line.slice();\n  return line.sort(sortComparator);\n}\n\nfunction sortComparator(a: SourceMapSegment, b: SourceMapSegment): number {\n  return a[COLUMN] - b[COLUMN];\n}\n","import type { SourceMapSegment, ReverseSegment } from './sourcemap-segment';\nimport { COLUMN } from './sourcemap-segment';\n\nexport type MemoState = {\n  lastKey: number;\n  lastNeedle: number;\n  lastIndex: number;\n};\n\nexport let found = false;\n\n/**\n * A binary search implementation that returns the index if a match is found.\n * If no match is found, then the left-index (the index associated with the item that comes just\n * before the desired index) is returned. To maintain proper sort order, a splice would happen at\n * the next index:\n *\n * ```js\n * const array = [1, 3];\n * const needle = 2;\n * const index = binarySearch(array, needle, (item, needle) => item - needle);\n *\n * assert.equal(index, 0);\n * array.splice(index + 1, 0, needle);\n * assert.deepEqual(array, [1, 2, 3]);\n * ```\n */\nexport function binarySearch(\n  haystack: SourceMapSegment[] | ReverseSegment[],\n  needle: number,\n  low: number,\n  high: number,\n): number {\n  while (low <= high) {\n    const mid = low + ((high - low) >> 1);\n    const cmp = haystack[mid][COLUMN] - needle;\n\n    if (cmp === 0) {\n      found = true;\n      return mid;\n    }\n\n    if (cmp < 0) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n\n  found = false;\n  return low - 1;\n}\n\nexport function upperBound(\n  haystack: SourceMapSegment[] | ReverseSegment[],\n  needle: number,\n  index: number,\n): number {\n  for (let i = index + 1; i < haystack.length; index = i++) {\n    if (haystack[i][COLUMN] !== needle) break;\n  }\n  return index;\n}\n\nexport function lowerBound(\n  haystack: SourceMapSegment[] | ReverseSegment[],\n  needle: number,\n  index: number,\n): number {\n  for (let i = index - 1; i >= 0; index = i--) {\n    if (haystack[i][COLUMN] !== needle) break;\n  }\n  return index;\n}\n\nexport function memoizedState(): MemoState {\n  return {\n    lastKey: -1,\n    lastNeedle: -1,\n    lastIndex: -1,\n  };\n}\n\n/**\n * This overly complicated beast is just to record the last tested line/column and the resulting\n * index, allowing us to skip a few tests if mappings are monotonically increasing.\n */\nexport function memoizedBinarySearch(\n  haystack: SourceMapSegment[] | ReverseSegment[],\n  needle: number,\n  state: MemoState,\n  key: number,\n): number {\n  const { lastKey, lastNeedle, lastIndex } = state;\n\n  let low = 0;\n  let high = haystack.length - 1;\n  if (key === lastKey) {\n    if (needle === lastNeedle) {\n      found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle;\n      return lastIndex;\n    }\n\n    if (needle >= lastNeedle) {\n      // lastIndex may be -1 if the previous needle was not found.\n      low = lastIndex === -1 ? 0 : lastIndex;\n    } else {\n      high = lastIndex;\n    }\n  }\n  state.lastKey = key;\n  state.lastNeedle = needle;\n\n  return (state.lastIndex = binarySearch(haystack, needle, low, high));\n}\n","import { COLUMN, SOURCES_INDEX, SOURCE_LINE, SOURCE_COLUMN } from './sourcemap-segment';\nimport { memoizedBinarySearch, upperBound } from './binary-search';\n\nimport type { ReverseSegment, SourceMapSegment } from './sourcemap-segment';\nimport type { MemoState } from './binary-search';\n\nexport type Source = {\n  __proto__: null;\n  [line: number]: Exclude<ReverseSegment, [number]>[];\n};\n\n// Rebuilds the original source files, with mappings that are ordered by source line/column instead\n// of generated line/column.\nexport default function buildBySources(\n  decoded: readonly SourceMapSegment[][],\n  memos: MemoState[],\n): Source[] {\n  const sources: Source[] = memos.map(buildNullArray);\n\n  for (let i = 0; i < decoded.length; i++) {\n    const line = decoded[i];\n    for (let j = 0; j < line.length; j++) {\n      const seg = line[j];\n      if (seg.length === 1) continue;\n\n      const sourceIndex = seg[SOURCES_INDEX];\n      const sourceLine = seg[SOURCE_LINE];\n      const sourceColumn = seg[SOURCE_COLUMN];\n      const originalSource = sources[sourceIndex];\n      const originalLine = (originalSource[sourceLine] ||= []);\n      const memo = memos[sourceIndex];\n\n      // The binary search either found a match, or it found the left-index just before where the\n      // segment should go. Either way, we want to insert after that. And there may be multiple\n      // generated segments associated with an original location, so there may need to move several\n      // indexes before we find where we need to insert.\n      const index = upperBound(\n        originalLine,\n        sourceColumn,\n        memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine),\n      );\n\n      insert(originalLine, (memo.lastIndex = index + 1), [sourceColumn, i, seg[COLUMN]]);\n    }\n  }\n\n  return sources;\n}\n\nfunction insert<T>(array: T[], index: number, value: T) {\n  for (let i = array.length; i > index; i--) {\n    array[i] = array[i - 1];\n  }\n  array[index] = value;\n}\n\n// Null arrays allow us to use ordered index keys without actually allocating contiguous memory like\n// a real array. We use a null-prototype object to avoid prototype pollution and deoptimizations.\n// Numeric properties on objects are magically sorted in ascending order by the engine regardless of\n// the insertion order. So, by setting any numeric keys, even out of order, we'll get ascending\n// order when iterating with for-in.\nfunction buildNullArray<T extends { __proto__: null }>(): T {\n  return { __proto__: null } as T;\n}\n","import { TraceMap, presortedDecodedMap, decodedMappings } from './trace-mapping';\nimport {\n  COLUMN,\n  SOURCES_INDEX,\n  SOURCE_LINE,\n  SOURCE_COLUMN,\n  NAMES_INDEX,\n} from './sourcemap-segment';\n\nimport type {\n  Section,\n  SectionedSourceMap,\n  DecodedSourceMap,\n  SectionedSourceMapInput,\n  Ro,\n} from './types';\nimport type { SourceMapSegment } from './sourcemap-segment';\n\ntype AnyMap = {\n  new (map: SectionedSourceMapInput, mapUrl?: string | null): TraceMap;\n  (map: SectionedSourceMapInput, mapUrl?: string | null): TraceMap;\n};\n\nexport const AnyMap: AnyMap = function (map, mapUrl) {\n  const parsed =\n    typeof map === 'string' ? (JSON.parse(map) as Exclude<SectionedSourceMapInput, string>) : map;\n\n  if (!('sections' in parsed)) return new TraceMap(parsed, mapUrl);\n\n  const mappings: SourceMapSegment[][] = [];\n  const sources: string[] = [];\n  const sourcesContent: (string | null)[] = [];\n  const names: string[] = [];\n\n  recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, 0, 0, Infinity, Infinity);\n\n  const joined: DecodedSourceMap = {\n    version: 3,\n    file: parsed.file,\n    names,\n    sources,\n    sourcesContent,\n    mappings,\n  };\n\n  return presortedDecodedMap(joined);\n} as AnyMap;\n\nfunction recurse(\n  input: Ro<SectionedSourceMap>,\n  mapUrl: string | null | undefined,\n  mappings: SourceMapSegment[][],\n  sources: string[],\n  sourcesContent: (string | null)[],\n  names: string[],\n  lineOffset: number,\n  columnOffset: number,\n  stopLine: number,\n  stopColumn: number,\n) {\n  const { sections } = input;\n  for (let i = 0; i < sections.length; i++) {\n    const { map, offset } = sections[i];\n\n    let sl = stopLine;\n    let sc = stopColumn;\n    if (i + 1 < sections.length) {\n      const nextOffset = sections[i + 1].offset;\n      sl = Math.min(stopLine, lineOffset + nextOffset.line);\n\n      if (sl === stopLine) {\n        sc = Math.min(stopColumn, columnOffset + nextOffset.column);\n      } else if (sl < stopLine) {\n        sc = columnOffset + nextOffset.column;\n      }\n    }\n\n    addSection(\n      map,\n      mapUrl,\n      mappings,\n      sources,\n      sourcesContent,\n      names,\n      lineOffset + offset.line,\n      columnOffset + offset.column,\n      sl,\n      sc,\n    );\n  }\n}\n\nfunction addSection(\n  input: Ro<Section['map']>,\n  mapUrl: string | null | undefined,\n  mappings: SourceMapSegment[][],\n  sources: string[],\n  sourcesContent: (string | null)[],\n  names: string[],\n  lineOffset: number,\n  columnOffset: number,\n  stopLine: number,\n  stopColumn: number,\n) {\n  if ('sections' in input) return recurse(...(arguments as unknown as Parameters<typeof recurse>));\n\n  const map = new TraceMap(input, mapUrl);\n  const sourcesOffset = sources.length;\n  const namesOffset = names.length;\n  const decoded = decodedMappings(map);\n  const { resolvedSources, sourcesContent: contents } = map;\n\n  append(sources, resolvedSources);\n  append(names, map.names);\n  if (contents) append(sourcesContent, contents);\n  else for (let i = 0; i < resolvedSources.length; i++) sourcesContent.push(null);\n\n  for (let i = 0; i < decoded.length; i++) {\n    const lineI = lineOffset + i;\n\n    // We can only add so many lines before we step into the range that the next section's map\n    // controls. When we get to the last line, then we'll start checking the segments to see if\n    // they've crossed into the column range. But it may not have any columns that overstep, so we\n    // still need to check that we don't overstep lines, too.\n    if (lineI > stopLine) return;\n\n    // The out line may already exist in mappings (if we're continuing the line started by a\n    // previous section). Or, we may have jumped ahead several lines to start this section.\n    const out = getLine(mappings, lineI);\n    // On the 0th loop, the section's column offset shifts us forward. On all other lines (since the\n    // map can be multiple lines), it doesn't.\n    const cOffset = i === 0 ? columnOffset : 0;\n\n    const line = decoded[i];\n    for (let j = 0; j < line.length; j++) {\n      const seg = line[j];\n      const column = cOffset + seg[COLUMN];\n\n      // If this segment steps into the column range that the next section's map controls, we need\n      // to stop early.\n      if (lineI === stopLine && column >= stopColumn) return;\n\n      if (seg.length === 1) {\n        out.push([column]);\n        continue;\n      }\n\n      const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX];\n      const sourceLine = seg[SOURCE_LINE];\n      const sourceColumn = seg[SOURCE_COLUMN];\n      out.push(\n        seg.length === 4\n          ? [column, sourcesIndex, sourceLine, sourceColumn]\n          : [column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]],\n      );\n    }\n  }\n}\n\nfunction append<T>(arr: T[], other: T[]) {\n  for (let i = 0; i < other.length; i++) arr.push(other[i]);\n}\n\nfunction getLine<T>(arr: T[][], index: number): T[] {\n  for (let i = arr.length; i <= index; i++) arr[i] = [];\n  return arr[index];\n}\n","import { encode, decode } from '@jridgewell/sourcemap-codec';\n\nimport resolve from './resolve';\nimport stripFilename from './strip-filename';\nimport maybeSort from './sort';\nimport buildBySources from './by-source';\nimport {\n  memoizedState,\n  memoizedBinarySearch,\n  upperBound,\n  lowerBound,\n  found as bsFound,\n} from './binary-search';\nimport {\n  COLUMN,\n  SOURCES_INDEX,\n  SOURCE_LINE,\n  SOURCE_COLUMN,\n  NAMES_INDEX,\n  REV_GENERATED_LINE,\n  REV_GENERATED_COLUMN,\n} from './sourcemap-segment';\n\nimport type { SourceMapSegment, ReverseSegment } from './sourcemap-segment';\nimport type {\n  SourceMapV3,\n  DecodedSourceMap,\n  EncodedSourceMap,\n  InvalidOriginalMapping,\n  OriginalMapping,\n  InvalidGeneratedMapping,\n  GeneratedMapping,\n  SourceMapInput,\n  Needle,\n  SourceNeedle,\n  SourceMap,\n  EachMapping,\n  Bias,\n} from './types';\nimport type { Source } from './by-source';\nimport type { MemoState } from './binary-search';\n\nexport type { SourceMapSegment } from './sourcemap-segment';\nexport type {\n  SourceMapInput,\n  SectionedSourceMapInput,\n  DecodedSourceMap,\n  EncodedSourceMap,\n  SectionedSourceMap,\n  InvalidOriginalMapping,\n  OriginalMapping as Mapping,\n  OriginalMapping,\n  InvalidGeneratedMapping,\n  GeneratedMapping,\n  EachMapping,\n} from './types';\n\nconst LINE_GTR_ZERO = '`line` must be greater than 0 (lines start at line 1)';\nconst COL_GTR_EQ_ZERO = '`column` must be greater than or equal to 0 (columns start at column 0)';\n\nexport const LEAST_UPPER_BOUND = -1;\nexport const GREATEST_LOWER_BOUND = 1;\n\n/**\n * Returns the encoded (VLQ string) form of the SourceMap's mappings field.\n */\nexport let encodedMappings: (map: TraceMap) => EncodedSourceMap['mappings'];\n\n/**\n * Returns the decoded (array of lines of segments) form of the SourceMap's mappings field.\n */\nexport let decodedMappings: (map: TraceMap) => Readonly<DecodedSourceMap['mappings']>;\n\n/**\n * A low-level API to find the segment associated with a generated line/column (think, from a\n * stack trace). Line and column here are 0-based, unlike `originalPositionFor`.\n */\nexport let traceSegment: (\n  map: TraceMap,\n  line: number,\n  column: number,\n) => Readonly<SourceMapSegment> | null;\n\n/**\n * A higher-level API to find the source/line/column associated with a generated line/column\n * (think, from a stack trace). Line is 1-based, but column is 0-based, due to legacy behavior in\n * `source-map` library.\n */\nexport let originalPositionFor: (\n  map: TraceMap,\n  needle: Needle,\n) => OriginalMapping | InvalidOriginalMapping;\n\n/**\n * Finds the generated line/column position of the provided source/line/column source position.\n */\nexport let generatedPositionFor: (\n  map: TraceMap,\n  needle: SourceNeedle,\n) => GeneratedMapping | InvalidGeneratedMapping;\n\n/**\n * Finds all generated line/column positions of the provided source/line/column source position.\n */\nexport let allGeneratedPositionsFor: (map: TraceMap, needle: SourceNeedle) => GeneratedMapping[];\n\n/**\n * Iterates each mapping in generated position order.\n */\nexport let eachMapping: (map: TraceMap, cb: (mapping: EachMapping) => void) => void;\n\n/**\n * Retrieves the source content for a particular source, if its found. Returns null if not.\n */\nexport let sourceContentFor: (map: TraceMap, source: string) => string | null;\n\n/**\n * A helper that skips sorting of the input map's mappings array, which can be expensive for larger\n * maps.\n */\nexport let presortedDecodedMap: (map: DecodedSourceMap, mapUrl?: string) => TraceMap;\n\n/**\n * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport let decodedMap: (\n  map: TraceMap,\n) => Omit<DecodedSourceMap, 'mappings'> & { mappings: readonly SourceMapSegment[][] };\n\n/**\n * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport let encodedMap: (map: TraceMap) => EncodedSourceMap;\n\nexport { AnyMap } from './any-map';\n\nexport class TraceMap implements SourceMap {\n  declare version: SourceMapV3['version'];\n  declare file: SourceMapV3['file'];\n  declare names: SourceMapV3['names'];\n  declare sourceRoot: SourceMapV3['sourceRoot'];\n  declare sources: SourceMapV3['sources'];\n  declare sourcesContent: SourceMapV3['sourcesContent'];\n\n  declare resolvedSources: string[];\n  private declare _encoded: string | undefined;\n\n  private declare _decoded: SourceMapSegment[][] | undefined;\n  private declare _decodedMemo: MemoState;\n\n  private declare _bySources: Source[] | undefined;\n  private declare _bySourceMemos: MemoState[] | undefined;\n\n  constructor(map: SourceMapInput, mapUrl?: string | null) {\n    const isString = typeof map === 'string';\n\n    if (!isString && (map as unknown as { _decodedMemo: any })._decodedMemo) return map as TraceMap;\n\n    const parsed = (isString ? JSON.parse(map) : map) as DecodedSourceMap | EncodedSourceMap;\n\n    const { version, file, names, sourceRoot, sources, sourcesContent } = parsed;\n    this.version = version;\n    this.file = file;\n    this.names = names || [];\n    this.sourceRoot = sourceRoot;\n    this.sources = sources;\n    this.sourcesContent = sourcesContent;\n\n    const from = resolve(sourceRoot || '', stripFilename(mapUrl));\n    this.resolvedSources = sources.map((s) => resolve(s || '', from));\n\n    const { mappings } = parsed;\n    if (typeof mappings === 'string') {\n      this._encoded = mappings;\n      this._decoded = undefined;\n    } else {\n      this._encoded = undefined;\n      this._decoded = maybeSort(mappings, isString);\n    }\n\n    this._decodedMemo = memoizedState();\n    this._bySources = undefined;\n    this._bySourceMemos = undefined;\n  }\n\n  static {\n    encodedMappings = (map) => {\n      return (map._encoded ??= encode(map._decoded!));\n    };\n\n    decodedMappings = (map) => {\n      return (map._decoded ||= decode(map._encoded!));\n    };\n\n    traceSegment = (map, line, column) => {\n      const decoded = decodedMappings(map);\n\n      // It's common for parent source maps to have pointers to lines that have no\n      // mapping (like a \"//# sourceMappingURL=\") at the end of the child file.\n      if (line >= decoded.length) return null;\n\n      const segments = decoded[line];\n      const index = traceSegmentInternal(\n        segments,\n        map._decodedMemo,\n        line,\n        column,\n        GREATEST_LOWER_BOUND,\n      );\n\n      return index === -1 ? null : segments[index];\n    };\n\n    originalPositionFor = (map, { line, column, bias }) => {\n      line--;\n      if (line < 0) throw new Error(LINE_GTR_ZERO);\n      if (column < 0) throw new Error(COL_GTR_EQ_ZERO);\n\n      const decoded = decodedMappings(map);\n\n      // It's common for parent source maps to have pointers to lines that have no\n      // mapping (like a \"//# sourceMappingURL=\") at the end of the child file.\n      if (line >= decoded.length) return OMapping(null, null, null, null);\n\n      const segments = decoded[line];\n      const index = traceSegmentInternal(\n        segments,\n        map._decodedMemo,\n        line,\n        column,\n        bias || GREATEST_LOWER_BOUND,\n      );\n\n      if (index === -1) return OMapping(null, null, null, null);\n\n      const segment = segments[index];\n      if (segment.length === 1) return OMapping(null, null, null, null);\n\n      const { names, resolvedSources } = map;\n      return OMapping(\n        resolvedSources[segment[SOURCES_INDEX]],\n        segment[SOURCE_LINE] + 1,\n        segment[SOURCE_COLUMN],\n        segment.length === 5 ? names[segment[NAMES_INDEX]] : null,\n      );\n    };\n\n    allGeneratedPositionsFor = (map, { source, line, column, bias }) => {\n      // SourceMapConsumer uses LEAST_UPPER_BOUND for some reason, so we follow suit.\n      return generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true);\n    };\n\n    generatedPositionFor = (map, { source, line, column, bias }) => {\n      return generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false);\n    };\n\n    eachMapping = (map, cb) => {\n      const decoded = decodedMappings(map);\n      const { names, resolvedSources } = map;\n\n      for (let i = 0; i < decoded.length; i++) {\n        const line = decoded[i];\n        for (let j = 0; j < line.length; j++) {\n          const seg = line[j];\n\n          const generatedLine = i + 1;\n          const generatedColumn = seg[0];\n          let source = null;\n          let originalLine = null;\n          let originalColumn = null;\n          let name = null;\n          if (seg.length !== 1) {\n            source = resolvedSources[seg[1]];\n            originalLine = seg[2] + 1;\n            originalColumn = seg[3];\n          }\n          if (seg.length === 5) name = names[seg[4]];\n\n          cb({\n            generatedLine,\n            generatedColumn,\n            source,\n            originalLine,\n            originalColumn,\n            name,\n          } as EachMapping);\n        }\n      }\n    };\n\n    sourceContentFor = (map, source) => {\n      const { sources, resolvedSources, sourcesContent } = map;\n      if (sourcesContent == null) return null;\n\n      let index = sources.indexOf(source);\n      if (index === -1) index = resolvedSources.indexOf(source);\n\n      return index === -1 ? null : sourcesContent[index];\n    };\n\n    presortedDecodedMap = (map, mapUrl) => {\n      const tracer = new TraceMap(clone(map, []), mapUrl);\n      tracer._decoded = map.mappings;\n      return tracer;\n    };\n\n    decodedMap = (map) => {\n      return clone(map, decodedMappings(map));\n    };\n\n    encodedMap = (map) => {\n      return clone(map, encodedMappings(map));\n    };\n\n    function generatedPosition(\n      map: TraceMap,\n      source: string,\n      line: number,\n      column: number,\n      bias: Bias,\n      all: false,\n    ): GeneratedMapping | InvalidGeneratedMapping;\n    function generatedPosition(\n      map: TraceMap,\n      source: string,\n      line: number,\n      column: number,\n      bias: Bias,\n      all: true,\n    ): GeneratedMapping[];\n    function generatedPosition(\n      map: TraceMap,\n      source: string,\n      line: number,\n      column: number,\n      bias: Bias,\n      all: boolean,\n    ): GeneratedMapping | InvalidGeneratedMapping | GeneratedMapping[] {\n      line--;\n      if (line < 0) throw new Error(LINE_GTR_ZERO);\n      if (column < 0) throw new Error(COL_GTR_EQ_ZERO);\n\n      const { sources, resolvedSources } = map;\n      let sourceIndex = sources.indexOf(source);\n      if (sourceIndex === -1) sourceIndex = resolvedSources.indexOf(source);\n      if (sourceIndex === -1) return all ? [] : GMapping(null, null);\n\n      const generated = (map._bySources ||= buildBySources(\n        decodedMappings(map),\n        (map._bySourceMemos = sources.map(memoizedState)),\n      ));\n\n      const segments = generated[sourceIndex][line];\n      if (segments == null) return all ? [] : GMapping(null, null);\n\n      const memo = map._bySourceMemos![sourceIndex];\n\n      if (all) return sliceGeneratedPositions(segments, memo, line, column, bias);\n\n      const index = traceSegmentInternal(segments, memo, line, column, bias);\n      if (index === -1) return GMapping(null, null);\n\n      const segment = segments[index];\n      return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);\n    }\n  }\n}\n\nfunction clone<T extends string | readonly SourceMapSegment[][]>(\n  map: TraceMap | DecodedSourceMap | EncodedSourceMap,\n  mappings: T,\n): T extends string ? EncodedSourceMap : DecodedSourceMap {\n  return {\n    version: map.version,\n    file: map.file,\n    names: map.names,\n    sourceRoot: map.sourceRoot,\n    sources: map.sources,\n    sourcesContent: map.sourcesContent,\n    mappings,\n  } as any;\n}\n\nfunction OMapping(source: null, line: null, column: null, name: null): InvalidOriginalMapping;\nfunction OMapping(\n  source: string,\n  line: number,\n  column: number,\n  name: string | null,\n): OriginalMapping;\nfunction OMapping(\n  source: string | null,\n  line: number | null,\n  column: number | null,\n  name: string | null,\n): OriginalMapping | InvalidOriginalMapping {\n  return { source, line, column, name } as any;\n}\n\nfunction GMapping(line: null, column: null): InvalidGeneratedMapping;\nfunction GMapping(line: number, column: number): GeneratedMapping;\nfunction GMapping(\n  line: number | null,\n  column: number | null,\n): GeneratedMapping | InvalidGeneratedMapping {\n  return { line, column } as any;\n}\n\nfunction traceSegmentInternal(\n  segments: SourceMapSegment[],\n  memo: MemoState,\n  line: number,\n  column: number,\n  bias: Bias,\n): number;\nfunction traceSegmentInternal(\n  segments: ReverseSegment[],\n  memo: MemoState,\n  line: number,\n  column: number,\n  bias: Bias,\n): number;\nfunction traceSegmentInternal(\n  segments: SourceMapSegment[] | ReverseSegment[],\n  memo: MemoState,\n  line: number,\n  column: number,\n  bias: Bias,\n): number {\n  let index = memoizedBinarySearch(segments, column, memo, line);\n  if (bsFound) {\n    index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index);\n  } else if (bias === LEAST_UPPER_BOUND) index++;\n\n  if (index === -1 || index === segments.length) return -1;\n  return index;\n}\n\nfunction sliceGeneratedPositions(\n  segments: ReverseSegment[],\n  memo: MemoState,\n  line: number,\n  column: number,\n  bias: Bias,\n): GeneratedMapping[] {\n  let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);\n\n  // We ignored the bias when tracing the segment so that we're guarnateed to find the first (in\n  // insertion order) segment that matched. Even if we did respect the bias when tracing, we would\n  // still need to call `lowerBound()` to find the first segment, which is slower than just looking\n  // for the GREATEST_LOWER_BOUND to begin with. The only difference that matters for us is when the\n  // binary search didn't match, in which case GREATEST_LOWER_BOUND just needs to increment to\n  // match LEAST_UPPER_BOUND.\n  if (!bsFound && bias === LEAST_UPPER_BOUND) min++;\n\n  if (min === -1 || min === segments.length) return [];\n\n  // We may have found the segment that started at an earlier column. If this is the case, then we\n  // need to slice all generated segments that match _that_ column, because all such segments span\n  // to our desired column.\n  const matchedColumn = bsFound ? column : segments[min][COLUMN];\n\n  // The binary search is not guaranteed to find the lower bound when a match wasn't found.\n  if (!bsFound) min = lowerBound(segments, matchedColumn, min);\n  const max = upperBound(segments, matchedColumn, min);\n\n  const result = [];\n  for (; min <= max; min++) {\n    const segment = segments[min];\n    result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"script"}