{"ast":null,"code":"import { AbstractChatCompletionRunner } from \"./AbstractChatCompletionRunner.mjs\";\nimport { isAssistantMessage } from \"./chatCompletionUtils.mjs\";\nexport class ChatCompletionRunner extends AbstractChatCompletionRunner {\n  static runFunctions(completions, params, options) {\n    const runner = new ChatCompletionRunner();\n\n    runner._run(() => runner._runFunctions(completions, params, options));\n\n    return runner;\n  }\n\n  static runTools(completions, params, options) {\n    const runner = new ChatCompletionRunner();\n\n    runner._run(() => runner._runTools(completions, params, options));\n\n    return runner;\n  }\n\n  _addMessage(message) {\n    super._addMessage(message);\n\n    if (isAssistantMessage(message) && message.content) {\n      this._emit('content', message.content);\n    }\n  }\n\n}","map":{"version":3,"mappings":"SAOEA,oCAGD;SACQC,0BAAoB;AAoB7B,OAAM,MAAOC,oBAAP,SAAoCF,4BAApC,CAA4F;AAC7E,SAAZG,YAAY,CACjBC,WADiB,EAEjBC,MAFiB,EAGjBC,OAHiB,EAGM;AAEvB,UAAMC,MAAM,GAAG,IAAIL,oBAAJ,EAAf;;AACAK,UAAM,CAACC,IAAP,CAAY,MAAMD,MAAM,CAACE,aAAP,CAAqBL,WAArB,EAAkCC,MAAlC,EAA0CC,OAA1C,CAAlB;;AACA,WAAOC,MAAP;AACD;;AAEc,SAARG,QAAQ,CACbN,WADa,EAEbC,MAFa,EAGbC,OAHa,EAGU;AAEvB,UAAMC,MAAM,GAAG,IAAIL,oBAAJ,EAAf;;AACAK,UAAM,CAACC,IAAP,CAAY,MAAMD,MAAM,CAACI,SAAP,CAAiBP,WAAjB,EAA8BC,MAA9B,EAAsCC,OAAtC,CAAlB;;AACA,WAAOC,MAAP;AACD;;AAEQK,aAAW,CAACC,OAAD,EAAoC;AACtD,UAAMD,WAAN,CAAkBC,OAAlB;;AACA,QAAIZ,kBAAkB,CAACY,OAAD,CAAlB,IAA+BA,OAAO,CAACC,OAA3C,EAAoD;AAClD,WAAKC,KAAL,CAAW,SAAX,EAAsBF,OAAO,CAACC,OAA9B;AACD;AACF;;AA1B+F","names":["AbstractChatCompletionRunner","isAssistantMessage","ChatCompletionRunner","runFunctions","completions","params","options","runner","_run","_runFunctions","runTools","_runTools","_addMessage","message","content","_emit"],"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/openai/src/lib/ChatCompletionRunner.ts"],"sourcesContent":["import {\n  type Completions,\n  type ChatCompletionMessageParam,\n  type ChatCompletionCreateParamsNonStreaming,\n} from \"../resources/chat/completions\";\nimport { type RunnableFunctions, type BaseFunctionsArgs, RunnableTools } from './RunnableFunction';\nimport {\n  AbstractChatCompletionRunner,\n  AbstractChatCompletionRunnerEvents,\n  RunnerOptions,\n} from './AbstractChatCompletionRunner';\nimport { isAssistantMessage } from './chatCompletionUtils';\n\nexport interface ChatCompletionRunnerEvents extends AbstractChatCompletionRunnerEvents {\n  content: (content: string) => void;\n}\n\nexport type ChatCompletionFunctionRunnerParams<FunctionsArgs extends BaseFunctionsArgs> = Omit<\n  ChatCompletionCreateParamsNonStreaming,\n  'functions'\n> & {\n  functions: RunnableFunctions<FunctionsArgs>;\n};\n\nexport type ChatCompletionToolRunnerParams<FunctionsArgs extends BaseFunctionsArgs> = Omit<\n  ChatCompletionCreateParamsNonStreaming,\n  'tools'\n> & {\n  tools: RunnableTools<FunctionsArgs>;\n};\n\nexport class ChatCompletionRunner extends AbstractChatCompletionRunner<ChatCompletionRunnerEvents> {\n  static runFunctions(\n    completions: Completions,\n    params: ChatCompletionFunctionRunnerParams<any[]>,\n    options?: RunnerOptions,\n  ): ChatCompletionRunner {\n    const runner = new ChatCompletionRunner();\n    runner._run(() => runner._runFunctions(completions, params, options));\n    return runner;\n  }\n\n  static runTools(\n    completions: Completions,\n    params: ChatCompletionToolRunnerParams<any[]>,\n    options?: RunnerOptions,\n  ): ChatCompletionRunner {\n    const runner = new ChatCompletionRunner();\n    runner._run(() => runner._runTools(completions, params, options));\n    return runner;\n  }\n\n  override _addMessage(message: ChatCompletionMessageParam) {\n    super._addMessage(message);\n    if (isAssistantMessage(message) && message.content) {\n      this._emit('content', message.content as string);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}