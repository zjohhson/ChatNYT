{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resizeSectionByteSize = resizeSectionByteSize;\nexports.resizeSectionVecSize = resizeSectionVecSize;\n\nvar _wasmGen = require(\"@webassemblyjs/wasm-gen\");\n\nvar _ast = require(\"@webassemblyjs/ast\");\n\nvar _helperBuffer = require(\"@webassemblyjs/helper-buffer\");\n\nfunction resizeSectionByteSize(ast, uint8Buffer, section, deltaBytes) {\n  var sectionMetadata = (0, _ast.getSectionMetadata)(ast, section);\n\n  if (typeof sectionMetadata === \"undefined\") {\n    throw new Error(\"Section metadata not found\");\n  }\n\n  if (typeof sectionMetadata.size.loc === \"undefined\") {\n    throw new Error(\"SectionMetadata \" + section + \" has no loc\");\n  } // keep old node location to be overriden\n\n\n  var start = sectionMetadata.size.loc.start.column;\n  var end = sectionMetadata.size.loc.end.column;\n  var newSectionSize = sectionMetadata.size.value + deltaBytes;\n  var newBytes = (0, _wasmGen.encodeU32)(newSectionSize);\n  /**\n   * update AST\n   */\n\n  sectionMetadata.size.value = newSectionSize;\n  var oldu32EncodedLen = end - start;\n  var newu32EncodedLen = newBytes.length; // the new u32 has a different encoded length\n\n  if (newu32EncodedLen !== oldu32EncodedLen) {\n    var deltaInSizeEncoding = newu32EncodedLen - oldu32EncodedLen;\n    sectionMetadata.size.loc.end.column = start + newu32EncodedLen;\n    deltaBytes += deltaInSizeEncoding; // move the vec size pointer size the section size is now smaller\n\n    sectionMetadata.vectorOfSize.loc.start.column += deltaInSizeEncoding;\n    sectionMetadata.vectorOfSize.loc.end.column += deltaInSizeEncoding;\n  } // Once we hit our section every that is after needs to be shifted by the delta\n\n\n  var encounteredSection = false;\n  (0, _ast.traverse)(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        (0, _ast.shiftSection)(ast, path.node, deltaBytes);\n      }\n    }\n  });\n  return (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start, end, newBytes);\n}\n\nfunction resizeSectionVecSize(ast, uint8Buffer, section, deltaElements) {\n  var sectionMetadata = (0, _ast.getSectionMetadata)(ast, section);\n\n  if (typeof sectionMetadata === \"undefined\") {\n    throw new Error(\"Section metadata not found\");\n  }\n\n  if (typeof sectionMetadata.vectorOfSize.loc === \"undefined\") {\n    throw new Error(\"SectionMetadata \" + section + \" has no loc\");\n  } // Section has no vector\n\n\n  if (sectionMetadata.vectorOfSize.value === -1) {\n    return uint8Buffer;\n  } // keep old node location to be overriden\n\n\n  var start = sectionMetadata.vectorOfSize.loc.start.column;\n  var end = sectionMetadata.vectorOfSize.loc.end.column;\n  var newValue = sectionMetadata.vectorOfSize.value + deltaElements;\n  var newBytes = (0, _wasmGen.encodeU32)(newValue); // Update AST\n\n  sectionMetadata.vectorOfSize.value = newValue;\n  sectionMetadata.vectorOfSize.loc.end.column = start + newBytes.length;\n  return (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start, end, newBytes);\n}","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/@webassemblyjs/helper-wasm-section/lib/resize.js"],"names":["Object","defineProperty","exports","value","resizeSectionByteSize","resizeSectionVecSize","_wasmGen","require","_ast","_helperBuffer","ast","uint8Buffer","section","deltaBytes","sectionMetadata","getSectionMetadata","Error","size","loc","start","column","end","newSectionSize","newBytes","encodeU32","oldu32EncodedLen","newu32EncodedLen","length","deltaInSizeEncoding","vectorOfSize","encounteredSection","traverse","SectionMetadata","path","node","shiftSection","overrideBytesInBuffer","deltaElements","newValue"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resizeSectionByteSize = resizeSectionByteSize;\nexports.resizeSectionVecSize = resizeSectionVecSize;\n\nvar _wasmGen = require(\"@webassemblyjs/wasm-gen\");\n\nvar _ast = require(\"@webassemblyjs/ast\");\n\nvar _helperBuffer = require(\"@webassemblyjs/helper-buffer\");\n\nfunction resizeSectionByteSize(ast, uint8Buffer, section, deltaBytes) {\n  var sectionMetadata = (0, _ast.getSectionMetadata)(ast, section);\n\n  if (typeof sectionMetadata === \"undefined\") {\n    throw new Error(\"Section metadata not found\");\n  }\n\n  if (typeof sectionMetadata.size.loc === \"undefined\") {\n    throw new Error(\"SectionMetadata \" + section + \" has no loc\");\n  } // keep old node location to be overriden\n\n\n  var start = sectionMetadata.size.loc.start.column;\n  var end = sectionMetadata.size.loc.end.column;\n  var newSectionSize = sectionMetadata.size.value + deltaBytes;\n  var newBytes = (0, _wasmGen.encodeU32)(newSectionSize);\n  /**\n   * update AST\n   */\n\n  sectionMetadata.size.value = newSectionSize;\n  var oldu32EncodedLen = end - start;\n  var newu32EncodedLen = newBytes.length; // the new u32 has a different encoded length\n\n  if (newu32EncodedLen !== oldu32EncodedLen) {\n    var deltaInSizeEncoding = newu32EncodedLen - oldu32EncodedLen;\n    sectionMetadata.size.loc.end.column = start + newu32EncodedLen;\n    deltaBytes += deltaInSizeEncoding; // move the vec size pointer size the section size is now smaller\n\n    sectionMetadata.vectorOfSize.loc.start.column += deltaInSizeEncoding;\n    sectionMetadata.vectorOfSize.loc.end.column += deltaInSizeEncoding;\n  } // Once we hit our section every that is after needs to be shifted by the delta\n\n\n  var encounteredSection = false;\n  (0, _ast.traverse)(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        (0, _ast.shiftSection)(ast, path.node, deltaBytes);\n      }\n    }\n  });\n  return (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start, end, newBytes);\n}\n\nfunction resizeSectionVecSize(ast, uint8Buffer, section, deltaElements) {\n  var sectionMetadata = (0, _ast.getSectionMetadata)(ast, section);\n\n  if (typeof sectionMetadata === \"undefined\") {\n    throw new Error(\"Section metadata not found\");\n  }\n\n  if (typeof sectionMetadata.vectorOfSize.loc === \"undefined\") {\n    throw new Error(\"SectionMetadata \" + section + \" has no loc\");\n  } // Section has no vector\n\n\n  if (sectionMetadata.vectorOfSize.value === -1) {\n    return uint8Buffer;\n  } // keep old node location to be overriden\n\n\n  var start = sectionMetadata.vectorOfSize.loc.start.column;\n  var end = sectionMetadata.vectorOfSize.loc.end.column;\n  var newValue = sectionMetadata.vectorOfSize.value + deltaElements;\n  var newBytes = (0, _wasmGen.encodeU32)(newValue); // Update AST\n\n  sectionMetadata.vectorOfSize.value = newValue;\n  sectionMetadata.vectorOfSize.loc.end.column = start + newBytes.length;\n  return (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start, end, newBytes);\n}"]},"metadata":{},"sourceType":"script"}