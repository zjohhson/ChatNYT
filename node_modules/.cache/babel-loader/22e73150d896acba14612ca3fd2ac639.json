{"ast":null,"code":"import t from \"../lib/scaleD.js\";\nimport e from \"../lib/LdrsBaseElement.js\";\nvar s = \":host{align-items:center;display:inline-flex;flex-shrink:0;height:calc(var(--uib-size)*.42);justify-content:center;width:var(--uib-size)}:host([hidden]){display:none}.container{height:calc(var(--uib-size)*.42);overflow:visible;transform-origin:center;width:var(--uib-size)}.car{fill:none;stroke:var(--uib-color);stroke-dasharray:var(--uib-dash),var(--uib-gap);stroke-dashoffset:0;stroke-linecap:round;animation:travel var(--uib-speed) linear infinite;transition:stroke .5s ease;will-change:stroke-dasharray,stroke-dashoffset}.track{stroke:var(--uib-color);opacity:var(--uib-bg-opacity)}@keyframes travel{0%{stroke-dashoffset:0}to{stroke-dashoffset:100}}\";\n\nclass i extends e {\n  _attributes = [\"size\", \"color\", \"speed\", \"stroke\", \"stroke-length\", \"bg-opacity\"];\n  size;\n  color;\n  speed;\n  stroke;\n  \"stroke-length\";\n  \"bg-opacity\";\n  d;\n\n  static get observedAttributes() {\n    return [\"size\", \"color\", \"speed\", \"stroke\", \"stroke-length\", \"bg-opacity\"];\n  }\n\n  constructor() {\n    super(), this.storePropsToUpgrade(this._attributes), this.reflect(this._attributes), this.d = \"M26.7,12.2c3.5,3.4,7.4,7.8,12.7,7.8c5.5,0,9.6-4.4,9.6-9.5C49,5,45.1,1,39.8,1c-5.5,0-9.5,4.2-13.1,7.8l-3.4,3.3c-3.6,3.6-7.6,7.8-13.1,7.8C4.9,20,1,16,1,10.5C1,5.4,5.1,1,10.6,1c5.3,0,9.2,4.5,12.7,7.8L26.7,12.2z\";\n  }\n\n  connectedCallback() {\n    this.upgradeStoredProps(), this.applyDefaultProps({\n      size: 55,\n      color: \"black\",\n      speed: 1.3,\n      stroke: 4,\n      \"stroke-length\": .15,\n      \"bg-opacity\": .1\n    });\n    const e = parseInt(this.size),\n          i = t(e / 50, this.d);\n    this.template.innerHTML = `\\n      <svg\\n        class=\"container\" \\n        x=\"0px\" \\n        y=\"0px\"\\n        viewBox=\"0 0 ${this.size} ${e * (2.1 / 5)}\"\\n        height=\"${e * (2.1 / 5)}\"\\n        width=\"${this.size}\"\\n        preserveAspectRatio='xMidYMid meet'\\n      >\\n        <path\\n          class=\"track\" \\n          fill=\"none\" \\n          stroke-width=\"${this.stroke}\" \\n          pathlength=\"100\"\\n          d=\"${i}\"\\n        />\\n\\n        <path\\n          class=\"car\" \\n          fill=\"none\" \\n          stroke-width=\"${this.stroke}\" \\n          pathlength=\"100\"\\n          d=\"${i}\"\\n        />\\n      </svg>\\n      <style>\\n        :host{\\n          --uib-size: ${this.size}px;\\n          --uib-color: ${this.color};\\n          --uib-speed: ${this.speed}s;\\n          --uib-dash: ${100 * parseFloat(this[\"stroke-length\"])};\\n          --uib-gap: ${100 - 100 * parseFloat(this[\"stroke-length\"])};\\n          --uib-bg-opacity: ${this[\"bg-opacity\"]};\\n        }\\n        ${s}\\n      </style>\\n    `, this.shadow.replaceChildren(this.template.content.cloneNode(!0));\n  }\n\n  attributeChangedCallback() {\n    const e = this.shadow.querySelector(\"style\"),\n          i = this.shadow.querySelector(\"svg\"),\n          r = this.shadow.querySelectorAll(\"path\"),\n          n = parseInt(this.size);\n    e && (i.setAttribute(\"height\", String(n * (2.1 / 5))), i.setAttribute(\"width\", this.size), i.setAttribute(\"viewBox\", `0 0 ${this.size} ${n * (2.1 / 5)}`), r.forEach(e => {\n      e.setAttribute(\"stroke-width\", this.stroke), e.setAttribute(\"d\", t(n / 50, this.d));\n    }), e.innerHTML = `\\n      :host{\\n        --uib-size: ${this.size}px;\\n        --uib-color: ${this.color};\\n        --uib-speed: ${this.speed}s;\\n        --uib-dash: ${100 * parseFloat(this[\"stroke-length\"])};\\n        --uib-gap: ${100 - 100 * parseFloat(this[\"stroke-length\"])};\\n        --uib-bg-opacity: ${this[\"bg-opacity\"]};\\n      }\\n      ${s}\\n    `);\n  }\n\n}\n\nvar r = {\n  register: function () {\n    let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"l-infinity\";\n    customElements.get(t) || customElements.define(t, class extends i {});\n  },\n  element: i\n};\nexport { r as default };","map":{"version":3,"mappings":"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","names":["Infinity","Base","_attributes","size","color","speed","stroke","d","observedAttributes","constructor","super","this","storePropsToUpgrade","reflect","connectedCallback","upgradeStoredProps","applyDefaultProps","sizeInt","parseInt","scaledD","scaleD","template","innerHTML","parseFloat","styles","shadow","replaceChildren","content","cloneNode","attributeChangedCallback","styleEl","querySelector","svgEl","pathEls","querySelectorAll","setAttribute","String","forEach","pathEl","infinity","register","name","customElements","get","define","element"],"sources":["/Users/zachjohnson/Desktop/React-Wordle-lesson-16/node_modules/ldrs/temp-ts-out/elements/infinity.js"],"sourcesContent":["import scaleD from '../lib/scaleD.js';\nimport Base from '../lib/LdrsBaseElement.js';\nimport styles from './infinity.scss';\nclass Infinity extends Base {\n    _attributes = [\n        'size',\n        'color',\n        'speed',\n        'stroke',\n        'stroke-length',\n        'bg-opacity',\n    ];\n    size;\n    color;\n    speed;\n    stroke;\n    'stroke-length';\n    'bg-opacity';\n    d;\n    static get observedAttributes() {\n        return ['size', 'color', 'speed', 'stroke', 'stroke-length', 'bg-opacity'];\n    }\n    constructor() {\n        super();\n        this.storePropsToUpgrade(this._attributes);\n        this.reflect(this._attributes);\n        this.d =\n            'M26.7,12.2c3.5,3.4,7.4,7.8,12.7,7.8c5.5,0,9.6-4.4,9.6-9.5C49,5,45.1,1,39.8,1c-5.5,0-9.5,4.2-13.1,7.8l-3.4,3.3c-3.6,3.6-7.6,7.8-13.1,7.8C4.9,20,1,16,1,10.5C1,5.4,5.1,1,10.6,1c5.3,0,9.2,4.5,12.7,7.8L26.7,12.2z';\n    }\n    connectedCallback() {\n        this.upgradeStoredProps();\n        this.applyDefaultProps({\n            size: 55,\n            color: 'black',\n            speed: 1.3,\n            stroke: 4,\n            'stroke-length': 0.15,\n            'bg-opacity': 0.1,\n        });\n        const sizeInt = parseInt(this.size);\n        const scaledD = scaleD(sizeInt / 50, this.d);\n        this.template.innerHTML = `\n      <svg\n        class=\"container\" \n        x=\"0px\" \n        y=\"0px\"\n        viewBox=\"0 0 ${this.size} ${sizeInt * (2.1 / 5)}\"\n        height=\"${sizeInt * (2.1 / 5)}\"\n        width=\"${this.size}\"\n        preserveAspectRatio='xMidYMid meet'\n      >\n        <path\n          class=\"track\" \n          fill=\"none\" \n          stroke-width=\"${this.stroke}\" \n          pathlength=\"100\"\n          d=\"${scaledD}\"\n        />\n\n        <path\n          class=\"car\" \n          fill=\"none\" \n          stroke-width=\"${this.stroke}\" \n          pathlength=\"100\"\n          d=\"${scaledD}\"\n        />\n      </svg>\n      <style>\n        :host{\n          --uib-size: ${this.size}px;\n          --uib-color: ${this.color};\n          --uib-speed: ${this.speed}s;\n          --uib-dash: ${parseFloat(this['stroke-length']) * 100};\n          --uib-gap: ${100 - parseFloat(this['stroke-length']) * 100};\n          --uib-bg-opacity: ${this['bg-opacity']};\n        }\n        ${styles}\n      </style>\n    `;\n        this.shadow.replaceChildren(this.template.content.cloneNode(true));\n    }\n    attributeChangedCallback() {\n        const styleEl = this.shadow.querySelector('style');\n        const svgEl = this.shadow.querySelector('svg');\n        const pathEls = this.shadow.querySelectorAll('path');\n        const sizeInt = parseInt(this.size);\n        if (!styleEl)\n            return;\n        svgEl.setAttribute('height', String(sizeInt * (2.1 / 5)));\n        svgEl.setAttribute('width', this.size);\n        svgEl.setAttribute('viewBox', `0 0 ${this.size} ${sizeInt * (2.1 / 5)}`);\n        pathEls.forEach((pathEl) => {\n            pathEl.setAttribute('stroke-width', this.stroke);\n            pathEl.setAttribute('d', scaleD(sizeInt / 50, this.d));\n        });\n        styleEl.innerHTML = `\n      :host{\n        --uib-size: ${this.size}px;\n        --uib-color: ${this.color};\n        --uib-speed: ${this.speed}s;\n        --uib-dash: ${parseFloat(this['stroke-length']) * 100};\n        --uib-gap: ${100 - parseFloat(this['stroke-length']) * 100};\n        --uib-bg-opacity: ${this['bg-opacity']};\n      }\n      ${styles}\n    `;\n    }\n}\nexport default {\n    register: (name = 'l-infinity') => {\n        if (!customElements.get(name)) {\n            customElements.define(name, class extends Infinity {\n            });\n        }\n    },\n    element: Infinity,\n};\n"]},"metadata":{},"sourceType":"module"}