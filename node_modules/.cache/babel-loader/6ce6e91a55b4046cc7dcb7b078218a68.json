{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\n\nconst NullDependency = require(\"./NullDependency\");\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\n/** @typedef {import(\"../javascript/JavascriptParser\").Range} Range */\n\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n\n/** @typedef {import(\"./LocalModule\")} LocalModule */\n\n\nclass LocalModuleDependency extends NullDependency {\n  /**\n   * @param {LocalModule} localModule local module\n   * @param {Range} range range\n   * @param {boolean} callNew true, when the local module should be called with new\n   */\n  constructor(localModule, range, callNew) {\n    super();\n    this.localModule = localModule;\n    this.range = range;\n    this.callNew = callNew;\n  }\n  /**\n   * @param {ObjectSerializerContext} context context\n   */\n\n\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.localModule);\n    write(this.range);\n    write(this.callNew);\n    super.serialize(context);\n  }\n  /**\n   * @param {ObjectDeserializerContext} context context\n   */\n\n\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.localModule = read();\n    this.range = read();\n    this.callNew = read();\n    super.deserialize(context);\n  }\n\n}\n\nmakeSerializable(LocalModuleDependency, \"webpack/lib/dependencies/LocalModuleDependency\");\nLocalModuleDependency.Template = class LocalModuleDependencyTemplate extends NullDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, templateContext) {\n    const dep =\n    /** @type {LocalModuleDependency} */\n    dependency;\n    if (!dep.range) return;\n    const moduleInstance = dep.callNew ? `new (function () { return ${dep.localModule.variableName()}; })()` : dep.localModule.variableName();\n    source.replace(dep.range[0], dep.range[1] - 1, moduleInstance);\n  }\n\n};\nmodule.exports = LocalModuleDependency;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/dependencies/LocalModuleDependency.js"],"names":["makeSerializable","require","NullDependency","LocalModuleDependency","constructor","localModule","range","callNew","serialize","context","write","deserialize","read","Template","LocalModuleDependencyTemplate","apply","dependency","source","templateContext","dep","moduleInstance","variableName","replace","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA9B;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;AAEA,MAAME,qBAAN,SAAoCD,cAApC,CAAmD;AAClD;AACD;AACA;AACA;AACA;AACCE,EAAAA,WAAW,CAACC,WAAD,EAAcC,KAAd,EAAqBC,OAArB,EAA8B;AACxC;AAEA,SAAKF,WAAL,GAAmBA,WAAnB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,SAAS,CAACC,OAAD,EAAU;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,OAAlB;AAEAC,IAAAA,KAAK,CAAC,KAAKL,WAAN,CAAL;AACAK,IAAAA,KAAK,CAAC,KAAKJ,KAAN,CAAL;AACAI,IAAAA,KAAK,CAAC,KAAKH,OAAN,CAAL;AAEA,UAAMC,SAAN,CAAgBC,OAAhB;AACA;AAED;AACD;AACA;;;AACCE,EAAAA,WAAW,CAACF,OAAD,EAAU;AACpB,UAAM;AAAEG,MAAAA;AAAF,QAAWH,OAAjB;AAEA,SAAKJ,WAAL,GAAmBO,IAAI,EAAvB;AACA,SAAKN,KAAL,GAAaM,IAAI,EAAjB;AACA,SAAKL,OAAL,GAAeK,IAAI,EAAnB;AAEA,UAAMD,WAAN,CAAkBF,OAAlB;AACA;;AAtCiD;;AAyCnDT,gBAAgB,CACfG,qBADe,EAEf,gDAFe,CAAhB;AAKAA,qBAAqB,CAACU,QAAtB,GAAiC,MAAMC,6BAAN,SAChCZ,cAAc,CAACW,QADiB,CAE/B;AACD;AACD;AACA;AACA;AACA;AACA;AACCE,EAAAA,KAAK,CAACC,UAAD,EAAaC,MAAb,EAAqBC,eAArB,EAAsC;AAC1C,UAAMC,GAAG;AAAG;AAAsCH,IAAAA,UAAlD;AACA,QAAI,CAACG,GAAG,CAACb,KAAT,EAAgB;AAChB,UAAMc,cAAc,GAAGD,GAAG,CAACZ,OAAJ,GACnB,6BAA4BY,GAAG,CAACd,WAAJ,CAAgBgB,YAAhB,EAA+B,QADxC,GAEpBF,GAAG,CAACd,WAAJ,CAAgBgB,YAAhB,EAFH;AAGAJ,IAAAA,MAAM,CAACK,OAAP,CAAeH,GAAG,CAACb,KAAJ,CAAU,CAAV,CAAf,EAA6Ba,GAAG,CAACb,KAAJ,CAAU,CAAV,IAAe,CAA5C,EAA+Cc,cAA/C;AACA;;AAdA,CAFF;AAmBAG,MAAM,CAACC,OAAP,GAAiBrB,qBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst NullDependency = require(\"./NullDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../javascript/JavascriptParser\").Range} Range */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n/** @typedef {import(\"./LocalModule\")} LocalModule */\n\nclass LocalModuleDependency extends NullDependency {\n\t/**\n\t * @param {LocalModule} localModule local module\n\t * @param {Range} range range\n\t * @param {boolean} callNew true, when the local module should be called with new\n\t */\n\tconstructor(localModule, range, callNew) {\n\t\tsuper();\n\n\t\tthis.localModule = localModule;\n\t\tthis.range = range;\n\t\tthis.callNew = callNew;\n\t}\n\n\t/**\n\t * @param {ObjectSerializerContext} context context\n\t */\n\tserialize(context) {\n\t\tconst { write } = context;\n\n\t\twrite(this.localModule);\n\t\twrite(this.range);\n\t\twrite(this.callNew);\n\n\t\tsuper.serialize(context);\n\t}\n\n\t/**\n\t * @param {ObjectDeserializerContext} context context\n\t */\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\n\t\tthis.localModule = read();\n\t\tthis.range = read();\n\t\tthis.callNew = read();\n\n\t\tsuper.deserialize(context);\n\t}\n}\n\nmakeSerializable(\n\tLocalModuleDependency,\n\t\"webpack/lib/dependencies/LocalModuleDependency\"\n);\n\nLocalModuleDependency.Template = class LocalModuleDependencyTemplate extends (\n\tNullDependency.Template\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(dependency, source, templateContext) {\n\t\tconst dep = /** @type {LocalModuleDependency} */ (dependency);\n\t\tif (!dep.range) return;\n\t\tconst moduleInstance = dep.callNew\n\t\t\t? `new (function () { return ${dep.localModule.variableName()}; })()`\n\t\t\t: dep.localModule.variableName();\n\t\tsource.replace(dep.range[0], dep.range[1] - 1, moduleInstance);\n\t}\n};\n\nmodule.exports = LocalModuleDependency;\n"]},"metadata":{},"sourceType":"script"}