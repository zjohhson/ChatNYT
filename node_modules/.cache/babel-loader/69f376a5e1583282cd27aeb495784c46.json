{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/**\n * getOrInsert is a helper function for maps that allows you to get a value\n * from a map if it exists, or insert a new value if it doesn't. If it value doesn't\n * exist, it will be computed by the provided function.\n *\n * @template K\n * @template V\n * @param {Map<K, V>} map The map object to check\n * @param {K} key The key to check\n * @param {function(): V} computer function which will compute the value if it doesn't exist\n * @returns {V} The value from the map, or the computed value\n *\n * @example\n * ```js\n * const map = new Map();\n * const value = getOrInsert(map, \"key\", () => \"value\");\n * console.log(value); // \"value\"\n * ```\n */\n\nexports.getOrInsert = (map, key, computer) => {\n  // Grab key from map\n  const value = map.get(key); // If the value already exists, return it\n\n  if (value !== undefined) return value; // Otherwise compute the value, set it in the map, and return it\n\n  const newValue = computer();\n  map.set(key, newValue);\n  return newValue;\n};","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/util/MapHelpers.js"],"names":["exports","getOrInsert","map","key","computer","value","get","undefined","newValue","set"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,OAAO,CAACC,WAAR,GAAsB,CAACC,GAAD,EAAMC,GAAN,EAAWC,QAAX,KAAwB;AAC7C;AACA,QAAMC,KAAK,GAAGH,GAAG,CAACI,GAAJ,CAAQH,GAAR,CAAd,CAF6C,CAG7C;;AACA,MAAIE,KAAK,KAAKE,SAAd,EAAyB,OAAOF,KAAP,CAJoB,CAK7C;;AACA,QAAMG,QAAQ,GAAGJ,QAAQ,EAAzB;AACAF,EAAAA,GAAG,CAACO,GAAJ,CAAQN,GAAR,EAAaK,QAAb;AACA,SAAOA,QAAP;AACA,CATD","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/**\n * getOrInsert is a helper function for maps that allows you to get a value\n * from a map if it exists, or insert a new value if it doesn't. If it value doesn't\n * exist, it will be computed by the provided function.\n *\n * @template K\n * @template V\n * @param {Map<K, V>} map The map object to check\n * @param {K} key The key to check\n * @param {function(): V} computer function which will compute the value if it doesn't exist\n * @returns {V} The value from the map, or the computed value\n *\n * @example\n * ```js\n * const map = new Map();\n * const value = getOrInsert(map, \"key\", () => \"value\");\n * console.log(value); // \"value\"\n * ```\n */\nexports.getOrInsert = (map, key, computer) => {\n\t// Grab key from map\n\tconst value = map.get(key);\n\t// If the value already exists, return it\n\tif (value !== undefined) return value;\n\t// Otherwise compute the value, set it in the map, and return it\n\tconst newValue = computer();\n\tmap.set(key, newValue);\n\treturn newValue;\n};\n"]},"metadata":{},"sourceType":"script"}