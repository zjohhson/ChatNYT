{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { multipartFormRequestOptions } from 'openai/core';\nexport class Transcriptions extends APIResource {\n  /**\n   * Transcribes audio into the input language.\n   */\n  create(body, options) {\n    return this.post('/audio/transcriptions', multipartFormRequestOptions({\n      body,\n      ...options\n    }));\n  }\n\n}\n\n(function (Transcriptions) {})(Transcriptions || (Transcriptions = {}));","map":{"version":3,"mappings":"AAAA;SAGSA,mBAAmB;SAEFC,mCAAmC;AAE7D,OAAM,MAAOC,cAAP,SAA8BF,WAA9B,CAAyC;AAC7C;;;AAGAG,QAAM,CAACC,IAAD,EAAkCC,OAAlC,EAA+D;AACnE,WAAO,KAAKC,IAAL,CAAU,uBAAV,EAAmCL,2BAA2B,CAAC;AAAEG,UAAF;AAAQ,SAAGC;AAAX,KAAD,CAA9D,CAAP;AACD;;AAN4C;;AAwD/C,WAAiBH,cAAjB,EAA+B,CAG9B,CAHD,EAAiBA,cAAc,KAAdA,cAAc,MAA/B","names":["APIResource","multipartFormRequestOptions","Transcriptions","create","body","options","post"],"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/openai/src/resources/audio/transcriptions.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../core\";\nimport { APIResource } from \"../../resource\";\nimport * as TranscriptionsAPI from \"./transcriptions\";\nimport { type Uploadable, multipartFormRequestOptions } from \"../../core\";\n\nexport class Transcriptions extends APIResource {\n  /**\n   * Transcribes audio into the input language.\n   */\n  create(body: TranscriptionCreateParams, options?: Core.RequestOptions): Core.APIPromise<Transcription> {\n    return this.post('/audio/transcriptions', multipartFormRequestOptions({ body, ...options }));\n  }\n}\n\nexport interface Transcription {\n  text: string;\n}\n\nexport interface TranscriptionCreateParams {\n  /**\n   * The audio file object (not file name) to transcribe, in one of these formats:\n   * flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n   */\n  file: Uploadable;\n\n  /**\n   * ID of the model to use. Only `whisper-1` is currently available.\n   */\n  model: (string & {}) | 'whisper-1';\n\n  /**\n   * The language of the input audio. Supplying the input language in\n   * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will\n   * improve accuracy and latency.\n   */\n  language?: string;\n\n  /**\n   * An optional text to guide the model's style or continue a previous audio\n   * segment. The\n   * [prompt](https://platform.openai.com/docs/guides/speech-to-text/prompting)\n   * should match the audio language.\n   */\n  prompt?: string;\n\n  /**\n   * The format of the transcript output, in one of these options: `json`, `text`,\n   * `srt`, `verbose_json`, or `vtt`.\n   */\n  response_format?: 'json' | 'text' | 'srt' | 'verbose_json' | 'vtt';\n\n  /**\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n   * output more random, while lower values like 0.2 will make it more focused and\n   * deterministic. If set to 0, the model will use\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n   * automatically increase the temperature until certain thresholds are hit.\n   */\n  temperature?: number;\n}\n\nexport namespace Transcriptions {\n  export import Transcription = TranscriptionsAPI.Transcription;\n  export import TranscriptionCreateParams = TranscriptionsAPI.TranscriptionCreateParams;\n}\n"]},"metadata":{},"sourceType":"module"}