{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst RuntimeModule = require(\"../RuntimeModule\");\n\nconst Template = require(\"../Template\");\n/** @typedef {import(\"../Compilation\")} Compilation */\n\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\n\nclass ChunkPreloadTriggerRuntimeModule extends RuntimeModule {\n  /**\n   * @param {Record<string|number, (string|number)[]>} chunkMap map from chunk to chunks\n   */\n  constructor(chunkMap) {\n    super(`chunk preload trigger`, RuntimeModule.STAGE_TRIGGER);\n    this.chunkMap = chunkMap;\n  }\n  /**\n   * @returns {string | null} runtime code\n   */\n\n\n  generate() {\n    const {\n      chunkMap\n    } = this;\n    const compilation =\n    /** @type {Compilation} */\n    this.compilation;\n    const {\n      runtimeTemplate\n    } = compilation;\n    const body = [\"var chunks = chunkToChildrenMap[chunkId];\", `Array.isArray(chunks) && chunks.map(${RuntimeGlobals.preloadChunk});`];\n    return Template.asString([Template.asString([`var chunkToChildrenMap = ${JSON.stringify(chunkMap, null, \"\\t\")};`, `${RuntimeGlobals.ensureChunkHandlers}.preload = ${runtimeTemplate.basicFunction(\"chunkId\", body)};`])]);\n  }\n\n}\n\nmodule.exports = ChunkPreloadTriggerRuntimeModule;","map":{"version":3,"sources":["/Users/zachjohnson/Desktop/ChatNYT/node_modules/webpack/lib/prefetch/ChunkPreloadTriggerRuntimeModule.js"],"names":["RuntimeGlobals","require","RuntimeModule","Template","ChunkPreloadTriggerRuntimeModule","constructor","chunkMap","STAGE_TRIGGER","generate","compilation","runtimeTemplate","body","preloadChunk","asString","JSON","stringify","ensureChunkHandlers","basicFunction","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAAxB;AAEA;;AACA;;;AAEA,MAAMG,gCAAN,SAA+CF,aAA/C,CAA6D;AAC5D;AACD;AACA;AACCG,EAAAA,WAAW,CAACC,QAAD,EAAW;AACrB,UAAO,uBAAP,EAA+BJ,aAAa,CAACK,aAA7C;AACA,SAAKD,QAAL,GAAgBA,QAAhB;AACA;AAED;AACD;AACA;;;AACCE,EAAAA,QAAQ,GAAG;AACV,UAAM;AAAEF,MAAAA;AAAF,QAAe,IAArB;AACA,UAAMG,WAAW;AAAG;AAA4B,SAAKA,WAArD;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAsBD,WAA5B;AACA,UAAME,IAAI,GAAG,CACZ,2CADY,EAEX,uCAAsCX,cAAc,CAACY,YAAa,IAFvD,CAAb;AAIA,WAAOT,QAAQ,CAACU,QAAT,CAAkB,CACxBV,QAAQ,CAACU,QAAT,CAAkB,CAChB,4BAA2BC,IAAI,CAACC,SAAL,CAAeT,QAAf,EAAyB,IAAzB,EAA+B,IAA/B,CAAqC,GADhD,EAEhB,GACAN,cAAc,CAACgB,mBACf,cAAaN,eAAe,CAACO,aAAhB,CAA8B,SAA9B,EAAyCN,IAAzC,CAA+C,GAJ5C,CAAlB,CADwB,CAAlB,CAAP;AAQA;;AA5B2D;;AA+B7DO,MAAM,CAACC,OAAP,GAAiBf,gCAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\nclass ChunkPreloadTriggerRuntimeModule extends RuntimeModule {\n\t/**\n\t * @param {Record<string|number, (string|number)[]>} chunkMap map from chunk to chunks\n\t */\n\tconstructor(chunkMap) {\n\t\tsuper(`chunk preload trigger`, RuntimeModule.STAGE_TRIGGER);\n\t\tthis.chunkMap = chunkMap;\n\t}\n\n\t/**\n\t * @returns {string | null} runtime code\n\t */\n\tgenerate() {\n\t\tconst { chunkMap } = this;\n\t\tconst compilation = /** @type {Compilation} */ (this.compilation);\n\t\tconst { runtimeTemplate } = compilation;\n\t\tconst body = [\n\t\t\t\"var chunks = chunkToChildrenMap[chunkId];\",\n\t\t\t`Array.isArray(chunks) && chunks.map(${RuntimeGlobals.preloadChunk});`\n\t\t];\n\t\treturn Template.asString([\n\t\t\tTemplate.asString([\n\t\t\t\t`var chunkToChildrenMap = ${JSON.stringify(chunkMap, null, \"\\t\")};`,\n\t\t\t\t`${\n\t\t\t\t\tRuntimeGlobals.ensureChunkHandlers\n\t\t\t\t}.preload = ${runtimeTemplate.basicFunction(\"chunkId\", body)};`\n\t\t\t])\n\t\t]);\n\t}\n}\n\nmodule.exports = ChunkPreloadTriggerRuntimeModule;\n"]},"metadata":{},"sourceType":"script"}